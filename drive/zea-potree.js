(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ZeaPotree"] = factory();
	else
		root["ZeaPotree"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/zea/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./libs/other/BinaryHeap.js":
/*!**********************************!*\
  !*** ./libs/other/BinaryHeap.js ***!
  \**********************************/
/*! exports provided: BinaryHeap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BinaryHeap\", function() { return BinaryHeap; });\n/*\r\n** Binary Heap implementation in Javascript\r\n** From: http://eloquentjavascript.net/1st_edition/appendix2.htmlt\r\n**\r\n** Copyright (c) 2007 Marijn Haverbeke, last modified on November 28 2013.\r\n**\r\n** Licensed under a Creative Commons attribution-noncommercial license. \r\n** All code in this book may also be considered licensed under an MIT license.\r\n*/\r\n\r\n\r\n\r\nfunction BinaryHeap(scoreFunction){\r\n  this.content = [];\r\n  this.scoreFunction = scoreFunction;\r\n}\r\n\r\nBinaryHeap.prototype = {\r\n  push: function(element) {\r\n    // Add the new element to the end of the array.\r\n    this.content.push(element);\r\n    // Allow it to bubble up.\r\n    this.bubbleUp(this.content.length - 1);\r\n  },\r\n\r\n  pop: function() {\r\n    // Store the first element so we can return it later.\r\n    var result = this.content[0];\r\n    // Get the element at the end of the array.\r\n    var end = this.content.pop();\r\n    // If there are any elements left, put the end element at the\r\n    // start, and let it sink down.\r\n    if (this.content.length > 0) {\r\n      this.content[0] = end;\r\n      this.sinkDown(0);\r\n    }\r\n    return result;\r\n  },\r\n\r\n  remove: function(node) {\r\n    var length = this.content.length;\r\n    // To remove a value, we must search through the array to find\r\n    // it.\r\n    for (var i = 0; i < length; i++) {\r\n      if (this.content[i] != node) continue;\r\n      // When it is found, the process seen in 'pop' is repeated\r\n      // to fill up the hole.\r\n      var end = this.content.pop();\r\n      // If the element we popped was the one we needed to remove,\r\n      // we're done.\r\n      if (i == length - 1) break;\r\n      // Otherwise, we replace the removed element with the popped\r\n      // one, and allow it to float up or sink down as appropriate.\r\n      this.content[i] = end;\r\n      this.bubbleUp(i);\r\n      this.sinkDown(i);\r\n      break;\r\n    }\r\n  },\r\n\r\n  size: function() {\r\n    return this.content.length;\r\n  },\r\n\r\n  bubbleUp: function(n) {\r\n    // Fetch the element that has to be moved.\r\n    var element = this.content[n], score = this.scoreFunction(element);\r\n    // When at 0, an element can not go up any further.\r\n    while (n > 0) {\r\n      // Compute the parent element's index, and fetch it.\r\n      var parentN = Math.floor((n + 1) / 2) - 1,\r\n      parent = this.content[parentN];\r\n      // If the parent has a lesser score, things are in order and we\r\n      // are done.\r\n      if (score >= this.scoreFunction(parent))\r\n        break;\r\n\r\n      // Otherwise, swap the parent with the current element and\r\n      // continue.\r\n      this.content[parentN] = element;\r\n      this.content[n] = parent;\r\n      n = parentN;\r\n    }\r\n  },\r\n\r\n  sinkDown: function(n) {\r\n    // Look up the target element and its score.\r\n    var length = this.content.length,\r\n    element = this.content[n],\r\n    elemScore = this.scoreFunction(element);\r\n\r\n    while(true) {\r\n      // Compute the indices of the child elements.\r\n      var child2N = (n + 1) * 2, child1N = child2N - 1;\r\n      // This is used to store the new position of the element,\r\n      // if any.\r\n      var swap = null;\r\n      // If the first child exists (is inside the array)...\r\n      if (child1N < length) {\r\n        // Look it up and compute its score.\r\n        var child1 = this.content[child1N],\r\n        child1Score = this.scoreFunction(child1);\r\n        // If the score is less than our element's, we need to swap.\r\n        if (child1Score < elemScore)\r\n          swap = child1N;\r\n      }\r\n      // Do the same checks for the other child.\r\n      if (child2N < length) {\r\n        var child2 = this.content[child2N],\r\n        child2Score = this.scoreFunction(child2);\r\n        if (child2Score < (swap == null ? elemScore : child1Score))\r\n          swap = child2N;\r\n      }\r\n\r\n      // No need to swap further, we are done.\r\n      if (swap == null) break;\r\n\r\n      // Otherwise, swap and continue.\r\n      this.content[n] = this.content[swap];\r\n      this.content[swap] = element;\r\n      n = swap;\r\n    }\r\n  }\r\n};\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9aZWFQb3RyZWUvLi9saWJzL290aGVyL0JpbmFyeUhlYXAuanM/MzJjYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFlBQVk7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVxQiIsImZpbGUiOiIuL2xpYnMvb3RoZXIvQmluYXJ5SGVhcC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbioqIEJpbmFyeSBIZWFwIGltcGxlbWVudGF0aW9uIGluIEphdmFzY3JpcHRcclxuKiogRnJvbTogaHR0cDovL2Vsb3F1ZW50amF2YXNjcmlwdC5uZXQvMXN0X2VkaXRpb24vYXBwZW5kaXgyLmh0bWx0XHJcbioqXHJcbioqIENvcHlyaWdodCAoYykgMjAwNyBNYXJpam4gSGF2ZXJiZWtlLCBsYXN0IG1vZGlmaWVkIG9uIE5vdmVtYmVyIDI4IDIwMTMuXHJcbioqXHJcbioqIExpY2Vuc2VkIHVuZGVyIGEgQ3JlYXRpdmUgQ29tbW9ucyBhdHRyaWJ1dGlvbi1ub25jb21tZXJjaWFsIGxpY2Vuc2UuIFxyXG4qKiBBbGwgY29kZSBpbiB0aGlzIGJvb2sgbWF5IGFsc28gYmUgY29uc2lkZXJlZCBsaWNlbnNlZCB1bmRlciBhbiBNSVQgbGljZW5zZS5cclxuKi9cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gQmluYXJ5SGVhcChzY29yZUZ1bmN0aW9uKXtcclxuICB0aGlzLmNvbnRlbnQgPSBbXTtcclxuICB0aGlzLnNjb3JlRnVuY3Rpb24gPSBzY29yZUZ1bmN0aW9uO1xyXG59XHJcblxyXG5CaW5hcnlIZWFwLnByb3RvdHlwZSA9IHtcclxuICBwdXNoOiBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAvLyBBZGQgdGhlIG5ldyBlbGVtZW50IHRvIHRoZSBlbmQgb2YgdGhlIGFycmF5LlxyXG4gICAgdGhpcy5jb250ZW50LnB1c2goZWxlbWVudCk7XHJcbiAgICAvLyBBbGxvdyBpdCB0byBidWJibGUgdXAuXHJcbiAgICB0aGlzLmJ1YmJsZVVwKHRoaXMuY29udGVudC5sZW5ndGggLSAxKTtcclxuICB9LFxyXG5cclxuICBwb3A6IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gU3RvcmUgdGhlIGZpcnN0IGVsZW1lbnQgc28gd2UgY2FuIHJldHVybiBpdCBsYXRlci5cclxuICAgIHZhciByZXN1bHQgPSB0aGlzLmNvbnRlbnRbMF07XHJcbiAgICAvLyBHZXQgdGhlIGVsZW1lbnQgYXQgdGhlIGVuZCBvZiB0aGUgYXJyYXkuXHJcbiAgICB2YXIgZW5kID0gdGhpcy5jb250ZW50LnBvcCgpO1xyXG4gICAgLy8gSWYgdGhlcmUgYXJlIGFueSBlbGVtZW50cyBsZWZ0LCBwdXQgdGhlIGVuZCBlbGVtZW50IGF0IHRoZVxyXG4gICAgLy8gc3RhcnQsIGFuZCBsZXQgaXQgc2luayBkb3duLlxyXG4gICAgaWYgKHRoaXMuY29udGVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHRoaXMuY29udGVudFswXSA9IGVuZDtcclxuICAgICAgdGhpcy5zaW5rRG93bigwKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfSxcclxuXHJcbiAgcmVtb3ZlOiBmdW5jdGlvbihub2RlKSB7XHJcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5jb250ZW50Lmxlbmd0aDtcclxuICAgIC8vIFRvIHJlbW92ZSBhIHZhbHVlLCB3ZSBtdXN0IHNlYXJjaCB0aHJvdWdoIHRoZSBhcnJheSB0byBmaW5kXHJcbiAgICAvLyBpdC5cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKHRoaXMuY29udGVudFtpXSAhPSBub2RlKSBjb250aW51ZTtcclxuICAgICAgLy8gV2hlbiBpdCBpcyBmb3VuZCwgdGhlIHByb2Nlc3Mgc2VlbiBpbiAncG9wJyBpcyByZXBlYXRlZFxyXG4gICAgICAvLyB0byBmaWxsIHVwIHRoZSBob2xlLlxyXG4gICAgICB2YXIgZW5kID0gdGhpcy5jb250ZW50LnBvcCgpO1xyXG4gICAgICAvLyBJZiB0aGUgZWxlbWVudCB3ZSBwb3BwZWQgd2FzIHRoZSBvbmUgd2UgbmVlZGVkIHRvIHJlbW92ZSxcclxuICAgICAgLy8gd2UncmUgZG9uZS5cclxuICAgICAgaWYgKGkgPT0gbGVuZ3RoIC0gMSkgYnJlYWs7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgd2UgcmVwbGFjZSB0aGUgcmVtb3ZlZCBlbGVtZW50IHdpdGggdGhlIHBvcHBlZFxyXG4gICAgICAvLyBvbmUsIGFuZCBhbGxvdyBpdCB0byBmbG9hdCB1cCBvciBzaW5rIGRvd24gYXMgYXBwcm9wcmlhdGUuXHJcbiAgICAgIHRoaXMuY29udGVudFtpXSA9IGVuZDtcclxuICAgICAgdGhpcy5idWJibGVVcChpKTtcclxuICAgICAgdGhpcy5zaW5rRG93bihpKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgc2l6ZTogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250ZW50Lmxlbmd0aDtcclxuICB9LFxyXG5cclxuICBidWJibGVVcDogZnVuY3Rpb24obikge1xyXG4gICAgLy8gRmV0Y2ggdGhlIGVsZW1lbnQgdGhhdCBoYXMgdG8gYmUgbW92ZWQuXHJcbiAgICB2YXIgZWxlbWVudCA9IHRoaXMuY29udGVudFtuXSwgc2NvcmUgPSB0aGlzLnNjb3JlRnVuY3Rpb24oZWxlbWVudCk7XHJcbiAgICAvLyBXaGVuIGF0IDAsIGFuIGVsZW1lbnQgY2FuIG5vdCBnbyB1cCBhbnkgZnVydGhlci5cclxuICAgIHdoaWxlIChuID4gMCkge1xyXG4gICAgICAvLyBDb21wdXRlIHRoZSBwYXJlbnQgZWxlbWVudCdzIGluZGV4LCBhbmQgZmV0Y2ggaXQuXHJcbiAgICAgIHZhciBwYXJlbnROID0gTWF0aC5mbG9vcigobiArIDEpIC8gMikgLSAxLFxyXG4gICAgICBwYXJlbnQgPSB0aGlzLmNvbnRlbnRbcGFyZW50Tl07XHJcbiAgICAgIC8vIElmIHRoZSBwYXJlbnQgaGFzIGEgbGVzc2VyIHNjb3JlLCB0aGluZ3MgYXJlIGluIG9yZGVyIGFuZCB3ZVxyXG4gICAgICAvLyBhcmUgZG9uZS5cclxuICAgICAgaWYgKHNjb3JlID49IHRoaXMuc2NvcmVGdW5jdGlvbihwYXJlbnQpKVxyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgLy8gT3RoZXJ3aXNlLCBzd2FwIHRoZSBwYXJlbnQgd2l0aCB0aGUgY3VycmVudCBlbGVtZW50IGFuZFxyXG4gICAgICAvLyBjb250aW51ZS5cclxuICAgICAgdGhpcy5jb250ZW50W3BhcmVudE5dID0gZWxlbWVudDtcclxuICAgICAgdGhpcy5jb250ZW50W25dID0gcGFyZW50O1xyXG4gICAgICBuID0gcGFyZW50TjtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBzaW5rRG93bjogZnVuY3Rpb24obikge1xyXG4gICAgLy8gTG9vayB1cCB0aGUgdGFyZ2V0IGVsZW1lbnQgYW5kIGl0cyBzY29yZS5cclxuICAgIHZhciBsZW5ndGggPSB0aGlzLmNvbnRlbnQubGVuZ3RoLFxyXG4gICAgZWxlbWVudCA9IHRoaXMuY29udGVudFtuXSxcclxuICAgIGVsZW1TY29yZSA9IHRoaXMuc2NvcmVGdW5jdGlvbihlbGVtZW50KTtcclxuXHJcbiAgICB3aGlsZSh0cnVlKSB7XHJcbiAgICAgIC8vIENvbXB1dGUgdGhlIGluZGljZXMgb2YgdGhlIGNoaWxkIGVsZW1lbnRzLlxyXG4gICAgICB2YXIgY2hpbGQyTiA9IChuICsgMSkgKiAyLCBjaGlsZDFOID0gY2hpbGQyTiAtIDE7XHJcbiAgICAgIC8vIFRoaXMgaXMgdXNlZCB0byBzdG9yZSB0aGUgbmV3IHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50LFxyXG4gICAgICAvLyBpZiBhbnkuXHJcbiAgICAgIHZhciBzd2FwID0gbnVsbDtcclxuICAgICAgLy8gSWYgdGhlIGZpcnN0IGNoaWxkIGV4aXN0cyAoaXMgaW5zaWRlIHRoZSBhcnJheSkuLi5cclxuICAgICAgaWYgKGNoaWxkMU4gPCBsZW5ndGgpIHtcclxuICAgICAgICAvLyBMb29rIGl0IHVwIGFuZCBjb21wdXRlIGl0cyBzY29yZS5cclxuICAgICAgICB2YXIgY2hpbGQxID0gdGhpcy5jb250ZW50W2NoaWxkMU5dLFxyXG4gICAgICAgIGNoaWxkMVNjb3JlID0gdGhpcy5zY29yZUZ1bmN0aW9uKGNoaWxkMSk7XHJcbiAgICAgICAgLy8gSWYgdGhlIHNjb3JlIGlzIGxlc3MgdGhhbiBvdXIgZWxlbWVudCdzLCB3ZSBuZWVkIHRvIHN3YXAuXHJcbiAgICAgICAgaWYgKGNoaWxkMVNjb3JlIDwgZWxlbVNjb3JlKVxyXG4gICAgICAgICAgc3dhcCA9IGNoaWxkMU47XHJcbiAgICAgIH1cclxuICAgICAgLy8gRG8gdGhlIHNhbWUgY2hlY2tzIGZvciB0aGUgb3RoZXIgY2hpbGQuXHJcbiAgICAgIGlmIChjaGlsZDJOIDwgbGVuZ3RoKSB7XHJcbiAgICAgICAgdmFyIGNoaWxkMiA9IHRoaXMuY29udGVudFtjaGlsZDJOXSxcclxuICAgICAgICBjaGlsZDJTY29yZSA9IHRoaXMuc2NvcmVGdW5jdGlvbihjaGlsZDIpO1xyXG4gICAgICAgIGlmIChjaGlsZDJTY29yZSA8IChzd2FwID09IG51bGwgPyBlbGVtU2NvcmUgOiBjaGlsZDFTY29yZSkpXHJcbiAgICAgICAgICBzd2FwID0gY2hpbGQyTjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gTm8gbmVlZCB0byBzd2FwIGZ1cnRoZXIsIHdlIGFyZSBkb25lLlxyXG4gICAgICBpZiAoc3dhcCA9PSBudWxsKSBicmVhaztcclxuXHJcbiAgICAgIC8vIE90aGVyd2lzZSwgc3dhcCBhbmQgY29udGludWUuXHJcbiAgICAgIHRoaXMuY29udGVudFtuXSA9IHRoaXMuY29udGVudFtzd2FwXTtcclxuICAgICAgdGhpcy5jb250ZW50W3N3YXBdID0gZWxlbWVudDtcclxuICAgICAgbiA9IHN3YXA7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IHsgQmluYXJ5SGVhcCB9XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./libs/other/BinaryHeap.js\n");

/***/ }),

/***/ "./node_modules/worker-loader/dist/cjs.js?inline!./src/workers/BinaryDecoderWorker.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/worker-loader/dist/cjs.js?inline!./src/workers/BinaryDecoderWorker.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = function() {\n  return __webpack_require__(/*! !./node_modules/worker-loader/dist/workers/InlineWorker.js */ \"./node_modules/worker-loader/dist/workers/InlineWorker.js\")(\"/******/ (function(modules) { // webpackBootstrap\\n/******/ \\t// The module cache\\n/******/ \\tvar installedModules = {};\\n/******/\\n/******/ \\t// The require function\\n/******/ \\tfunction __webpack_require__(moduleId) {\\n/******/\\n/******/ \\t\\t// Check if module is in cache\\n/******/ \\t\\tif(installedModules[moduleId]) {\\n/******/ \\t\\t\\treturn installedModules[moduleId].exports;\\n/******/ \\t\\t}\\n/******/ \\t\\t// Create a new module (and put it into the cache)\\n/******/ \\t\\tvar module = installedModules[moduleId] = {\\n/******/ \\t\\t\\ti: moduleId,\\n/******/ \\t\\t\\tl: false,\\n/******/ \\t\\t\\texports: {}\\n/******/ \\t\\t};\\n/******/\\n/******/ \\t\\t// Execute the module function\\n/******/ \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n/******/\\n/******/ \\t\\t// Flag the module as loaded\\n/******/ \\t\\tmodule.l = true;\\n/******/\\n/******/ \\t\\t// Return the exports of the module\\n/******/ \\t\\treturn module.exports;\\n/******/ \\t}\\n/******/\\n/******/\\n/******/ \\t// expose the modules object (__webpack_modules__)\\n/******/ \\t__webpack_require__.m = modules;\\n/******/\\n/******/ \\t// expose the module cache\\n/******/ \\t__webpack_require__.c = installedModules;\\n/******/\\n/******/ \\t// define getter function for harmony exports\\n/******/ \\t__webpack_require__.d = function(exports, name, getter) {\\n/******/ \\t\\tif(!__webpack_require__.o(exports, name)) {\\n/******/ \\t\\t\\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\\n/******/ \\t\\t}\\n/******/ \\t};\\n/******/\\n/******/ \\t// define __esModule on exports\\n/******/ \\t__webpack_require__.r = function(exports) {\\n/******/ \\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n/******/ \\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n/******/ \\t\\t}\\n/******/ \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n/******/ \\t};\\n/******/\\n/******/ \\t// create a fake namespace object\\n/******/ \\t// mode & 1: value is a module id, require it\\n/******/ \\t// mode & 2: merge all properties of value into the ns\\n/******/ \\t// mode & 4: return value when already ns object\\n/******/ \\t// mode & 8|1: behave like require\\n/******/ \\t__webpack_require__.t = function(value, mode) {\\n/******/ \\t\\tif(mode & 1) value = __webpack_require__(value);\\n/******/ \\t\\tif(mode & 8) return value;\\n/******/ \\t\\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\\n/******/ \\t\\tvar ns = Object.create(null);\\n/******/ \\t\\t__webpack_require__.r(ns);\\n/******/ \\t\\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\\n/******/ \\t\\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\\n/******/ \\t\\treturn ns;\\n/******/ \\t};\\n/******/\\n/******/ \\t// getDefaultExport function for compatibility with non-harmony modules\\n/******/ \\t__webpack_require__.n = function(module) {\\n/******/ \\t\\tvar getter = module && module.__esModule ?\\n/******/ \\t\\t\\tfunction getDefault() { return module['default']; } :\\n/******/ \\t\\t\\tfunction getModuleExports() { return module; };\\n/******/ \\t\\t__webpack_require__.d(getter, 'a', getter);\\n/******/ \\t\\treturn getter;\\n/******/ \\t};\\n/******/\\n/******/ \\t// Object.prototype.hasOwnProperty.call\\n/******/ \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n/******/\\n/******/ \\t// __webpack_public_path__\\n/******/ \\t__webpack_require__.p = \\\"\\\";\\n/******/\\n/******/\\n/******/ \\t// Load entry module and return exports\\n/******/ \\treturn __webpack_require__(__webpack_require__.s = \\\"./src/workers/BinaryDecoderWorker.js\\\");\\n/******/ })\\n/************************************************************************/\\n/******/ ({\\n\\n/***/ \\\"./src/InterleavedBuffer.js\\\":\\n/*!**********************************!*\\\\\\n  !*** ./src/InterleavedBuffer.js ***!\\n  \\\\**********************************/\\n/*! exports provided: InterleavedBufferAttribute, InterleavedBuffer */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"InterleavedBufferAttribute\\\\\\\", function() { return InterleavedBufferAttribute; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"InterleavedBuffer\\\\\\\", function() { return InterleavedBuffer; });\\\\n\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nclass InterleavedBufferAttribute{\\\\r\\\\n\\\\t\\\\r\\\\n\\\\tconstructor(name, bytes, numElements, type, normalized){\\\\r\\\\n\\\\t\\\\tthis.name = name;\\\\r\\\\n\\\\t\\\\tthis.bytes = bytes;\\\\r\\\\n\\\\t\\\\tthis.numElements = numElements;\\\\r\\\\n\\\\t\\\\tthis.normalized = normalized;\\\\r\\\\n\\\\t\\\\tthis.type = type; // gl type without prefix, e.g. \\\\\\\"FLOAT\\\\\\\", \\\\\\\"UNSIGNED_INT\\\\\\\"\\\\r\\\\n\\\\t}\\\\r\\\\n\\\\t\\\\r\\\\n};\\\\r\\\\n\\\\r\\\\nclass InterleavedBuffer{\\\\r\\\\n\\\\r\\\\n\\\\tconstructor(data, attributes, numElements){\\\\r\\\\n\\\\t\\\\tthis.data = data;\\\\r\\\\n\\\\t\\\\tthis.attributes = attributes;\\\\r\\\\n\\\\t\\\\tthis.stride = attributes.reduce( (a, att) => a + att.bytes, 0);\\\\r\\\\n\\\\t\\\\tthis.stride = Math.ceil(this.stride / 4) * 4;\\\\r\\\\n\\\\t\\\\tthis.numElements = numElements;\\\\r\\\\n\\\\t}\\\\r\\\\n\\\\t\\\\r\\\\n\\\\toffset(name){\\\\r\\\\n\\\\t\\\\tlet offset = 0;\\\\r\\\\n\\\\t\\\\t\\\\r\\\\n\\\\t\\\\tfor(let att of this.attributes){\\\\r\\\\n\\\\t\\\\t\\\\tif(att.name === name){\\\\r\\\\n\\\\t\\\\t\\\\t\\\\treturn offset;\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t\\\\t\\\\r\\\\n\\\\t\\\\t\\\\toffset += att.bytes;\\\\r\\\\n\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t\\\\r\\\\n\\\\t\\\\treturn null;\\\\r\\\\n\\\\t}\\\\r\\\\n\\\\t\\\\r\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9aZWFQb3RyZWUvLi9zcmMvSW50ZXJsZWF2ZWRCdWZmZXIuanM/NWVmZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFHTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25COztBQUVBOztBQUVPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vc3JjL0ludGVybGVhdmVkQnVmZmVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRle1xyXG5cdFxyXG5cdGNvbnN0cnVjdG9yKG5hbWUsIGJ5dGVzLCBudW1FbGVtZW50cywgdHlwZSwgbm9ybWFsaXplZCl7XHJcblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xyXG5cdFx0dGhpcy5ieXRlcyA9IGJ5dGVzO1xyXG5cdFx0dGhpcy5udW1FbGVtZW50cyA9IG51bUVsZW1lbnRzO1xyXG5cdFx0dGhpcy5ub3JtYWxpemVkID0gbm9ybWFsaXplZDtcclxuXHRcdHRoaXMudHlwZSA9IHR5cGU7IC8vIGdsIHR5cGUgd2l0aG91dCBwcmVmaXgsIGUuZy4gXCJGTE9BVFwiLCBcIlVOU0lHTkVEX0lOVFwiXHJcblx0fVxyXG5cdFxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIEludGVybGVhdmVkQnVmZmVye1xyXG5cclxuXHRjb25zdHJ1Y3RvcihkYXRhLCBhdHRyaWJ1dGVzLCBudW1FbGVtZW50cyl7XHJcblx0XHR0aGlzLmRhdGEgPSBkYXRhO1xyXG5cdFx0dGhpcy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcclxuXHRcdHRoaXMuc3RyaWRlID0gYXR0cmlidXRlcy5yZWR1Y2UoIChhLCBhdHQpID0+IGEgKyBhdHQuYnl0ZXMsIDApO1xyXG5cdFx0dGhpcy5zdHJpZGUgPSBNYXRoLmNlaWwodGhpcy5zdHJpZGUgLyA0KSAqIDQ7XHJcblx0XHR0aGlzLm51bUVsZW1lbnRzID0gbnVtRWxlbWVudHM7XHJcblx0fVxyXG5cdFxyXG5cdG9mZnNldChuYW1lKXtcclxuXHRcdGxldCBvZmZzZXQgPSAwO1xyXG5cdFx0XHJcblx0XHRmb3IobGV0IGF0dCBvZiB0aGlzLmF0dHJpYnV0ZXMpe1xyXG5cdFx0XHRpZihhdHQubmFtZSA9PT0gbmFtZSl7XHJcblx0XHRcdFx0cmV0dXJuIG9mZnNldDtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0b2Zmc2V0ICs9IGF0dC5ieXRlcztcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0cmV0dXJuIG51bGw7XHJcblx0fVxyXG5cdFxyXG59OyJdLCJzb3VyY2VSb290IjoiIn0=\\\\n//# sourceURL=webpack-internal:///./src/InterleavedBuffer.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./src/Version.js\\\":\\n/*!************************!*\\\\\\n  !*** ./src/Version.js ***!\\n  \\\\************************/\\n/*! exports provided: Version */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"Version\\\\\\\", function() { return Version; });\\\\n\\\\r\\\\nclass Version{\\\\r\\\\n\\\\r\\\\n\\\\tconstructor(version){\\\\r\\\\n\\\\t\\\\tthis.version = version;\\\\r\\\\n\\\\t\\\\tlet vmLength = (version.indexOf('.') === -1) ? version.length : version.indexOf('.');\\\\r\\\\n\\\\t\\\\tthis.versionMajor = parseInt(version.substr(0, vmLength));\\\\r\\\\n\\\\t\\\\tthis.versionMinor = parseInt(version.substr(vmLength + 1));\\\\r\\\\n\\\\t\\\\tif (this.versionMinor.length === 0) {\\\\r\\\\n\\\\t\\\\t\\\\tthis.versionMinor = 0;\\\\r\\\\n\\\\t\\\\t}\\\\r\\\\n\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\tnewerThan(version){\\\\r\\\\n\\\\t\\\\tlet v = new Version(version);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tif (this.versionMajor > v.versionMajor) {\\\\r\\\\n\\\\t\\\\t\\\\treturn true;\\\\r\\\\n\\\\t\\\\t} else if (this.versionMajor === v.versionMajor && this.versionMinor > v.versionMinor) {\\\\r\\\\n\\\\t\\\\t\\\\treturn true;\\\\r\\\\n\\\\t\\\\t} else {\\\\r\\\\n\\\\t\\\\t\\\\treturn false;\\\\r\\\\n\\\\t\\\\t}\\\\r\\\\n\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\tequalOrHigher(version){\\\\r\\\\n\\\\t\\\\tlet v = new Version(version);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tif (this.versionMajor > v.versionMajor) {\\\\r\\\\n\\\\t\\\\t\\\\treturn true;\\\\r\\\\n\\\\t\\\\t} else if (this.versionMajor === v.versionMajor && this.versionMinor >= v.versionMinor) {\\\\r\\\\n\\\\t\\\\t\\\\treturn true;\\\\r\\\\n\\\\t\\\\t} else {\\\\r\\\\n\\\\t\\\\t\\\\treturn false;\\\\r\\\\n\\\\t\\\\t}\\\\r\\\\n\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\tupTo(version){\\\\r\\\\n\\\\t\\\\treturn !this.newerThan(version);\\\\r\\\\n\\\\t}\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9aZWFQb3RyZWUvLi9zcmMvVmVyc2lvbi5qcz9kMzY3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vc3JjL1ZlcnNpb24uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuZXhwb3J0IGNsYXNzIFZlcnNpb257XHJcblxyXG5cdGNvbnN0cnVjdG9yKHZlcnNpb24pe1xyXG5cdFx0dGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcclxuXHRcdGxldCB2bUxlbmd0aCA9ICh2ZXJzaW9uLmluZGV4T2YoJy4nKSA9PT0gLTEpID8gdmVyc2lvbi5sZW5ndGggOiB2ZXJzaW9uLmluZGV4T2YoJy4nKTtcclxuXHRcdHRoaXMudmVyc2lvbk1ham9yID0gcGFyc2VJbnQodmVyc2lvbi5zdWJzdHIoMCwgdm1MZW5ndGgpKTtcclxuXHRcdHRoaXMudmVyc2lvbk1pbm9yID0gcGFyc2VJbnQodmVyc2lvbi5zdWJzdHIodm1MZW5ndGggKyAxKSk7XHJcblx0XHRpZiAodGhpcy52ZXJzaW9uTWlub3IubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdHRoaXMudmVyc2lvbk1pbm9yID0gMDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdG5ld2VyVGhhbih2ZXJzaW9uKXtcclxuXHRcdGxldCB2ID0gbmV3IFZlcnNpb24odmVyc2lvbik7XHJcblxyXG5cdFx0aWYgKHRoaXMudmVyc2lvbk1ham9yID4gdi52ZXJzaW9uTWFqb3IpIHtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9IGVsc2UgaWYgKHRoaXMudmVyc2lvbk1ham9yID09PSB2LnZlcnNpb25NYWpvciAmJiB0aGlzLnZlcnNpb25NaW5vciA+IHYudmVyc2lvbk1pbm9yKSB7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZXF1YWxPckhpZ2hlcih2ZXJzaW9uKXtcclxuXHRcdGxldCB2ID0gbmV3IFZlcnNpb24odmVyc2lvbik7XHJcblxyXG5cdFx0aWYgKHRoaXMudmVyc2lvbk1ham9yID4gdi52ZXJzaW9uTWFqb3IpIHtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9IGVsc2UgaWYgKHRoaXMudmVyc2lvbk1ham9yID09PSB2LnZlcnNpb25NYWpvciAmJiB0aGlzLnZlcnNpb25NaW5vciA+PSB2LnZlcnNpb25NaW5vcikge1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHVwVG8odmVyc2lvbil7XHJcblx0XHRyZXR1cm4gIXRoaXMubmV3ZXJUaGFuKHZlcnNpb24pO1xyXG5cdH1cclxuXHJcbn1cclxuXHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9\\\\n//# sourceURL=webpack-internal:///./src/Version.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./src/loader/PointAttributes.js\\\":\\n/*!***************************************!*\\\\\\n  !*** ./src/loader/PointAttributes.js ***!\\n  \\\\***************************************/\\n/*! exports provided: PointAttributeNames, PointAttributeTypes, PointAttribute, PointAttributes */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"PointAttributeNames\\\\\\\", function() { return PointAttributeNames; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"PointAttributeTypes\\\\\\\", function() { return PointAttributeTypes; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"PointAttribute\\\\\\\", function() { return PointAttribute; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"PointAttributes\\\\\\\", function() { return PointAttributes; });\\\\n\\\\r\\\\n\\\\r\\\\nconst PointAttributeNames = {\\\\r\\\\n\\\\tPOSITION_CARTESIAN: 0, // float x, y, z;\\\\r\\\\n\\\\tCOLOR_PACKED: 1, // byte r, g, b, a; \\\\tI: [0,1]\\\\r\\\\n\\\\tCOLOR_FLOATS_1: 2, // float r, g, b; \\\\tI: [0,1]\\\\r\\\\n\\\\tCOLOR_FLOATS_255: 3, // float r, g, b; \\\\tI: [0,255]\\\\r\\\\n\\\\tNORMAL_FLOATS: 4, // float x, y, z;\\\\r\\\\n\\\\tFILLER: 5,\\\\r\\\\n\\\\tINTENSITY: 6,\\\\r\\\\n\\\\tCLASSIFICATION: 7,\\\\r\\\\n\\\\tNORMAL_SPHEREMAPPED: 8,\\\\r\\\\n\\\\tNORMAL_OCT16: 9,\\\\r\\\\n\\\\tNORMAL: 10,\\\\r\\\\n\\\\tRETURN_NUMBER: 11,\\\\r\\\\n\\\\tNUMBER_OF_RETURNS: 12,\\\\r\\\\n\\\\tSOURCE_ID: 13,\\\\r\\\\n\\\\tINDICES: 14,\\\\r\\\\n\\\\tSPACING: 15,\\\\r\\\\n\\\\tGPS_TIME: 16,\\\\r\\\\n};\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n * Some types of possible point attribute data formats\\\\r\\\\n *\\\\r\\\\n * @class\\\\r\\\\n */\\\\r\\\\nconst PointAttributeTypes = {\\\\r\\\\n\\\\tDATA_TYPE_DOUBLE: {ordinal: 0, size: 8},\\\\r\\\\n\\\\tDATA_TYPE_FLOAT: {ordinal: 1, size: 4},\\\\r\\\\n\\\\tDATA_TYPE_INT8: {ordinal: 2, size: 1},\\\\r\\\\n\\\\tDATA_TYPE_UINT8: {ordinal: 3, size: 1},\\\\r\\\\n\\\\tDATA_TYPE_INT16: {ordinal: 4, size: 2},\\\\r\\\\n\\\\tDATA_TYPE_UINT16: {ordinal: 5, size: 2},\\\\r\\\\n\\\\tDATA_TYPE_INT32: {ordinal: 6, size: 4},\\\\r\\\\n\\\\tDATA_TYPE_UINT32: {ordinal: 7, size: 4},\\\\r\\\\n\\\\tDATA_TYPE_INT64: {ordinal: 8, size: 8},\\\\r\\\\n\\\\tDATA_TYPE_UINT64: {ordinal: 9, size: 8}\\\\r\\\\n};\\\\r\\\\n\\\\r\\\\nlet i = 0;\\\\r\\\\nfor (let obj in PointAttributeTypes) {\\\\r\\\\n\\\\tPointAttributeTypes[i] = PointAttributeTypes[obj];\\\\r\\\\n\\\\ti++;\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nclass PointAttribute{\\\\r\\\\n\\\\t\\\\r\\\\n\\\\tconstructor(name, type, numElements){\\\\r\\\\n\\\\t\\\\tthis.name = name;\\\\r\\\\n\\\\t\\\\tthis.type = type;\\\\r\\\\n\\\\t\\\\tthis.numElements = numElements;\\\\r\\\\n\\\\t\\\\tthis.byteSize = this.numElements * this.type.size;\\\\r\\\\n\\\\t}\\\\r\\\\n\\\\r\\\\n};\\\\r\\\\n\\\\r\\\\nPointAttribute.POSITION_CARTESIAN = new PointAttribute(\\\\r\\\\n\\\\tPointAttributeNames.POSITION_CARTESIAN,\\\\r\\\\n\\\\tPointAttributeTypes.DATA_TYPE_FLOAT, 3);\\\\r\\\\n\\\\r\\\\nPointAttribute.RGBA_PACKED = new PointAttribute(\\\\r\\\\n\\\\tPointAttributeNames.COLOR_PACKED,\\\\r\\\\n\\\\tPointAttributeTypes.DATA_TYPE_INT8, 4);\\\\r\\\\n\\\\r\\\\nPointAttribute.COLOR_PACKED = PointAttribute.RGBA_PACKED;\\\\r\\\\n\\\\r\\\\nPointAttribute.RGB_PACKED = new PointAttribute(\\\\r\\\\n\\\\tPointAttributeNames.COLOR_PACKED,\\\\r\\\\n\\\\tPointAttributeTypes.DATA_TYPE_INT8, 3);\\\\r\\\\n\\\\r\\\\nPointAttribute.NORMAL_FLOATS = new PointAttribute(\\\\r\\\\n\\\\tPointAttributeNames.NORMAL_FLOATS,\\\\r\\\\n\\\\tPointAttributeTypes.DATA_TYPE_FLOAT, 3);\\\\r\\\\n\\\\r\\\\nPointAttribute.FILLER_1B = new PointAttribute(\\\\r\\\\n\\\\tPointAttributeNames.FILLER,\\\\r\\\\n\\\\tPointAttributeTypes.DATA_TYPE_UINT8, 1);\\\\r\\\\n\\\\r\\\\nPointAttribute.INTENSITY = new PointAttribute(\\\\r\\\\n\\\\tPointAttributeNames.INTENSITY,\\\\r\\\\n\\\\tPointAttributeTypes.DATA_TYPE_UINT16, 1);\\\\r\\\\n\\\\r\\\\nPointAttribute.CLASSIFICATION = new PointAttribute(\\\\r\\\\n\\\\tPointAttributeNames.CLASSIFICATION,\\\\r\\\\n\\\\tPointAttributeTypes.DATA_TYPE_UINT8, 1);\\\\r\\\\n\\\\r\\\\nPointAttribute.NORMAL_SPHEREMAPPED = new PointAttribute(\\\\r\\\\n\\\\tPointAttributeNames.NORMAL_SPHEREMAPPED,\\\\r\\\\n\\\\tPointAttributeTypes.DATA_TYPE_UINT8, 2);\\\\r\\\\n\\\\r\\\\nPointAttribute.NORMAL_OCT16 = new PointAttribute(\\\\r\\\\n\\\\tPointAttributeNames.NORMAL_OCT16,\\\\r\\\\n\\\\tPointAttributeTypes.DATA_TYPE_UINT8, 2);\\\\r\\\\n\\\\r\\\\nPointAttribute.NORMAL = new PointAttribute(\\\\r\\\\n\\\\tPointAttributeNames.NORMAL,\\\\r\\\\n\\\\tPointAttributeTypes.DATA_TYPE_FLOAT, 3);\\\\r\\\\n\\\\t\\\\r\\\\nPointAttribute.RETURN_NUMBER = new PointAttribute(\\\\r\\\\n\\\\tPointAttributeNames.RETURN_NUMBER,\\\\r\\\\n\\\\tPointAttributeTypes.DATA_TYPE_UINT8, 1);\\\\r\\\\n\\\\t\\\\r\\\\nPointAttribute.NUMBER_OF_RETURNS = new PointAttribute(\\\\r\\\\n\\\\tPointAttributeNames.NUMBER_OF_RETURNS,\\\\r\\\\n\\\\tPointAttributeTypes.DATA_TYPE_UINT8, 1);\\\\r\\\\n\\\\t\\\\r\\\\nPointAttribute.SOURCE_ID = new PointAttribute(\\\\r\\\\n\\\\tPointAttributeNames.SOURCE_ID,\\\\r\\\\n\\\\tPointAttributeTypes.DATA_TYPE_UINT16, 1);\\\\r\\\\n\\\\r\\\\nPointAttribute.INDICES = new PointAttribute(\\\\r\\\\n\\\\tPointAttributeNames.INDICES,\\\\r\\\\n\\\\tPointAttributeTypes.DATA_TYPE_UINT32, 1);\\\\r\\\\n\\\\r\\\\nPointAttribute.SPACING = new PointAttribute(\\\\r\\\\n\\\\tPointAttributeNames.SPACING,\\\\r\\\\n\\\\tPointAttributeTypes.DATA_TYPE_FLOAT, 1);\\\\r\\\\n\\\\r\\\\nPointAttribute.GPS_TIME = new PointAttribute(\\\\r\\\\n\\\\tPointAttributeNames.GPS_TIME,\\\\r\\\\n\\\\tPointAttributeTypes.DATA_TYPE_DOUBLE, 1);\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nclass PointAttributes{\\\\r\\\\n\\\\r\\\\n\\\\tconstructor(pointAttributes){\\\\r\\\\n\\\\t\\\\tthis.attributes = [];\\\\r\\\\n\\\\t\\\\tthis.byteSize = 0;\\\\r\\\\n\\\\t\\\\tthis.size = 0;\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tif (pointAttributes != null) {\\\\r\\\\n\\\\t\\\\t\\\\tfor (let i = 0; i < pointAttributes.length; i++) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet pointAttributeName = pointAttributes[i];\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet pointAttribute = PointAttribute[pointAttributeName];\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tthis.attributes.push(pointAttribute);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tthis.byteSize += pointAttribute.byteSize;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tthis.size++;\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t}\\\\r\\\\n\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\\tadd(pointAttribute){\\\\r\\\\n\\\\t\\\\tthis.attributes.push(pointAttribute);\\\\r\\\\n\\\\t\\\\tthis.byteSize += pointAttribute.byteSize;\\\\r\\\\n\\\\t\\\\tthis.size++;\\\\r\\\\n\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\thasColors(){\\\\r\\\\n\\\\t\\\\tfor (let name in this.attributes) {\\\\r\\\\n\\\\t\\\\t\\\\tlet pointAttribute = this.attributes[name];\\\\r\\\\n\\\\t\\\\t\\\\tif (pointAttribute.name === PointAttributeNames.COLOR_PACKED) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\treturn true;\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\treturn false;\\\\r\\\\n\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\thasNormals(){\\\\r\\\\n\\\\t\\\\tfor (let name in this.attributes) {\\\\r\\\\n\\\\t\\\\t\\\\tlet pointAttribute = this.attributes[name];\\\\r\\\\n\\\\t\\\\t\\\\tif (\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tpointAttribute === PointAttribute.NORMAL_SPHEREMAPPED ||\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tpointAttribute === PointAttribute.NORMAL_FLOATS ||\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tpointAttribute === PointAttribute.NORMAL ||\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tpointAttribute === PointAttribute.NORMAL_OCT16) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\treturn true;\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\treturn false;\\\\r\\\\n\\\\t};\\\\r\\\\n\\\\r\\\\n}\\\\r\\\\n//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./src/loader/PointAttributes.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./src/utils/toInterleavedBufferAttribute.js\\\":\\n/*!***************************************************!*\\\\\\n  !*** ./src/utils/toInterleavedBufferAttribute.js ***!\\n  \\\\***************************************************/\\n/*! exports provided: toInterleavedBufferAttribute */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"toInterleavedBufferAttribute\\\\\\\", function() { return toInterleavedBufferAttribute; });\\\\n/* harmony import */ var _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../loader/PointAttributes.js */ \\\\\\\"./src/loader/PointAttributes.js\\\\\\\");\\\\n\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nfunction toInterleavedBufferAttribute(pointAttribute){\\\\r\\\\n\\\\tlet att = null;\\\\r\\\\n\\\\t\\\\r\\\\n\\\\tif (pointAttribute.name === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"PointAttribute\\\\\\\"].POSITION_CARTESIAN.name) {\\\\r\\\\n\\\\t\\\\tatt = new Potree.InterleavedBufferAttribute(\\\\\\\"position\\\\\\\", 12, 3, \\\\\\\"FLOAT\\\\\\\", false);\\\\r\\\\n\\\\t} else if (pointAttribute.name === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"PointAttribute\\\\\\\"].COLOR_PACKED.name) {\\\\r\\\\n\\\\t\\\\tatt = new Potree.InterleavedBufferAttribute(\\\\\\\"color\\\\\\\", 4, 4, \\\\\\\"UNSIGNED_BYTE\\\\\\\", true);\\\\r\\\\n\\\\t} else if (pointAttribute.name === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"PointAttribute\\\\\\\"].INTENSITY.name) {\\\\r\\\\n\\\\t\\\\tatt = new Potree.InterleavedBufferAttribute(\\\\\\\"intensity\\\\\\\", 4, 1, \\\\\\\"FLOAT\\\\\\\", false);\\\\r\\\\n\\\\t} else if (pointAttribute.name === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"PointAttribute\\\\\\\"].CLASSIFICATION.name) {\\\\r\\\\n\\\\t\\\\tatt = new Potree.InterleavedBufferAttribute(\\\\\\\"classification\\\\\\\", 4, 1, \\\\\\\"FLOAT\\\\\\\", false);\\\\r\\\\n\\\\t} else if (pointAttribute.name === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"PointAttribute\\\\\\\"].RETURN_NUMBER.name) {\\\\r\\\\n\\\\t\\\\tatt = new Potree.InterleavedBufferAttribute(\\\\\\\"returnNumber\\\\\\\", 4, 1, \\\\\\\"FLOAT\\\\\\\", false);\\\\r\\\\n\\\\t} else if (pointAttribute.name === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"PointAttribute\\\\\\\"].NUMBER_OF_RETURNS.name) {\\\\r\\\\n\\\\t\\\\tatt = new Potree.InterleavedBufferAttribute(\\\\\\\"numberOfReturns\\\\\\\", 4, 1, \\\\\\\"FLOAT\\\\\\\", false);\\\\r\\\\n\\\\t} else if (pointAttribute.name === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"PointAttribute\\\\\\\"].SOURCE_ID.name) {\\\\r\\\\n\\\\t\\\\tatt = new Potree.InterleavedBufferAttribute(\\\\\\\"pointSourceID\\\\\\\", 4, 1, \\\\\\\"FLOAT\\\\\\\", false);\\\\r\\\\n\\\\t} else if (pointAttribute.name === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"PointAttribute\\\\\\\"].NORMAL_SPHEREMAPPED.name) {\\\\r\\\\n\\\\t\\\\tatt = new Potree.InterleavedBufferAttribute(\\\\\\\"normal\\\\\\\", 12, 3, \\\\\\\"FLOAT\\\\\\\", false);\\\\r\\\\n\\\\t} else if (pointAttribute.name === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"PointAttribute\\\\\\\"].NORMAL_OCT16.name) {\\\\r\\\\n\\\\t\\\\tatt = new Potree.InterleavedBufferAttribute(\\\\\\\"normal\\\\\\\", 12, 3, \\\\\\\"FLOAT\\\\\\\", false);\\\\r\\\\n\\\\t} else if (pointAttribute.name === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"PointAttribute\\\\\\\"].NORMAL.name) {\\\\r\\\\n\\\\t\\\\tatt = new Potree.InterleavedBufferAttribute(\\\\\\\"normal\\\\\\\", 12, 3, \\\\\\\"FLOAT\\\\\\\", false);\\\\r\\\\n\\\\t}\\\\r\\\\n\\\\t\\\\r\\\\n\\\\treturn att;\\\\r\\\\n};\\\\r\\\\n//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9aZWFQb3RyZWUvLi9zcmMvdXRpbHMvdG9JbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZS5qcz80MDljIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRTREOztBQUVyRDtBQUNQOztBQUVBLDZCQUE2Qix5RUFBYztBQUMzQztBQUNBLEVBQUUsa0NBQWtDLHlFQUFjO0FBQ2xEO0FBQ0EsRUFBRSxrQ0FBa0MseUVBQWM7QUFDbEQ7QUFDQSxFQUFFLGtDQUFrQyx5RUFBYztBQUNsRDtBQUNBLEVBQUUsa0NBQWtDLHlFQUFjO0FBQ2xEO0FBQ0EsRUFBRSxrQ0FBa0MseUVBQWM7QUFDbEQ7QUFDQSxFQUFFLGtDQUFrQyx5RUFBYztBQUNsRDtBQUNBLEVBQUUsa0NBQWtDLHlFQUFjO0FBQ2xEO0FBQ0EsRUFBRSxrQ0FBa0MseUVBQWM7QUFDbEQ7QUFDQSxFQUFFLGtDQUFrQyx5RUFBYztBQUNsRDtBQUNBOztBQUVBO0FBQ0EiLCJmaWxlIjoiLi9zcmMvdXRpbHMvdG9JbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5cclxuaW1wb3J0IHtQb2ludEF0dHJpYnV0ZX0gZnJvbSBcIi4uL2xvYWRlci9Qb2ludEF0dHJpYnV0ZXMuanNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKHBvaW50QXR0cmlidXRlKXtcclxuXHRsZXQgYXR0ID0gbnVsbDtcclxuXHRcclxuXHRpZiAocG9pbnRBdHRyaWJ1dGUubmFtZSA9PT0gUG9pbnRBdHRyaWJ1dGUuUE9TSVRJT05fQ0FSVEVTSUFOLm5hbWUpIHtcclxuXHRcdGF0dCA9IG5ldyBQb3RyZWUuSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLCAxMiwgMywgXCJGTE9BVFwiLCBmYWxzZSk7XHJcblx0fSBlbHNlIGlmIChwb2ludEF0dHJpYnV0ZS5uYW1lID09PSBQb2ludEF0dHJpYnV0ZS5DT0xPUl9QQUNLRUQubmFtZSkge1xyXG5cdFx0YXR0ID0gbmV3IFBvdHJlZS5JbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZShcImNvbG9yXCIsIDQsIDQsIFwiVU5TSUdORURfQllURVwiLCB0cnVlKTtcclxuXHR9IGVsc2UgaWYgKHBvaW50QXR0cmlidXRlLm5hbWUgPT09IFBvaW50QXR0cmlidXRlLklOVEVOU0lUWS5uYW1lKSB7XHJcblx0XHRhdHQgPSBuZXcgUG90cmVlLkludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKFwiaW50ZW5zaXR5XCIsIDQsIDEsIFwiRkxPQVRcIiwgZmFsc2UpO1xyXG5cdH0gZWxzZSBpZiAocG9pbnRBdHRyaWJ1dGUubmFtZSA9PT0gUG9pbnRBdHRyaWJ1dGUuQ0xBU1NJRklDQVRJT04ubmFtZSkge1xyXG5cdFx0YXR0ID0gbmV3IFBvdHJlZS5JbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZShcImNsYXNzaWZpY2F0aW9uXCIsIDQsIDEsIFwiRkxPQVRcIiwgZmFsc2UpO1xyXG5cdH0gZWxzZSBpZiAocG9pbnRBdHRyaWJ1dGUubmFtZSA9PT0gUG9pbnRBdHRyaWJ1dGUuUkVUVVJOX05VTUJFUi5uYW1lKSB7XHJcblx0XHRhdHQgPSBuZXcgUG90cmVlLkludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKFwicmV0dXJuTnVtYmVyXCIsIDQsIDEsIFwiRkxPQVRcIiwgZmFsc2UpO1xyXG5cdH0gZWxzZSBpZiAocG9pbnRBdHRyaWJ1dGUubmFtZSA9PT0gUG9pbnRBdHRyaWJ1dGUuTlVNQkVSX09GX1JFVFVSTlMubmFtZSkge1xyXG5cdFx0YXR0ID0gbmV3IFBvdHJlZS5JbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZShcIm51bWJlck9mUmV0dXJuc1wiLCA0LCAxLCBcIkZMT0FUXCIsIGZhbHNlKTtcclxuXHR9IGVsc2UgaWYgKHBvaW50QXR0cmlidXRlLm5hbWUgPT09IFBvaW50QXR0cmlidXRlLlNPVVJDRV9JRC5uYW1lKSB7XHJcblx0XHRhdHQgPSBuZXcgUG90cmVlLkludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKFwicG9pbnRTb3VyY2VJRFwiLCA0LCAxLCBcIkZMT0FUXCIsIGZhbHNlKTtcclxuXHR9IGVsc2UgaWYgKHBvaW50QXR0cmlidXRlLm5hbWUgPT09IFBvaW50QXR0cmlidXRlLk5PUk1BTF9TUEhFUkVNQVBQRUQubmFtZSkge1xyXG5cdFx0YXR0ID0gbmV3IFBvdHJlZS5JbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZShcIm5vcm1hbFwiLCAxMiwgMywgXCJGTE9BVFwiLCBmYWxzZSk7XHJcblx0fSBlbHNlIGlmIChwb2ludEF0dHJpYnV0ZS5uYW1lID09PSBQb2ludEF0dHJpYnV0ZS5OT1JNQUxfT0NUMTYubmFtZSkge1xyXG5cdFx0YXR0ID0gbmV3IFBvdHJlZS5JbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZShcIm5vcm1hbFwiLCAxMiwgMywgXCJGTE9BVFwiLCBmYWxzZSk7XHJcblx0fSBlbHNlIGlmIChwb2ludEF0dHJpYnV0ZS5uYW1lID09PSBQb2ludEF0dHJpYnV0ZS5OT1JNQUwubmFtZSkge1xyXG5cdFx0YXR0ID0gbmV3IFBvdHJlZS5JbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZShcIm5vcm1hbFwiLCAxMiwgMywgXCJGTE9BVFwiLCBmYWxzZSk7XHJcblx0fVxyXG5cdFxyXG5cdHJldHVybiBhdHQ7XHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\\\\n//# sourceURL=webpack-internal:///./src/utils/toInterleavedBufferAttribute.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./src/workers/BinaryDecoderWorker.js\\\":\\n/*!********************************************!*\\\\\\n  !*** ./src/workers/BinaryDecoderWorker.js ***!\\n  \\\\********************************************/\\n/*! no exports provided */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony import */ var _Version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Version.js */ \\\\\\\"./src/Version.js\\\\\\\");\\\\n/* harmony import */ var _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../loader/PointAttributes.js */ \\\\\\\"./src/loader/PointAttributes.js\\\\\\\");\\\\n/* harmony import */ var _InterleavedBuffer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../InterleavedBuffer.js */ \\\\\\\"./src/InterleavedBuffer.js\\\\\\\");\\\\n/* harmony import */ var _utils_toInterleavedBufferAttribute_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/toInterleavedBufferAttribute.js */ \\\\\\\"./src/utils/toInterleavedBufferAttribute.js\\\\\\\");\\\\n\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n/* global onmessage:true postMessage:false */\\\\r\\\\n/* exported onmessage */\\\\r\\\\n// http://jsperf.com/uint8array-vs-dataview3/3\\\\r\\\\nfunction CustomView (buffer) {\\\\r\\\\n\\\\tthis.buffer = buffer;\\\\r\\\\n\\\\tthis.u8 = new Uint8Array(buffer);\\\\r\\\\n\\\\r\\\\n\\\\tlet tmp = new ArrayBuffer(8);\\\\r\\\\n\\\\tlet tmpf = new Float32Array(tmp);\\\\r\\\\n\\\\tlet tmpd = new Float64Array(tmp);\\\\r\\\\n\\\\tlet tmpu8 = new Uint8Array(tmp);\\\\r\\\\n\\\\r\\\\n\\\\tthis.getUint32 = function (i) {\\\\r\\\\n\\\\t\\\\treturn (this.u8[i + 3] << 24) | (this.u8[i + 2] << 16) | (this.u8[i + 1] << 8) | this.u8[i];\\\\r\\\\n\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\tthis.getUint16 = function (i) {\\\\r\\\\n\\\\t\\\\treturn (this.u8[i + 1] << 8) | this.u8[i];\\\\r\\\\n\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\tthis.getFloat32 = function (i) {\\\\r\\\\n\\\\t\\\\ttmpu8[0] = this.u8[i + 0];\\\\r\\\\n\\\\t\\\\ttmpu8[1] = this.u8[i + 1];\\\\r\\\\n\\\\t\\\\ttmpu8[2] = this.u8[i + 2];\\\\r\\\\n\\\\t\\\\ttmpu8[3] = this.u8[i + 3];\\\\r\\\\n\\\\r\\\\n\\\\t\\\\treturn tmpf[0];\\\\r\\\\n\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\tthis.getFloat64 = function (i) {\\\\r\\\\n\\\\t\\\\ttmpu8[0] = this.u8[i + 0];\\\\r\\\\n\\\\t\\\\ttmpu8[1] = this.u8[i + 1];\\\\r\\\\n\\\\t\\\\ttmpu8[2] = this.u8[i + 2];\\\\r\\\\n\\\\t\\\\ttmpu8[3] = this.u8[i + 3];\\\\r\\\\n\\\\t\\\\ttmpu8[4] = this.u8[i + 4];\\\\r\\\\n\\\\t\\\\ttmpu8[5] = this.u8[i + 5];\\\\r\\\\n\\\\t\\\\ttmpu8[6] = this.u8[i + 6];\\\\r\\\\n\\\\t\\\\ttmpu8[7] = this.u8[i + 7];\\\\r\\\\n\\\\r\\\\n\\\\t\\\\treturn tmpd[0];\\\\r\\\\n\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\tthis.getUint8 = function (i) {\\\\r\\\\n\\\\t\\\\treturn this.u8[i];\\\\r\\\\n\\\\t};\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\nonmessage = function (event) {\\\\r\\\\n\\\\r\\\\n\\\\tperformance.mark(\\\\\\\"binary-decoder-start\\\\\\\");\\\\r\\\\n\\\\t\\\\r\\\\n\\\\tlet buffer = event.data.buffer;\\\\r\\\\n\\\\tlet pointAttributes = event.data.pointAttributes;\\\\r\\\\n\\\\tlet numPoints = buffer.byteLength / pointAttributes.byteSize;\\\\r\\\\n\\\\tlet cv = new CustomView(buffer);\\\\r\\\\n\\\\tlet version = new _Version_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"Version\\\\\\\"](event.data.version);\\\\r\\\\n\\\\tlet nodeOffset = event.data.offset;\\\\r\\\\n\\\\tlet scale = event.data.scale;\\\\r\\\\n\\\\tlet spacing = event.data.spacing;\\\\r\\\\n\\\\tlet hasChildren = event.data.hasChildren;\\\\r\\\\n\\\\tlet name = event.data.name;\\\\r\\\\n\\\\t\\\\r\\\\n\\\\tlet tightBoxMin = [ Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY ];\\\\r\\\\n\\\\tlet tightBoxMax = [ Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY ];\\\\r\\\\n\\\\tlet mean = [0, 0, 0];\\\\r\\\\n\\\\t\\\\r\\\\n\\\\r\\\\n\\\\tlet attributeBuffers = {};\\\\r\\\\n\\\\tlet inOffset = 0;\\\\r\\\\n\\\\tfor (let pointAttribute of pointAttributes.attributes) {\\\\r\\\\n\\\\t\\\\t\\\\r\\\\n\\\\t\\\\tif (pointAttribute.name === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"PointAttribute\\\\\\\"].POSITION_CARTESIAN.name) {\\\\r\\\\n\\\\t\\\\t\\\\tlet buff = new ArrayBuffer(numPoints * 4 * 3);\\\\r\\\\n\\\\t\\\\t\\\\tlet positions = new Float32Array(buff);\\\\r\\\\n\\\\t\\\\t\\\\r\\\\n\\\\t\\\\t\\\\tfor (let j = 0; j < numPoints; j++) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet x, y, z;\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tif (version.newerThan('1.3')) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tx = (cv.getUint32(inOffset + j * pointAttributes.byteSize + 0, true) * scale);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\ty = (cv.getUint32(inOffset + j * pointAttributes.byteSize + 4, true) * scale);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tz = (cv.getUint32(inOffset + j * pointAttributes.byteSize + 8, true) * scale);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t} else {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tx = cv.getFloat32(j * pointAttributes.byteSize + 0, true) + nodeOffset[0];\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\ty = cv.getFloat32(j * pointAttributes.byteSize + 4, true) + nodeOffset[1];\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tz = cv.getFloat32(j * pointAttributes.byteSize + 8, true) + nodeOffset[2];\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tpositions[3 * j + 0] = x;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tpositions[3 * j + 1] = y;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tpositions[3 * j + 2] = z;\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tmean[0] += x / numPoints;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tmean[1] += y / numPoints;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tmean[2] += z / numPoints;\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\ttightBoxMin[0] = Math.min(tightBoxMin[0], x);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\ttightBoxMin[1] = Math.min(tightBoxMin[1], y);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\ttightBoxMin[2] = Math.min(tightBoxMin[2], z);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\ttightBoxMax[0] = Math.max(tightBoxMax[0], x);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\ttightBoxMax[1] = Math.max(tightBoxMax[1], y);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\ttightBoxMax[2] = Math.max(tightBoxMax[2], z);\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tattributeBuffers[pointAttribute.name] = { buffer: buff, attribute: pointAttribute };\\\\r\\\\n\\\\t\\\\t} else if (pointAttribute.name === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"PointAttribute\\\\\\\"].COLOR_PACKED.name) {\\\\r\\\\n\\\\t\\\\t\\\\tlet buff = new ArrayBuffer(numPoints * 4);\\\\r\\\\n\\\\t\\\\t\\\\tlet colors = new Uint8Array(buff);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tfor (let j = 0; j < numPoints; j++) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcolors[4 * j + 0] = cv.getUint8(inOffset + j * pointAttributes.byteSize + 0);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcolors[4 * j + 1] = cv.getUint8(inOffset + j * pointAttributes.byteSize + 1);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcolors[4 * j + 2] = cv.getUint8(inOffset + j * pointAttributes.byteSize + 2);\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tattributeBuffers[pointAttribute.name] = { buffer: buff, attribute: pointAttribute };\\\\r\\\\n\\\\t\\\\t} else if (pointAttribute.name === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"PointAttribute\\\\\\\"].INTENSITY.name) {\\\\r\\\\n\\\\t\\\\t\\\\tlet buff = new ArrayBuffer(numPoints * 4);\\\\r\\\\n\\\\t\\\\t\\\\tlet intensities = new Float32Array(buff);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tfor (let j = 0; j < numPoints; j++) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet intensity = cv.getUint16(inOffset + j * pointAttributes.byteSize, true);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tintensities[j] = intensity;\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tattributeBuffers[pointAttribute.name] = { buffer: buff, attribute: pointAttribute };\\\\r\\\\n\\\\t\\\\t} else if (pointAttribute.name === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"PointAttribute\\\\\\\"].CLASSIFICATION.name) {\\\\r\\\\n\\\\t\\\\t\\\\tlet buff = new ArrayBuffer(numPoints);\\\\r\\\\n\\\\t\\\\t\\\\tlet classifications = new Uint8Array(buff);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tfor (let j = 0; j < numPoints; j++) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet classification = cv.getUint8(inOffset + j * pointAttributes.byteSize);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tclassifications[j] = classification;\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tattributeBuffers[pointAttribute.name] = { buffer: buff, attribute: pointAttribute };\\\\r\\\\n\\\\t\\\\t} else if (pointAttribute.name === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"PointAttribute\\\\\\\"].RETURN_NUMBER.name) {\\\\r\\\\n\\\\t\\\\t\\\\tlet buff = new ArrayBuffer(numPoints);\\\\r\\\\n\\\\t\\\\t\\\\tlet returnNumbers = new Uint8Array(buff);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tfor (let j = 0; j < numPoints; j++) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet returnNumber = cv.getUint8(inOffset + j * pointAttributes.byteSize);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\treturnNumbers[j] = returnNumber;\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tattributeBuffers[pointAttribute.name] = { buffer: buff, attribute: pointAttribute };\\\\r\\\\n\\\\t\\\\t} else if (pointAttribute.name === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"PointAttribute\\\\\\\"].NUMBER_OF_RETURNS.name) {\\\\r\\\\n\\\\t\\\\t\\\\tlet buff = new ArrayBuffer(numPoints);\\\\r\\\\n\\\\t\\\\t\\\\tlet numberOfReturns = new Uint8Array(buff);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tfor (let j = 0; j < numPoints; j++) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet numberOfReturn = cv.getUint8(inOffset + j * pointAttributes.byteSize);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tnumberOfReturns[j] = numberOfReturn;\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tattributeBuffers[pointAttribute.name] = { buffer: buff, attribute: pointAttribute };\\\\r\\\\n\\\\t\\\\t} else if (pointAttribute.name === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"PointAttribute\\\\\\\"].SOURCE_ID.name) {\\\\r\\\\n\\\\t\\\\t\\\\tlet buff = new ArrayBuffer(numPoints * 2);\\\\r\\\\n\\\\t\\\\t\\\\tlet sourceIDs = new Uint16Array(buff);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tfor (let j = 0; j < numPoints; j++) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet sourceID = cv.getUint16(inOffset + j * pointAttributes.byteSize);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tsourceIDs[j] = sourceID;\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tattributeBuffers[pointAttribute.name] = { buffer: buff, attribute: pointAttribute };\\\\r\\\\n\\\\t\\\\t} else if (pointAttribute.name === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"PointAttribute\\\\\\\"].NORMAL_SPHEREMAPPED.name) {\\\\r\\\\n\\\\t\\\\t\\\\tlet buff = new ArrayBuffer(numPoints * 4 * 3);\\\\r\\\\n\\\\t\\\\t\\\\tlet normals = new Float32Array(buff);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tfor (let j = 0; j < numPoints; j++) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet bx = cv.getUint8(inOffset + j * pointAttributes.byteSize + 0);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet by = cv.getUint8(inOffset + j * pointAttributes.byteSize + 1);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet ex = bx / 255;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet ey = by / 255;\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet nx = ex * 2 - 1;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet ny = ey * 2 - 1;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet nz = 1;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet nw = -1;\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet l = (nx * (-nx)) + (ny * (-ny)) + (nz * (-nw));\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tnz = l;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tnx = nx * Math.sqrt(l);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tny = ny * Math.sqrt(l);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tnx = nx * 2;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tny = ny * 2;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tnz = nz * 2 - 1;\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tnormals[3 * j + 0] = nx;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tnormals[3 * j + 1] = ny;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tnormals[3 * j + 2] = nz;\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tattributeBuffers[pointAttribute.name] = { buffer: buff, attribute: pointAttribute };\\\\r\\\\n\\\\t\\\\t} else if (pointAttribute.name === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"PointAttribute\\\\\\\"].NORMAL_OCT16.name) {\\\\r\\\\n\\\\t\\\\t\\\\tlet buff = new ArrayBuffer(numPoints * 4 * 3);\\\\r\\\\n\\\\t\\\\t\\\\tlet normals = new Float32Array(buff);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tfor (let j = 0; j < numPoints; j++) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet bx = cv.getUint8(inOffset + j * pointAttributes.byteSize + 0);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet by = cv.getUint8(inOffset + j * pointAttributes.byteSize + 1);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet u = (bx / 255) * 2 - 1;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet v = (by / 255) * 2 - 1;\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet z = 1 - Math.abs(u) - Math.abs(v);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet x = 0;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet y = 0;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tif (z >= 0) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tx = u;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\ty = v;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t} else {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\tx = -(v / Math.sign(v) - 1) / Math.sign(u);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\ty = -(u / Math.sign(u) - 1) / Math.sign(v);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet length = Math.sqrt(x * x + y * y + z * z);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tx = x / length;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\ty = y / length;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tz = z / length;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tnormals[3 * j + 0] = x;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tnormals[3 * j + 1] = y;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tnormals[3 * j + 2] = z;\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tattributeBuffers[pointAttribute.name] = { buffer: buff, attribute: pointAttribute };\\\\r\\\\n\\\\t\\\\t} else if (pointAttribute.name === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"PointAttribute\\\\\\\"].NORMAL.name) {\\\\r\\\\n\\\\t\\\\t\\\\tlet buff = new ArrayBuffer(numPoints * 4 * 3);\\\\r\\\\n\\\\t\\\\t\\\\tlet normals = new Float32Array(buff);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tfor (let j = 0; j < numPoints; j++) {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet x = cv.getFloat32(inOffset + j * pointAttributes.byteSize + 0, true);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet y = cv.getFloat32(inOffset + j * pointAttributes.byteSize + 4, true);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet z = cv.getFloat32(inOffset + j * pointAttributes.byteSize + 8, true);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\t\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tnormals[3 * j + 0] = x;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tnormals[3 * j + 1] = y;\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tnormals[3 * j + 2] = z;\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tattributeBuffers[pointAttribute.name] = { buffer: buff, attribute: pointAttribute };\\\\r\\\\n\\\\t\\\\t} else if (pointAttribute.name === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"PointAttribute\\\\\\\"].GPS_TIME.name) {\\\\r\\\\n\\\\t\\\\t\\\\tlet buff = new ArrayBuffer(numPoints * 8);\\\\r\\\\n\\\\t\\\\t\\\\tlet gpstimes = new Float64Array(buff);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tfor(let j = 0; j < numPoints; j++){\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tlet gpstime = cv.getFloat64(inOffset + j * pointAttributes.byteSize, true);\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tgpstimes[j] = gpstime;\\\\r\\\\n\\\\t\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t\\\\tattributeBuffers[pointAttribute.name] = { buffer: buff, attribute: pointAttribute };\\\\r\\\\n\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tinOffset += pointAttribute.byteSize;\\\\r\\\\n\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t// Convert GPS time from double (unsupported by WebGL) to origin-aligned floats\\\\r\\\\n\\\\tif(attributeBuffers[_loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"PointAttribute\\\\\\\"].GPS_TIME.name]){ \\\\r\\\\n\\\\t\\\\tlet attribute = attributeBuffers[_loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"PointAttribute\\\\\\\"].GPS_TIME.name];\\\\r\\\\n\\\\t\\\\tlet sourceF64 = new Float64Array(attribute.buffer);\\\\r\\\\n\\\\t\\\\tlet target = new ArrayBuffer(numPoints * 4);\\\\r\\\\n\\\\t\\\\tlet targetF32 = new Float32Array(target);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tlet min = Infinity;\\\\r\\\\n\\\\t\\\\tlet max = -Infinity;\\\\r\\\\n\\\\t\\\\tfor(let i = 0; i < numPoints; i++){\\\\r\\\\n\\\\t\\\\t\\\\tlet gpstime = sourceF64[i];\\\\r\\\\n\\\\r\\\\n\\\\t\\\\t\\\\tmin = Math.min(min, gpstime);\\\\r\\\\n\\\\t\\\\t\\\\tmax = Math.max(max, gpstime);\\\\r\\\\n\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tfor(let i = 0; i < numPoints; i++){\\\\r\\\\n\\\\t\\\\t\\\\tlet gpstime = sourceF64[i];\\\\r\\\\n\\\\t\\\\t\\\\ttargetF32[i] = gpstime - min;\\\\r\\\\n\\\\t\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tattributeBuffers[_loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"PointAttribute\\\\\\\"].GPS_TIME.name] = { \\\\r\\\\n\\\\t\\\\t\\\\tbuffer: target, \\\\r\\\\n\\\\t\\\\t\\\\tattribute: _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"PointAttribute\\\\\\\"].GPS_TIME,\\\\r\\\\n\\\\t\\\\t\\\\toffset: min,\\\\r\\\\n\\\\t\\\\t\\\\trange: max - min};\\\\r\\\\n\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\t//let debugNodes = [\\\\\\\"r026\\\\\\\", \\\\\\\"r0226\\\\\\\",\\\\\\\"r02274\\\\\\\"];\\\\r\\\\n\\\\t//if(debugNodes.includes(name)){\\\\r\\\\n\\\\tif(false){}\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\\t{ // add indices\\\\r\\\\n\\\\t\\\\tlet buff = new ArrayBuffer(numPoints * 4);\\\\r\\\\n\\\\t\\\\tlet indices = new Uint32Array(buff);\\\\r\\\\n\\\\r\\\\n\\\\t\\\\tfor (let i = 0; i < numPoints; i++) {\\\\r\\\\n\\\\t\\\\t\\\\tindices[i] = i;\\\\r\\\\n\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\t\\\\r\\\\n\\\\t\\\\tattributeBuffers[_loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"PointAttribute\\\\\\\"].INDICES.name] = { buffer: buff, attribute: _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"PointAttribute\\\\\\\"].INDICES };\\\\r\\\\n\\\\t}\\\\r\\\\n\\\\r\\\\n\\\\tperformance.mark(\\\\\\\"binary-decoder-end\\\\\\\");\\\\r\\\\n\\\\r\\\\n\\\\t//{ // print timings\\\\r\\\\n\\\\t//\\\\t//performance.measure(\\\\\\\"spacing\\\\\\\", \\\\\\\"spacing-start\\\\\\\", \\\\\\\"spacing-end\\\\\\\");\\\\r\\\\n\\\\t//\\\\tperformance.measure(\\\\\\\"binary-decoder\\\\\\\", \\\\\\\"binary-decoder-start\\\\\\\", \\\\\\\"binary-decoder-end\\\\\\\");\\\\r\\\\n\\\\t//\\\\tlet measure = performance.getEntriesByType(\\\\\\\"measure\\\\\\\")[0];\\\\r\\\\n\\\\t//\\\\tlet dpp = 1000 * measure.duration / numPoints;\\\\r\\\\n\\\\t//\\\\tlet debugMessage = `${measure.duration.toFixed(3)} ms, ${numPoints} points, ${dpp.toFixed(3)} µs / point`;\\\\r\\\\n\\\\t//\\\\tconsole.log(debugMessage);\\\\r\\\\n\\\\t//}\\\\r\\\\n\\\\r\\\\n\\\\tperformance.clearMarks();\\\\r\\\\n\\\\tperformance.clearMeasures();\\\\r\\\\n\\\\r\\\\n\\\\tlet message = {\\\\r\\\\n\\\\t\\\\tbuffer: buffer,\\\\r\\\\n\\\\t\\\\tmean: mean,\\\\r\\\\n\\\\t\\\\tattributeBuffers: attributeBuffers,\\\\r\\\\n\\\\t\\\\ttightBoundingBox: { min: tightBoxMin, max: tightBoxMax },\\\\r\\\\n\\\\t\\\\t//estimatedSpacing: estimatedSpacing,\\\\r\\\\n\\\\t};\\\\r\\\\n\\\\r\\\\n\\\\tlet transferables = [];\\\\r\\\\n\\\\tfor (let property in message.attributeBuffers) {\\\\r\\\\n\\\\t\\\\ttransferables.push(message.attributeBuffers[property].buffer);\\\\r\\\\n\\\\t}\\\\r\\\\n\\\\ttransferables.push(buffer);\\\\r\\\\n\\\\r\\\\n\\\\tpostMessage(message, transferables);\\\\r\\\\n};\\\\r\\\\n//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./src/workers/BinaryDecoderWorker.js\\\\n\\\");\\n\\n/***/ })\\n\\n/******/ });\", __webpack_require__.p + \"dbf76e51a2429872a16e.worker.js\");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/worker-loader/dist/cjs.js?inline!./src/workers/BinaryDecoderWorker.js\n");

/***/ }),

/***/ "./node_modules/worker-loader/dist/workers/InlineWorker.js":
/*!*****************************************************************!*\
  !*** ./node_modules/worker-loader/dist/workers/InlineWorker.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\nvar URL = window.URL || window.webkitURL;\n\nmodule.exports = function (content, url) {\n  try {\n    try {\n      var blob;\n\n      try {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\n        blob = new BlobBuilder();\n\n        blob.append(content);\n\n        blob = blob.getBlob();\n      } catch (e) {\n        // The proposed API\n        blob = new Blob([content]);\n      }\n\n      return new Worker(URL.createObjectURL(blob));\n    } catch (e) {\n      return new Worker('data:application/javascript,' + encodeURIComponent(content));\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error('Inline worker is not supported');\n    }\n\n    return new Worker(url);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9aZWFQb3RyZWUvLi9ub2RlX21vZHVsZXMvd29ya2VyLWxvYWRlci9kaXN0L3dvcmtlcnMvSW5saW5lV29ya2VyLmpzPzc3ODUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd29ya2VyLWxvYWRlci9kaXN0L3dvcmtlcnMvSW5saW5lV29ya2VyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwMzQzOTEzL2hvdy10by1jcmVhdGUtYS13ZWItd29ya2VyLWZyb20tYS1zdHJpbmdcblxudmFyIFVSTCA9IHdpbmRvdy5VUkwgfHwgd2luZG93LndlYmtpdFVSTDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29udGVudCwgdXJsKSB7XG4gIHRyeSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBibG9iO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyBCbG9iQnVpbGRlciA9IERlcHJlY2F0ZWQsIGJ1dCB3aWRlbHkgaW1wbGVtZW50ZWRcbiAgICAgICAgdmFyIEJsb2JCdWlsZGVyID0gd2luZG93LkJsb2JCdWlsZGVyIHx8IHdpbmRvdy5XZWJLaXRCbG9iQnVpbGRlciB8fCB3aW5kb3cuTW96QmxvYkJ1aWxkZXIgfHwgd2luZG93Lk1TQmxvYkJ1aWxkZXI7XG5cbiAgICAgICAgYmxvYiA9IG5ldyBCbG9iQnVpbGRlcigpO1xuXG4gICAgICAgIGJsb2IuYXBwZW5kKGNvbnRlbnQpO1xuXG4gICAgICAgIGJsb2IgPSBibG9iLmdldEJsb2IoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gVGhlIHByb3Bvc2VkIEFQSVxuICAgICAgICBibG9iID0gbmV3IEJsb2IoW2NvbnRlbnRdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBXb3JrZXIoVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG5ldyBXb3JrZXIoJ2RhdGE6YXBwbGljYXRpb24vamF2YXNjcmlwdCwnICsgZW5jb2RlVVJJQ29tcG9uZW50KGNvbnRlbnQpKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoIXVybCkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0lubGluZSB3b3JrZXIgaXMgbm90IHN1cHBvcnRlZCcpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgV29ya2VyKHVybCk7XG4gIH1cbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/worker-loader/dist/workers/InlineWorker.js\n");

/***/ }),

/***/ "./src/Enum.js":
/*!*********************!*\
  !*** ./src/Enum.js ***!
  \*********************/
/*! exports provided: Enum, EnumItem */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Enum\", function() { return Enum; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EnumItem\", function() { return EnumItem; });\n\r\nclass EnumItem{\r\n\tconstructor(object){\r\n\t\tfor(let key of Object.keys(object)){\r\n\t\t\tthis[key] = object[key];\r\n\t\t}\r\n\t}\r\n\r\n\tinspect(){\r\n\t\treturn `Enum(${this.name}: ${this.value})`;\r\n\t}\r\n};\r\n\r\nclass Enum{\r\n\r\n\tconstructor(object){\r\n\t\tthis.object = object;\r\n\r\n\t\tfor(let key of Object.keys(object)){\r\n\t\t\tlet value = object[key];\r\n\r\n\t\t\tif(typeof value === \"object\"){\r\n\t\t\t\tvalue.name = key;\r\n\t\t\t}else{\r\n\t\t\t\tvalue = {name: key, value: value};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis[key] = new EnumItem(value);\r\n\t\t}\r\n\t}\r\n\r\n\tfromValue(value){\r\n\t\tfor(let key of Object.keys(this.object)){\r\n\t\t\tif(this[key].value === value){\r\n\t\t\t\treturn this[key];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthrow new Error(`No enum for value: ${value}`);\r\n\t}\r\n\t\r\n};\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9aZWFQb3RyZWUvLi9zcmMvRW51bS5qcz8wNTFjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsVUFBVSxJQUFJLFdBQVc7QUFDMUM7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSixhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3Q0FBd0MsTUFBTTtBQUM5Qzs7QUFFQSIsImZpbGUiOiIuL3NyYy9FbnVtLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmNsYXNzIEVudW1JdGVte1xyXG5cdGNvbnN0cnVjdG9yKG9iamVjdCl7XHJcblx0XHRmb3IobGV0IGtleSBvZiBPYmplY3Qua2V5cyhvYmplY3QpKXtcclxuXHRcdFx0dGhpc1trZXldID0gb2JqZWN0W2tleV07XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpbnNwZWN0KCl7XHJcblx0XHRyZXR1cm4gYEVudW0oJHt0aGlzLm5hbWV9OiAke3RoaXMudmFsdWV9KWA7XHJcblx0fVxyXG59O1xyXG5cclxuY2xhc3MgRW51bXtcclxuXHJcblx0Y29uc3RydWN0b3Iob2JqZWN0KXtcclxuXHRcdHRoaXMub2JqZWN0ID0gb2JqZWN0O1xyXG5cclxuXHRcdGZvcihsZXQga2V5IG9mIE9iamVjdC5rZXlzKG9iamVjdCkpe1xyXG5cdFx0XHRsZXQgdmFsdWUgPSBvYmplY3Rba2V5XTtcclxuXHJcblx0XHRcdGlmKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIil7XHJcblx0XHRcdFx0dmFsdWUubmFtZSA9IGtleTtcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0dmFsdWUgPSB7bmFtZToga2V5LCB2YWx1ZTogdmFsdWV9O1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHR0aGlzW2tleV0gPSBuZXcgRW51bUl0ZW0odmFsdWUpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZnJvbVZhbHVlKHZhbHVlKXtcclxuXHRcdGZvcihsZXQga2V5IG9mIE9iamVjdC5rZXlzKHRoaXMub2JqZWN0KSl7XHJcblx0XHRcdGlmKHRoaXNba2V5XS52YWx1ZSA9PT0gdmFsdWUpe1xyXG5cdFx0XHRcdHJldHVybiB0aGlzW2tleV07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoYE5vIGVudW0gZm9yIHZhbHVlOiAke3ZhbHVlfWApO1xyXG5cdH1cclxuXHRcclxufTtcclxuXHJcbmV4cG9ydCB7RW51bSwgRW51bUl0ZW19OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/Enum.js\n");

/***/ }),

/***/ "./src/EventDispatcher.js":
/*!********************************!*\
  !*** ./src/EventDispatcher.js ***!
  \********************************/
/*! exports provided: EventDispatcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EventDispatcher\", function() { return EventDispatcher; });\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/ https://github.com/mrdoob/eventdispatcher.js\r\n * \r\n * with slight modifications by mschuetz, http://potree.org\r\n * \r\n */\r\n\r\n// The MIT License\r\n// \r\n// Copyright (c) 2011 Mr.doob\r\n// \r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n// \r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n// \r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n\r\n\r\n\r\n\r\n\r\nclass EventDispatcher{\r\n\r\n\tconstructor(){\r\n\t\tthis._listeners = {};\r\n\t}\r\n\r\n\taddEventListener(type, listener){\r\n\r\n\t\tconst listeners = this._listeners;\r\n\r\n\t\tif(listeners[type] === undefined){\r\n\t\t\tlisteners[type] = [];\r\n\t\t}\r\n\r\n\t\tif(listeners[type].indexOf(listener) === - 1){\r\n\t\t\tlisteners[type].push( listener );\r\n\t\t}\r\n\r\n\t}\r\n\r\n\thasEventListener(type, listener){\r\n\r\n\t\tconst listeners = this._listeners;\r\n\r\n\t\treturn listeners[type] !== undefined && listeners[type].indexOf(listener) !== - 1;\r\n\t}\r\n\r\n\tremoveEventListener(type, listener){\r\n\r\n\t\tlet listeners = this._listeners;\r\n\t\tlet listenerArray = listeners[type];\r\n\r\n\t\tif (listenerArray !== undefined){\r\n\r\n\t\t\tlet index = listenerArray.indexOf(listener);\r\n\r\n\t\t\tif(index !== - 1){\r\n\t\t\t\tlistenerArray.splice(index, 1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tremoveEventListeners(type){\r\n\t\tif(this._listeners[type] !== undefined){\r\n\t\t\tdelete this._listeners[type];\r\n\t\t}\r\n\t};\r\n\r\n\tdispatchEvent(event){\r\n\r\n\t\tlet listeners = this._listeners;\r\n\t\tlet listenerArray = listeners[event.type];\r\n\r\n\t\tif ( listenerArray !== undefined ) {\r\n\t\t\tevent.target = this;\r\n\r\n\t\t\tfor(let listener of listenerArray.slice(0)){\r\n\t\t\t\tlistener.call(this, event);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9aZWFQb3RyZWUvLi9zcmMvRXZlbnREaXNwYXRjaGVyLmpzP2I4MGIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBTU87O0FBRVA7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBIiwiZmlsZSI6Ii4vc3JjL0V2ZW50RGlzcGF0Y2hlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS8gaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi9ldmVudGRpc3BhdGNoZXIuanNcclxuICogXHJcbiAqIHdpdGggc2xpZ2h0IG1vZGlmaWNhdGlvbnMgYnkgbXNjaHVldHosIGh0dHA6Ly9wb3RyZWUub3JnXHJcbiAqIFxyXG4gKi9cclxuXHJcbi8vIFRoZSBNSVQgTGljZW5zZVxyXG4vLyBcclxuLy8gQ29weXJpZ2h0IChjKSAyMDExIE1yLmRvb2JcclxuLy8gXHJcbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxyXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXHJcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcclxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXHJcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcbi8vIFxyXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxyXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuLy8gXHJcbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuLy8gVEhFIFNPRlRXQVJFLlxyXG5cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBFdmVudERpc3BhdGNoZXJ7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCl7XHJcblx0XHR0aGlzLl9saXN0ZW5lcnMgPSB7fTtcclxuXHR9XHJcblxyXG5cdGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpe1xyXG5cclxuXHRcdGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcclxuXHJcblx0XHRpZihsaXN0ZW5lcnNbdHlwZV0gPT09IHVuZGVmaW5lZCl7XHJcblx0XHRcdGxpc3RlbmVyc1t0eXBlXSA9IFtdO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmKGxpc3RlbmVyc1t0eXBlXS5pbmRleE9mKGxpc3RlbmVyKSA9PT0gLSAxKXtcclxuXHRcdFx0bGlzdGVuZXJzW3R5cGVdLnB1c2goIGxpc3RlbmVyICk7XHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0aGFzRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcil7XHJcblxyXG5cdFx0Y29uc3QgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xyXG5cclxuXHRcdHJldHVybiBsaXN0ZW5lcnNbdHlwZV0gIT09IHVuZGVmaW5lZCAmJiBsaXN0ZW5lcnNbdHlwZV0uaW5kZXhPZihsaXN0ZW5lcikgIT09IC0gMTtcclxuXHR9XHJcblxyXG5cdHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpe1xyXG5cclxuXHRcdGxldCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XHJcblx0XHRsZXQgbGlzdGVuZXJBcnJheSA9IGxpc3RlbmVyc1t0eXBlXTtcclxuXHJcblx0XHRpZiAobGlzdGVuZXJBcnJheSAhPT0gdW5kZWZpbmVkKXtcclxuXHJcblx0XHRcdGxldCBpbmRleCA9IGxpc3RlbmVyQXJyYXkuaW5kZXhPZihsaXN0ZW5lcik7XHJcblxyXG5cdFx0XHRpZihpbmRleCAhPT0gLSAxKXtcclxuXHRcdFx0XHRsaXN0ZW5lckFycmF5LnNwbGljZShpbmRleCwgMSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRyZW1vdmVFdmVudExpc3RlbmVycyh0eXBlKXtcclxuXHRcdGlmKHRoaXMuX2xpc3RlbmVyc1t0eXBlXSAhPT0gdW5kZWZpbmVkKXtcclxuXHRcdFx0ZGVsZXRlIHRoaXMuX2xpc3RlbmVyc1t0eXBlXTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHRkaXNwYXRjaEV2ZW50KGV2ZW50KXtcclxuXHJcblx0XHRsZXQgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xyXG5cdFx0bGV0IGxpc3RlbmVyQXJyYXkgPSBsaXN0ZW5lcnNbZXZlbnQudHlwZV07XHJcblxyXG5cdFx0aWYgKCBsaXN0ZW5lckFycmF5ICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdGV2ZW50LnRhcmdldCA9IHRoaXM7XHJcblxyXG5cdFx0XHRmb3IobGV0IGxpc3RlbmVyIG9mIGxpc3RlbmVyQXJyYXkuc2xpY2UoMCkpe1xyXG5cdFx0XHRcdGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/EventDispatcher.js\n");

/***/ }),

/***/ "./src/LRU.js":
/*!********************!*\
  !*** ./src/LRU.js ***!
  \********************/
/*! exports provided: LRU, LRUItem */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LRU\", function() { return LRU; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LRUItem\", function() { return LRUItem; });\n\r\n\r\nclass LRUItem{\r\n\r\n\tconstructor(node){\r\n\t\tthis.previous = null;\r\n\t\tthis.next = null;\r\n\t\tthis.node = node;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n *\r\n * @class A doubly-linked-list of the least recently used elements.\r\n */\r\nclass LRU{\r\n\r\n\tconstructor(){\r\n\t\t// the least recently used item\r\n\t\tthis.first = null;\r\n\t\t// the most recently used item\r\n\t\tthis.last = null;\r\n\t\t// a list of all items in the lru list\r\n\t\tthis.items = {};\r\n\t\tthis.elements = 0;\r\n\t\tthis.numPoints = 0;\r\n\t\tthis.pointLoadLimit = 0;\r\n\t}\r\n\r\n\tsize(){\r\n\t\treturn this.elements;\r\n\t}\r\n\r\n\tcontains(node){\r\n\t\treturn this.items[node.id] == null;\r\n\t}\r\n\r\n\ttouch(node){\r\n\t\tif (!node.loaded) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet item;\r\n\t\tif (this.items[node.id] == null) {\r\n\t\t\t// add to list\r\n\t\t\titem = new LRUItem(node);\r\n\t\t\titem.previous = this.last;\r\n\t\t\tthis.last = item;\r\n\t\t\tif (item.previous !== null) {\r\n\t\t\t\titem.previous.next = item;\r\n\t\t\t}\r\n\r\n\t\t\tthis.items[node.id] = item;\r\n\t\t\tthis.elements++;\r\n\r\n\t\t\tif (this.first === null) {\r\n\t\t\t\tthis.first = item;\r\n\t\t\t}\r\n\t\t\tthis.numPoints += node.numPoints;\r\n\t\t} else {\r\n\t\t\t// update in list\r\n\t\t\titem = this.items[node.id];\r\n\t\t\tif (item.previous === null) {\r\n\t\t\t\t// handle touch on first element\r\n\t\t\t\tif (item.next !== null) {\r\n\t\t\t\t\tthis.first = item.next;\r\n\t\t\t\t\tthis.first.previous = null;\r\n\t\t\t\t\titem.previous = this.last;\r\n\t\t\t\t\titem.next = null;\r\n\t\t\t\t\tthis.last = item;\r\n\t\t\t\t\titem.previous.next = item;\r\n\t\t\t\t}\r\n\t\t\t} else if (item.next === null) {\r\n\t\t\t\t// handle touch on last element\r\n\t\t\t} else {\r\n\t\t\t\t// handle touch on any other element\r\n\t\t\t\titem.previous.next = item.next;\r\n\t\t\t\titem.next.previous = item.previous;\r\n\t\t\t\titem.previous = this.last;\r\n\t\t\t\titem.next = null;\r\n\t\t\t\tthis.last = item;\r\n\t\t\t\titem.previous.next = item;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tremove(node){\r\n\t\tlet lruItem = this.items[node.id];\r\n\t\tif (lruItem) {\r\n\t\t\tif (this.elements === 1) {\r\n\t\t\t\tthis.first = null;\r\n\t\t\t\tthis.last = null;\r\n\t\t\t} else {\r\n\t\t\t\tif (!lruItem.previous) {\r\n\t\t\t\t\tthis.first = lruItem.next;\r\n\t\t\t\t\tthis.first.previous = null;\r\n\t\t\t\t}\r\n\t\t\t\tif (!lruItem.next) {\r\n\t\t\t\t\tthis.last = lruItem.previous;\r\n\t\t\t\t\tthis.last.next = null;\r\n\t\t\t\t}\r\n\t\t\t\tif (lruItem.previous && lruItem.next) {\r\n\t\t\t\t\tlruItem.previous.next = lruItem.next;\r\n\t\t\t\t\tlruItem.next.previous = lruItem.previous;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tdelete this.items[node.id];\r\n\t\t\tthis.elements--;\r\n\t\t\tthis.numPoints -= node.numPoints;\r\n\t\t}\r\n\t}\r\n\r\n\tgetLRUItem(){\r\n\t\tif (this.first === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tlet lru = this.first;\r\n\r\n\t\treturn lru.node;\r\n\t}\r\n\r\n\ttoString(){\r\n\t\tlet string = '{ ';\r\n\t\tlet curr = this.first;\r\n\t\twhile (curr !== null) {\r\n\t\t\tstring += curr.node.id;\r\n\t\t\tif (curr.next !== null) {\r\n\t\t\t\tstring += ', ';\r\n\t\t\t}\r\n\t\t\tcurr = curr.next;\r\n\t\t}\r\n\t\tstring += '}';\r\n\t\tstring += '(' + this.size() + ')';\r\n\t\treturn string;\r\n\t}\r\n\r\n\tfreeMemory(){\r\n\t\tif (this.elements <= 1) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\twhile (this.numPoints > this.pointLoadLimit) {\r\n\t\t\tlet element = this.first;\r\n\t\t\tlet node = element.node;\r\n\t\t\tthis.disposeDescendants(node);\r\n\t\t}\r\n\t}\r\n\r\n\tdisposeDescendants(node){\r\n\t\tlet stack = [];\r\n\t\tstack.push(node);\r\n\t\twhile (stack.length > 0) {\r\n\t\t\tlet current = stack.pop();\r\n\r\n\t\t\t// console.log(current);\r\n\r\n\t\t\tcurrent.dispose();\r\n\t\t\tthis.remove(current);\r\n\r\n\t\t\tfor (let key in current.children) {\r\n\t\t\t\tif (current.children.hasOwnProperty(key)) {\r\n\t\t\t\t\tlet child = current.children[key];\r\n\t\t\t\t\tif (child.loaded) {\r\n\t\t\t\t\t\tstack.push(current.children[key]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9aZWFQb3RyZWUvLi9zcmMvTFJVLmpzP2FmYzUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL3NyYy9MUlUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmNsYXNzIExSVUl0ZW17XHJcblxyXG5cdGNvbnN0cnVjdG9yKG5vZGUpe1xyXG5cdFx0dGhpcy5wcmV2aW91cyA9IG51bGw7XHJcblx0XHR0aGlzLm5leHQgPSBudWxsO1xyXG5cdFx0dGhpcy5ub2RlID0gbm9kZTtcclxuXHR9XHJcblxyXG59XHJcblxyXG4vKipcclxuICpcclxuICogQGNsYXNzIEEgZG91Ymx5LWxpbmtlZC1saXN0IG9mIHRoZSBsZWFzdCByZWNlbnRseSB1c2VkIGVsZW1lbnRzLlxyXG4gKi9cclxuY2xhc3MgTFJVe1xyXG5cclxuXHRjb25zdHJ1Y3Rvcigpe1xyXG5cdFx0Ly8gdGhlIGxlYXN0IHJlY2VudGx5IHVzZWQgaXRlbVxyXG5cdFx0dGhpcy5maXJzdCA9IG51bGw7XHJcblx0XHQvLyB0aGUgbW9zdCByZWNlbnRseSB1c2VkIGl0ZW1cclxuXHRcdHRoaXMubGFzdCA9IG51bGw7XHJcblx0XHQvLyBhIGxpc3Qgb2YgYWxsIGl0ZW1zIGluIHRoZSBscnUgbGlzdFxyXG5cdFx0dGhpcy5pdGVtcyA9IHt9O1xyXG5cdFx0dGhpcy5lbGVtZW50cyA9IDA7XHJcblx0XHR0aGlzLm51bVBvaW50cyA9IDA7XHJcblx0XHR0aGlzLnBvaW50TG9hZExpbWl0ID0gMDtcclxuXHR9XHJcblxyXG5cdHNpemUoKXtcclxuXHRcdHJldHVybiB0aGlzLmVsZW1lbnRzO1xyXG5cdH1cclxuXHJcblx0Y29udGFpbnMobm9kZSl7XHJcblx0XHRyZXR1cm4gdGhpcy5pdGVtc1tub2RlLmlkXSA9PSBudWxsO1xyXG5cdH1cclxuXHJcblx0dG91Y2gobm9kZSl7XHJcblx0XHRpZiAoIW5vZGUubG9hZGVkKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRsZXQgaXRlbTtcclxuXHRcdGlmICh0aGlzLml0ZW1zW25vZGUuaWRdID09IG51bGwpIHtcclxuXHRcdFx0Ly8gYWRkIHRvIGxpc3RcclxuXHRcdFx0aXRlbSA9IG5ldyBMUlVJdGVtKG5vZGUpO1xyXG5cdFx0XHRpdGVtLnByZXZpb3VzID0gdGhpcy5sYXN0O1xyXG5cdFx0XHR0aGlzLmxhc3QgPSBpdGVtO1xyXG5cdFx0XHRpZiAoaXRlbS5wcmV2aW91cyAhPT0gbnVsbCkge1xyXG5cdFx0XHRcdGl0ZW0ucHJldmlvdXMubmV4dCA9IGl0ZW07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuaXRlbXNbbm9kZS5pZF0gPSBpdGVtO1xyXG5cdFx0XHR0aGlzLmVsZW1lbnRzKys7XHJcblxyXG5cdFx0XHRpZiAodGhpcy5maXJzdCA9PT0gbnVsbCkge1xyXG5cdFx0XHRcdHRoaXMuZmlyc3QgPSBpdGVtO1xyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMubnVtUG9pbnRzICs9IG5vZGUubnVtUG9pbnRzO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gdXBkYXRlIGluIGxpc3RcclxuXHRcdFx0aXRlbSA9IHRoaXMuaXRlbXNbbm9kZS5pZF07XHJcblx0XHRcdGlmIChpdGVtLnByZXZpb3VzID09PSBudWxsKSB7XHJcblx0XHRcdFx0Ly8gaGFuZGxlIHRvdWNoIG9uIGZpcnN0IGVsZW1lbnRcclxuXHRcdFx0XHRpZiAoaXRlbS5uZXh0ICE9PSBudWxsKSB7XHJcblx0XHRcdFx0XHR0aGlzLmZpcnN0ID0gaXRlbS5uZXh0O1xyXG5cdFx0XHRcdFx0dGhpcy5maXJzdC5wcmV2aW91cyA9IG51bGw7XHJcblx0XHRcdFx0XHRpdGVtLnByZXZpb3VzID0gdGhpcy5sYXN0O1xyXG5cdFx0XHRcdFx0aXRlbS5uZXh0ID0gbnVsbDtcclxuXHRcdFx0XHRcdHRoaXMubGFzdCA9IGl0ZW07XHJcblx0XHRcdFx0XHRpdGVtLnByZXZpb3VzLm5leHQgPSBpdGVtO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIGlmIChpdGVtLm5leHQgPT09IG51bGwpIHtcclxuXHRcdFx0XHQvLyBoYW5kbGUgdG91Y2ggb24gbGFzdCBlbGVtZW50XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8gaGFuZGxlIHRvdWNoIG9uIGFueSBvdGhlciBlbGVtZW50XHJcblx0XHRcdFx0aXRlbS5wcmV2aW91cy5uZXh0ID0gaXRlbS5uZXh0O1xyXG5cdFx0XHRcdGl0ZW0ubmV4dC5wcmV2aW91cyA9IGl0ZW0ucHJldmlvdXM7XHJcblx0XHRcdFx0aXRlbS5wcmV2aW91cyA9IHRoaXMubGFzdDtcclxuXHRcdFx0XHRpdGVtLm5leHQgPSBudWxsO1xyXG5cdFx0XHRcdHRoaXMubGFzdCA9IGl0ZW07XHJcblx0XHRcdFx0aXRlbS5wcmV2aW91cy5uZXh0ID0gaXRlbTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmVtb3ZlKG5vZGUpe1xyXG5cdFx0bGV0IGxydUl0ZW0gPSB0aGlzLml0ZW1zW25vZGUuaWRdO1xyXG5cdFx0aWYgKGxydUl0ZW0pIHtcclxuXHRcdFx0aWYgKHRoaXMuZWxlbWVudHMgPT09IDEpIHtcclxuXHRcdFx0XHR0aGlzLmZpcnN0ID0gbnVsbDtcclxuXHRcdFx0XHR0aGlzLmxhc3QgPSBudWxsO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGlmICghbHJ1SXRlbS5wcmV2aW91cykge1xyXG5cdFx0XHRcdFx0dGhpcy5maXJzdCA9IGxydUl0ZW0ubmV4dDtcclxuXHRcdFx0XHRcdHRoaXMuZmlyc3QucHJldmlvdXMgPSBudWxsO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAoIWxydUl0ZW0ubmV4dCkge1xyXG5cdFx0XHRcdFx0dGhpcy5sYXN0ID0gbHJ1SXRlbS5wcmV2aW91cztcclxuXHRcdFx0XHRcdHRoaXMubGFzdC5uZXh0ID0gbnVsbDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKGxydUl0ZW0ucHJldmlvdXMgJiYgbHJ1SXRlbS5uZXh0KSB7XHJcblx0XHRcdFx0XHRscnVJdGVtLnByZXZpb3VzLm5leHQgPSBscnVJdGVtLm5leHQ7XHJcblx0XHRcdFx0XHRscnVJdGVtLm5leHQucHJldmlvdXMgPSBscnVJdGVtLnByZXZpb3VzO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZGVsZXRlIHRoaXMuaXRlbXNbbm9kZS5pZF07XHJcblx0XHRcdHRoaXMuZWxlbWVudHMtLTtcclxuXHRcdFx0dGhpcy5udW1Qb2ludHMgLT0gbm9kZS5udW1Qb2ludHM7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXRMUlVJdGVtKCl7XHJcblx0XHRpZiAodGhpcy5maXJzdCA9PT0gbnVsbCkge1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHRcdGxldCBscnUgPSB0aGlzLmZpcnN0O1xyXG5cclxuXHRcdHJldHVybiBscnUubm9kZTtcclxuXHR9XHJcblxyXG5cdHRvU3RyaW5nKCl7XHJcblx0XHRsZXQgc3RyaW5nID0gJ3sgJztcclxuXHRcdGxldCBjdXJyID0gdGhpcy5maXJzdDtcclxuXHRcdHdoaWxlIChjdXJyICE9PSBudWxsKSB7XHJcblx0XHRcdHN0cmluZyArPSBjdXJyLm5vZGUuaWQ7XHJcblx0XHRcdGlmIChjdXJyLm5leHQgIT09IG51bGwpIHtcclxuXHRcdFx0XHRzdHJpbmcgKz0gJywgJztcclxuXHRcdFx0fVxyXG5cdFx0XHRjdXJyID0gY3Vyci5uZXh0O1xyXG5cdFx0fVxyXG5cdFx0c3RyaW5nICs9ICd9JztcclxuXHRcdHN0cmluZyArPSAnKCcgKyB0aGlzLnNpemUoKSArICcpJztcclxuXHRcdHJldHVybiBzdHJpbmc7XHJcblx0fVxyXG5cclxuXHRmcmVlTWVtb3J5KCl7XHJcblx0XHRpZiAodGhpcy5lbGVtZW50cyA8PSAxKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR3aGlsZSAodGhpcy5udW1Qb2ludHMgPiB0aGlzLnBvaW50TG9hZExpbWl0KSB7XHJcblx0XHRcdGxldCBlbGVtZW50ID0gdGhpcy5maXJzdDtcclxuXHRcdFx0bGV0IG5vZGUgPSBlbGVtZW50Lm5vZGU7XHJcblx0XHRcdHRoaXMuZGlzcG9zZURlc2NlbmRhbnRzKG5vZGUpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZGlzcG9zZURlc2NlbmRhbnRzKG5vZGUpe1xyXG5cdFx0bGV0IHN0YWNrID0gW107XHJcblx0XHRzdGFjay5wdXNoKG5vZGUpO1xyXG5cdFx0d2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0bGV0IGN1cnJlbnQgPSBzdGFjay5wb3AoKTtcclxuXHJcblx0XHRcdC8vIGNvbnNvbGUubG9nKGN1cnJlbnQpO1xyXG5cclxuXHRcdFx0Y3VycmVudC5kaXNwb3NlKCk7XHJcblx0XHRcdHRoaXMucmVtb3ZlKGN1cnJlbnQpO1xyXG5cclxuXHRcdFx0Zm9yIChsZXQga2V5IGluIGN1cnJlbnQuY2hpbGRyZW4pIHtcclxuXHRcdFx0XHRpZiAoY3VycmVudC5jaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcblx0XHRcdFx0XHRsZXQgY2hpbGQgPSBjdXJyZW50LmNoaWxkcmVuW2tleV07XHJcblx0XHRcdFx0XHRpZiAoY2hpbGQubG9hZGVkKSB7XHJcblx0XHRcdFx0XHRcdHN0YWNrLnB1c2goY3VycmVudC5jaGlsZHJlbltrZXldKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQge0xSVSwgTFJVSXRlbX07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/LRU.js\n");

/***/ }),

/***/ "./src/PointCloudOctreeGeometry.js":
/*!*****************************************!*\
  !*** ./src/PointCloudOctreeGeometry.js ***!
  \*****************************************/
/*! exports provided: PointCloudOctreeGeometry, PointCloudOctreeGeometryNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PointCloudOctreeGeometry\", function() { return PointCloudOctreeGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PointCloudOctreeGeometryNode\", function() { return PointCloudOctreeGeometryNode; });\n/* harmony import */ var _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loader/PointAttributes.js */ \"./src/loader/PointAttributes.js\");\n/* harmony import */ var _PointCloudTree_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PointCloudTree.js */ \"./src/PointCloudTree.js\");\n/* harmony import */ var _XHRFactory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./XHRFactory.js */ \"./src/XHRFactory.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n// A global count of the number of nodes loading.\r\nlet numNodesLoading = 0;\r\n\r\nclass PointCloudOctreeGeometry{\r\n\r\n\tconstructor(){\r\n\t\tthis.url = null;\r\n\t\tthis.octreeDir = null;\r\n\t\tthis.spacing = 0;\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.root = null;\r\n\t\tthis.nodes = null;\r\n\t\tthis.pointAttributes = null;\r\n\t\tthis.hierarchyStepSize = -1;\r\n\t\tthis.loader = null;\r\n\t}\r\n\t\r\n}\r\n\r\nclass PointCloudOctreeGeometryNode extends _PointCloudTree_js__WEBPACK_IMPORTED_MODULE_1__[\"PointCloudTreeNode\"]{\r\n\r\n\tconstructor(name, pcoGeometry, boundingBox){\r\n\t\tsuper();\r\n\r\n\t\tthis.id = PointCloudOctreeGeometryNode.IDCount++;\r\n\t\tthis.name = name;\r\n\t\tthis.index = parseInt(name.charAt(name.length - 1));\r\n\t\tthis.pcoGeometry = pcoGeometry;\r\n\t\tthis.geometry = null;\r\n\t\tthis.boundingBox = boundingBox;\r\n\t\tthis.boundingSphere = boundingBox.getBoundingSphere();\r\n\t\tthis.children = {};\r\n\t\tthis.numPoints = 0;\r\n\t\tthis.level = null;\r\n\t\tthis.loaded = false;\r\n\t\tthis.oneTimeDisposeHandlers = [];\r\n\r\n\t\tthis.offset = this.boundingBox.min.clone();\r\n\t\t// console.log(\"PointCloudOctreeGeometryNode:\", this.name, this.offset);\r\n\t}\r\n\r\n\t// isGeometryNode(){\r\n\t// \treturn true;\r\n\t// }\r\n\r\n\tgetLevel(){\r\n\t\treturn this.level;\r\n\t}\r\n\r\n\t// isTreeNode(){\r\n\t// \treturn false;\r\n\t// }\r\n\r\n\tisLoaded(){\r\n\t\treturn this.loaded;\r\n\t}\r\n\r\n\tgetBoundingSphere(){\r\n\t\treturn this.boundingSphere;\r\n\t}\r\n\r\n\tgetBoundingBox(){\r\n\t\treturn this.boundingBox;\r\n\t}\r\n\r\n\tgetChildren(){\r\n\t\tlet children = [];\r\n\r\n\t\tfor (let i = 0; i < 8; i++) {\r\n\t\t\tif (this.children[i]) {\r\n\t\t\t\tchildren.push(this.children[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn children;\r\n\t}\r\n\r\n\tgetURL(){\r\n\t\tlet url = '';\r\n\r\n\t\tlet version = this.pcoGeometry.loader.version;\r\n\r\n\t\tif (version.equalOrHigher('1.5')) {\r\n\t\t\turl = this.pcoGeometry.octreeDir + '/' + this.getHierarchyPath() + '/' + this.name;\r\n\t\t} else if (version.equalOrHigher('1.4')) {\r\n\t\t\turl = this.pcoGeometry.octreeDir + '/' + this.name;\r\n\t\t} else if (version.upTo('1.3')) {\r\n\t\t\turl = this.pcoGeometry.octreeDir + '/' + this.name;\r\n\t\t}\r\n\r\n\t\treturn url;\r\n\t}\r\n\r\n\tgetHierarchyPath(){\r\n\t\tlet path = 'r/';\r\n\r\n\t\tlet hierarchyStepSize = this.pcoGeometry.hierarchyStepSize;\r\n\t\tlet indices = this.name.substr(1);\r\n\r\n\t\tlet numParts = Math.floor(indices.length / hierarchyStepSize);\r\n\t\tfor (let i = 0; i < numParts; i++) {\r\n\t\t\tpath += indices.substr(i * hierarchyStepSize, hierarchyStepSize) + '/';\r\n\t\t}\r\n\r\n\t\tpath = path.slice(0, -1);\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\taddChild(child) {\r\n\t\t// console.log(\"PointCloudOctreeGeometryNode\", this.name, \".addChild:\", child.name);\r\n\t\tthis.children[child.index] = child;\r\n\t\tchild.parent = this;\r\n\t}\r\n\r\n\tshouldLoad() {\r\n\t\treturn this.loading !== true && this.loaded !== true;\r\n\t}\r\n\r\n\tload(){\r\n\t\tthis.loading = true;\r\n\t\tif(this.loadPromise)\r\n\t\t\treturn this.loadPromise\r\n\t\tthis.loadPromise = new Promise((resolve, reject)=>{\r\n\t\t// if (this.loading === true || this.loaded === true || Potree.numNodesLoading >= Potree.maxNodesLoading) {\r\n\t\t// \treturn;\r\n\t\t// }\r\n\r\n\r\n\t\t\tnumNodesLoading++;\r\n\r\n\t\t\tif (this.pcoGeometry.loader.version.equalOrHigher('1.5')) {\r\n\t\t\t\tif ((this.level % this.pcoGeometry.hierarchyStepSize) === 0 && this.hasChildren) {\r\n\t\t\t\t\tthis.loadHierachyThenPoints().then(resolve);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.loadPoints().then(resolve);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.loadPoints().then(resolve);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn this.loadPromise;\r\n\t}\r\n\r\n\tloadPoints(){\r\n\t\treturn this.pcoGeometry.loader.load(this);\r\n\t}\r\n\r\n\tparse(data, version) {\r\n\r\n\t\tconst buffers = data.attributeBuffers;\r\n\r\n\t\tconst points = new ZeaEngine.Points();\r\n\t\tfor(let property in buffers){\r\n\t\t\tconst buffer = buffers[property].buffer;\r\n\t\t\tconst propertyId = parseInt(property);\r\n\t\t\tif (propertyId === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_0__[\"PointAttributeNames\"].POSITION_CARTESIAN) {\r\n\t\t\t\tconst attr = points.getVertexAttribute('positions');\r\n\t\t\t\tattr.data = new Float32Array(buffer);\r\n\t\t\t} else if (propertyId === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_0__[\"PointAttributeNames\"].COLOR_PACKED) {\r\n    \t\t\tpoints.addVertexAttribute('colors', ZeaEngine.RGBA, new Uint8Array(buffer))\r\n\t\t\t}else if (propertyId === _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_0__[\"PointAttributeNames\"].INDICES) {\r\n    \t\t\t// points.addVertexAttribute('indices', ZeaEngine.RGBA, new Uint8Array(buffer))\r\n\t\t\t}\r\n\t\t\t/* else if (propertyId === PointAttributeNames.INTENSITY) {\r\n\t\t\t\tgeometry.addAttribute('intensity', new THREE.BufferAttribute(new Float32Array(buffer), 1));\r\n\t\t\t} else if (propertyId === PointAttributeNames.CLASSIFICATION) {\r\n\t\t\t\tgeometry.addAttribute('classification', new THREE.BufferAttribute(new Uint8Array(buffer), 1));\r\n\t\t\t} else if (propertyId === PointAttributeNames.RETURN_NUMBER) {\r\n\t\t\t\tgeometry.addAttribute('returnNumber', new THREE.BufferAttribute(new Uint8Array(buffer), 1));\r\n\t\t\t} else if (propertyId === PointAttributeNames.NUMBER_OF_RETURNS) {\r\n\t\t\t\tgeometry.addAttribute('numberOfReturns', new THREE.BufferAttribute(new Uint8Array(buffer), 1));\r\n\t\t\t} else if (propertyId === PointAttributeNames.SOURCE_ID) {\r\n\t\t\t\tgeometry.addAttribute('pointSourceID', new THREE.BufferAttribute(new Uint16Array(buffer), 1));\r\n\t\t\t} else if (propertyId === PointAttributeNames.NORMAL_SPHEREMAPPED) {\r\n\t\t\t\tgeometry.addAttribute('normal', new THREE.BufferAttribute(new Float32Array(buffer), 3));\r\n\t\t\t} else if (propertyId === PointAttributeNames.NORMAL_OCT16) {\r\n\t\t\t\tgeometry.addAttribute('normal', new THREE.BufferAttribute(new Float32Array(buffer), 3));\r\n\t\t\t} else if (propertyId === PointAttributeNames.NORMAL) {\r\n\t\t\t\tgeometry.addAttribute('normal', new THREE.BufferAttribute(new Float32Array(buffer), 3));\r\n\t\t\t} else if (propertyId === PointAttributeNames.SPACING) {\r\n\t\t\t\tconst bufferAttribute = new THREE.BufferAttribute(new Float32Array(buffer), 1);\r\n\t\t\t\tgeometry.addAttribute('spacing', bufferAttribute);\r\n\t\t\t} else if (propertyId === PointAttributeNames.GPS_TIME) {\r\n\t\t\t\tconst bufferAttribute = new THREE.BufferAttribute(new Float32Array(buffer), 1);\r\n\t\t\t\tgeometry.addAttribute('gpsTime', bufferAttribute);\r\n\r\n\t\t\t\tthis.gpsTime = {\r\n\t\t\t\t\toffset: buffers[property].offset,\r\n\t\t\t\t\trange: buffers[property].range,\r\n\t\t\t\t};\r\n\t\t\t}*/\r\n\t\t\telse {\r\n\t\t\t\tlet name;\r\n\t\t\t\tfor (let key in _loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_0__[\"PointAttributeNames\"]) {\r\n\t\t\t\t\tif (_loader_PointAttributes_js__WEBPACK_IMPORTED_MODULE_0__[\"PointAttributeNames\"][key] == propertyId) {\r\n\t\t\t\t\t\tname = key;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tconsole.warn(\"Unandled Point Attribute:\", name); \r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.points = points;\r\n\t\t// const min = data.tightBoundingBox.min\r\n\t\t// this.offset = new ZeaEngine.Vec3(min[0], min[1], min[2]);\r\n\t\t// console.log(data.tightBoundingBox.min);\r\n\r\n\t\tconst tightBoundingBox = new ZeaEngine.Box3(\r\n\t\t\tnew ZeaEngine.Vec3(...data.tightBoundingBox.min),\r\n\t\t\tnew ZeaEngine.Vec3(...data.tightBoundingBox.max)\r\n\t\t);\r\n\t\ttightBoundingBox.max.subtract(tightBoundingBox.min);\r\n\t\ttightBoundingBox.min.set(0, 0, 0);\r\n\r\n\t\t\r\n\t\tlet pointAttributes = this.pcoGeometry.pointAttributes;\r\n\t\tconst numPoints = data.buffer.byteLength / pointAttributes.byteSize;\r\n\t\t\r\n\t\tthis.numPoints = numPoints;\r\n\t\tthis.mean = new ZeaEngine.Vec3(...data.mean);\r\n\t\tthis.tightBoundingBox = tightBoundingBox;\r\n\t\tthis.loaded = true;\r\n\t\tthis.loading = false;\r\n\t\tthis.estimatedSpacing = data.estimatedSpacing;\r\n\t\tnumNodesLoading--;\r\n\r\n\t\tthis.dispatchEvent('loaded', {\r\n\t\t\tnumPoints\r\n\t\t});\r\n\t}\r\n\r\n\tloadHierachyThenPoints(){\r\n\t\treturn new Promise((resolve, reject)=>{\r\n\t\tlet node = this;\r\n\r\n\t\t// load hierarchy\r\n\t\tlet callback = function (node, hbuffer) {\r\n\t\t\tlet view = new DataView(hbuffer);\r\n\r\n\t\t\tlet stack = [];\r\n\t\t\tlet children = view.getUint8(0);\r\n\t\t\tlet numPoints = view.getUint32(1, true);\r\n\t\t\tnode.numPoints = numPoints;\r\n\t\t\tstack.push({children: children, numPoints: numPoints, name: node.name});\r\n\r\n\t\t\tlet decoded = [];\r\n\r\n\t\t\tlet offset = 5;\r\n\t\t\twhile (stack.length > 0) {\r\n\t\t\t\tlet snode = stack.shift();\r\n\t\t\t\tlet mask = 1;\r\n\t\t\t\tfor (let i = 0; i < 8; i++) {\r\n\t\t\t\t\tif ((snode.children & mask) !== 0) {\r\n\t\t\t\t\t\tlet childName = snode.name + i;\r\n\r\n\t\t\t\t\t\tlet childChildren = view.getUint8(offset);\r\n\t\t\t\t\t\tlet childNumPoints = view.getUint32(offset + 1, true);\r\n\r\n\t\t\t\t\t\tstack.push({children: childChildren, numPoints: childNumPoints, name: childName});\r\n\r\n\t\t\t\t\t\tdecoded.push({children: childChildren, numPoints: childNumPoints, name: childName});\r\n\r\n\t\t\t\t\t\toffset += 5;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmask = mask * 2;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (offset === hbuffer.byteLength) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// console.log(decoded);\r\n\r\n\t\t\tlet nodes = {};\r\n\t\t\tnodes[node.name] = node;\r\n\t\t\tlet pco = node.pcoGeometry;\r\n\r\n\t\t\tfor (let i = 0; i < decoded.length; i++) {\r\n\t\t\t\tlet name = decoded[i].name;\r\n\t\t\t\tlet decodedNumPoints = decoded[i].numPoints;\r\n\t\t\t\tlet index = parseInt(name.charAt(name.length - 1));\r\n\t\t\t\tlet parentName = name.substring(0, name.length - 1);\r\n\t\t\t\tlet parentNode = nodes[parentName];\r\n\t\t\t\tlet level = name.length - 1;\r\n\t\t\t\tlet boundingBox = _utils_js__WEBPACK_IMPORTED_MODULE_3__[\"Utils\"].createChildAABB(parentNode.boundingBox, index);\r\n\r\n\t\t\t\tlet currentNode = new PointCloudOctreeGeometryNode(name, pco, boundingBox);\r\n\t\t\t\tcurrentNode.level = level;\r\n\t\t\t\tcurrentNode.numPoints = decodedNumPoints;\r\n\t\t\t\tcurrentNode.hasChildren = decoded[i].children > 0;\r\n\t\t\t\tcurrentNode.spacing = pco.spacing / Math.pow(2, level);\r\n\t\t\t\tparentNode.addChild(currentNode);\r\n\t\t\t\tnodes[name] = currentNode;\r\n\t\t\t}\r\n\r\n\t\t\tnode.loadPoints().then(()=>{\r\n\t\t\t\tresolve();\r\n\t\t\t});\r\n\t\t};\r\n\t\tif ((node.level % node.pcoGeometry.hierarchyStepSize) === 0) {\r\n\t\t\t// let hurl = node.pcoGeometry.octreeDir + \"/../hierarchy/\" + node.name + \".hrc\";\r\n\t\t\tlet hurl = node.pcoGeometry.octreeDir + '/' + node.getHierarchyPath() + '/' + node.name + '.hrc';\r\n\r\n\t\t\tlet xhr = _XHRFactory_js__WEBPACK_IMPORTED_MODULE_2__[\"XHRFactory\"].createXMLHttpRequest();\r\n\t\t\txhr.open('GET', hurl, true);\r\n\t\t\txhr.responseType = 'arraybuffer';\r\n\t\t\txhr.overrideMimeType('text/plain; charset=x-user-defined');\r\n\t\t\txhr.onreadystatechange = () => {\r\n\t\t\t\tif (xhr.readyState === 4) {\r\n\t\t\t\t\tif (xhr.status === 200 || xhr.status === 0) {\r\n\t\t\t\t\t\tlet hbuffer = xhr.response;\r\n\t\t\t\t\t\tcallback(node, hbuffer);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconst msg = 'Failed to load file! HTTP status: ' + xhr.status + ', file: ' + hurl;\r\n\t\t\t\t\t\tconsole.log(msg);\r\n\t\t\t\t\t\tPotree.numNodesLoading--;\r\n\t\t\t\t\t\treject(msg);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\ttry {\r\n\t\t\t\txhr.send(null);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log('fehler beim laden der punktwolke: ' + e);\r\n\t\t\t\treject('fehler beim laden der punktwolke: ' + e);\r\n\t\t\t}\r\n\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tgetNumPoints(){\r\n\t\treturn this.numPoints;\r\n\t}\r\n\r\n\tdispose(){\r\n\t\tif (this.geometry && this.parent != null) {\r\n\t\t\tthis.geometry.dispose();\r\n\t\t\tthis.geometry = null;\r\n\t\t\tthis.loaded = false;\r\n\t\t\tthis.loadPromise = null;\r\n\r\n\t\t\t// this.dispatchEvent( { type: 'dispose' } );\r\n\t\t\tfor (let i = 0; i < this.oneTimeDisposeHandlers.length; i++) {\r\n\t\t\t\tlet handler = this.oneTimeDisposeHandlers[i];\r\n\t\t\t\thandler();\r\n\t\t\t}\r\n\t\t\tthis.oneTimeDisposeHandlers = [];\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n\r\nPointCloudOctreeGeometryNode.IDCount = 0;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/PointCloudOctreeGeometry.js\n");

/***/ }),

/***/ "./src/PointCloudTree.js":
/*!*******************************!*\
  !*** ./src/PointCloudTree.js ***!
  \*******************************/
/*! exports provided: PointCloudTreeNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PointCloudTreeNode\", function() { return PointCloudTreeNode; });\n/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventDispatcher */ \"./src/EventDispatcher.js\");\n\r\n\r\n\r\n\r\n\r\nclass PointCloudTreeNode extends _EventDispatcher__WEBPACK_IMPORTED_MODULE_0__[\"EventDispatcher\"]{\r\n\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\t// this.needsTransformUpdate = true;// Never used.\r\n\t}\r\n\r\n\tgetChildren () {\r\n\t\tthrow new Error('override function');\r\n\t}\r\n\r\n\tgetBoundingBox () {\r\n\t\tthrow new Error('override function');\r\n\t}\r\n\r\n\tisLoaded () {\r\n\t\tthrow new Error('override function');\r\n\t}\r\n\r\n\tisGeometryNode () {\r\n\t\tthrow new Error('override function');\r\n\t}\r\n\r\n\tisTreeNode () {\r\n\t\tthrow new Error('override function');\r\n\t}\r\n\r\n\tgetLevel () {\r\n\t\tthrow new Error('override function');\r\n\t}\r\n\r\n\tgetBoundingSphere () {\r\n\t\tthrow new Error('override function');\r\n\t}\r\n};\r\n\r\n/*\r\nexport class PointCloudTree extends THREE.Object3D {\r\n\tconstructor () {\r\n\t\tsuper();\r\n\t}\r\n\r\n\tinitialized () {\r\n\t\treturn this.root !== null;\r\n\t}\r\n};\r\n*///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9aZWFQb3RyZWUvLi9zcmMvUG9pbnRDbG91ZFRyZWUuanM/YjRlMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVvRDs7O0FBRzdDLGlDQUFpQyxnRUFBZTs7QUFFdkQ7QUFDQTtBQUNBLHNDQUFzQztBQUN0Qzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9zcmMvUG9pbnRDbG91ZFRyZWUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmltcG9ydCB7IEV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCIuL0V2ZW50RGlzcGF0Y2hlclwiO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBQb2ludENsb3VkVHJlZU5vZGUgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXJ7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCl7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0Ly8gdGhpcy5uZWVkc1RyYW5zZm9ybVVwZGF0ZSA9IHRydWU7Ly8gTmV2ZXIgdXNlZC5cclxuXHR9XHJcblxyXG5cdGdldENoaWxkcmVuICgpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignb3ZlcnJpZGUgZnVuY3Rpb24nKTtcclxuXHR9XHJcblxyXG5cdGdldEJvdW5kaW5nQm94ICgpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignb3ZlcnJpZGUgZnVuY3Rpb24nKTtcclxuXHR9XHJcblxyXG5cdGlzTG9hZGVkICgpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignb3ZlcnJpZGUgZnVuY3Rpb24nKTtcclxuXHR9XHJcblxyXG5cdGlzR2VvbWV0cnlOb2RlICgpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignb3ZlcnJpZGUgZnVuY3Rpb24nKTtcclxuXHR9XHJcblxyXG5cdGlzVHJlZU5vZGUgKCkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdvdmVycmlkZSBmdW5jdGlvbicpO1xyXG5cdH1cclxuXHJcblx0Z2V0TGV2ZWwgKCkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdvdmVycmlkZSBmdW5jdGlvbicpO1xyXG5cdH1cclxuXHJcblx0Z2V0Qm91bmRpbmdTcGhlcmUgKCkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdvdmVycmlkZSBmdW5jdGlvbicpO1xyXG5cdH1cclxufTtcclxuXHJcbi8qXHJcbmV4cG9ydCBjbGFzcyBQb2ludENsb3VkVHJlZSBleHRlbmRzIFRIUkVFLk9iamVjdDNEIHtcclxuXHRjb25zdHJ1Y3RvciAoKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdH1cclxuXHJcblx0aW5pdGlhbGl6ZWQgKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMucm9vdCAhPT0gbnVsbDtcclxuXHR9XHJcbn07XHJcbiovIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/PointCloudTree.js\n");

/***/ }),

/***/ "./src/Version.js":
/*!************************!*\
  !*** ./src/Version.js ***!
  \************************/
/*! exports provided: Version */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Version\", function() { return Version; });\n\r\nclass Version{\r\n\r\n\tconstructor(version){\r\n\t\tthis.version = version;\r\n\t\tlet vmLength = (version.indexOf('.') === -1) ? version.length : version.indexOf('.');\r\n\t\tthis.versionMajor = parseInt(version.substr(0, vmLength));\r\n\t\tthis.versionMinor = parseInt(version.substr(vmLength + 1));\r\n\t\tif (this.versionMinor.length === 0) {\r\n\t\t\tthis.versionMinor = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tnewerThan(version){\r\n\t\tlet v = new Version(version);\r\n\r\n\t\tif (this.versionMajor > v.versionMajor) {\r\n\t\t\treturn true;\r\n\t\t} else if (this.versionMajor === v.versionMajor && this.versionMinor > v.versionMinor) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tequalOrHigher(version){\r\n\t\tlet v = new Version(version);\r\n\r\n\t\tif (this.versionMajor > v.versionMajor) {\r\n\t\t\treturn true;\r\n\t\t} else if (this.versionMajor === v.versionMajor && this.versionMinor >= v.versionMinor) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tupTo(version){\r\n\t\treturn !this.newerThan(version);\r\n\t}\r\n\r\n}\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9aZWFQb3RyZWUvLi9zcmMvVmVyc2lvbi5qcz9kMzY3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vc3JjL1ZlcnNpb24uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuZXhwb3J0IGNsYXNzIFZlcnNpb257XHJcblxyXG5cdGNvbnN0cnVjdG9yKHZlcnNpb24pe1xyXG5cdFx0dGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcclxuXHRcdGxldCB2bUxlbmd0aCA9ICh2ZXJzaW9uLmluZGV4T2YoJy4nKSA9PT0gLTEpID8gdmVyc2lvbi5sZW5ndGggOiB2ZXJzaW9uLmluZGV4T2YoJy4nKTtcclxuXHRcdHRoaXMudmVyc2lvbk1ham9yID0gcGFyc2VJbnQodmVyc2lvbi5zdWJzdHIoMCwgdm1MZW5ndGgpKTtcclxuXHRcdHRoaXMudmVyc2lvbk1pbm9yID0gcGFyc2VJbnQodmVyc2lvbi5zdWJzdHIodm1MZW5ndGggKyAxKSk7XHJcblx0XHRpZiAodGhpcy52ZXJzaW9uTWlub3IubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdHRoaXMudmVyc2lvbk1pbm9yID0gMDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdG5ld2VyVGhhbih2ZXJzaW9uKXtcclxuXHRcdGxldCB2ID0gbmV3IFZlcnNpb24odmVyc2lvbik7XHJcblxyXG5cdFx0aWYgKHRoaXMudmVyc2lvbk1ham9yID4gdi52ZXJzaW9uTWFqb3IpIHtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9IGVsc2UgaWYgKHRoaXMudmVyc2lvbk1ham9yID09PSB2LnZlcnNpb25NYWpvciAmJiB0aGlzLnZlcnNpb25NaW5vciA+IHYudmVyc2lvbk1pbm9yKSB7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZXF1YWxPckhpZ2hlcih2ZXJzaW9uKXtcclxuXHRcdGxldCB2ID0gbmV3IFZlcnNpb24odmVyc2lvbik7XHJcblxyXG5cdFx0aWYgKHRoaXMudmVyc2lvbk1ham9yID4gdi52ZXJzaW9uTWFqb3IpIHtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9IGVsc2UgaWYgKHRoaXMudmVyc2lvbk1ham9yID09PSB2LnZlcnNpb25NYWpvciAmJiB0aGlzLnZlcnNpb25NaW5vciA+PSB2LnZlcnNpb25NaW5vcikge1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHVwVG8odmVyc2lvbil7XHJcblx0XHRyZXR1cm4gIXRoaXMubmV3ZXJUaGFuKHZlcnNpb24pO1xyXG5cdH1cclxuXHJcbn1cclxuXHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/Version.js\n");

/***/ }),

/***/ "./src/WorkerPool.js":
/*!***************************!*\
  !*** ./src/WorkerPool.js ***!
  \***************************/
/*! exports provided: workerPool */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"workerPool\", function() { return workerPool; });\n\r\n\r\nclass WorkerPool{\r\n\tconstructor(){\r\n\t\tthis.workers = {};\r\n\t}\r\n\r\n\tgetWorker(workerCls){\r\n\t\t\r\n\t\tif (!this.workers[workerCls]){\r\n\t\t\tthis.workers[workerCls] = [];\r\n\t\t}\r\n\r\n\t\tif (this.workers[workerCls].length === 0){\r\n\t\t\tlet worker = new workerCls();\r\n\t\t\tthis.workers[workerCls].push(worker);\r\n\t\t}\r\n\r\n\t\tlet worker = this.workers[workerCls].pop();\r\n\r\n\t\treturn worker;\r\n\t}\r\n\r\n\treturnWorker(workerCls, worker){\r\n\t\tthis.workers[workerCls].push(worker);\r\n\t}\r\n};\r\n\r\nconst workerPool = new WorkerPool();\r\n\r\n//Potree.workerPool = new Potree.WorkerPool();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9aZWFQb3RyZWUvLi9zcmMvV29ya2VyUG9vbC5qcz8wOTJkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNxQjtBQUNyQiIsImZpbGUiOiIuL3NyYy9Xb3JrZXJQb29sLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5jbGFzcyBXb3JrZXJQb29se1xyXG5cdGNvbnN0cnVjdG9yKCl7XHJcblx0XHR0aGlzLndvcmtlcnMgPSB7fTtcclxuXHR9XHJcblxyXG5cdGdldFdvcmtlcih3b3JrZXJDbHMpe1xyXG5cdFx0XHJcblx0XHRpZiAoIXRoaXMud29ya2Vyc1t3b3JrZXJDbHNdKXtcclxuXHRcdFx0dGhpcy53b3JrZXJzW3dvcmtlckNsc10gPSBbXTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy53b3JrZXJzW3dvcmtlckNsc10ubGVuZ3RoID09PSAwKXtcclxuXHRcdFx0bGV0IHdvcmtlciA9IG5ldyB3b3JrZXJDbHMoKTtcclxuXHRcdFx0dGhpcy53b3JrZXJzW3dvcmtlckNsc10ucHVzaCh3b3JrZXIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCB3b3JrZXIgPSB0aGlzLndvcmtlcnNbd29ya2VyQ2xzXS5wb3AoKTtcclxuXHJcblx0XHRyZXR1cm4gd29ya2VyO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuV29ya2VyKHdvcmtlckNscywgd29ya2VyKXtcclxuXHRcdHRoaXMud29ya2Vyc1t3b3JrZXJDbHNdLnB1c2god29ya2VyKTtcclxuXHR9XHJcbn07XHJcblxyXG5jb25zdCB3b3JrZXJQb29sID0gbmV3IFdvcmtlclBvb2woKTtcclxuZXhwb3J0IHsgd29ya2VyUG9vbCB9XHJcbi8vUG90cmVlLndvcmtlclBvb2wgPSBuZXcgUG90cmVlLldvcmtlclBvb2woKTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/WorkerPool.js\n");

/***/ }),

/***/ "./src/XHRFactory.js":
/*!***************************!*\
  !*** ./src/XHRFactory.js ***!
  \***************************/
/*! exports provided: XHRFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"XHRFactory\", function() { return XHRFactory; });\n\r\nconst XHRFactory = {\r\n\tconfig: {\r\n\t\twithCredentials: false,\r\n\t\tcustomHeaders: [\r\n\t\t\t{ header: null, value: null }\r\n\t\t]\r\n\t},\r\n\r\n\tcreateXMLHttpRequest: function () {\r\n\t\tlet xhr = new XMLHttpRequest();\r\n\r\n\t\tif (this.config.customHeaders &&\r\n\t\t\tArray.isArray(this.config.customHeaders) &&\r\n\t\t\tthis.config.customHeaders.length > 0) {\r\n\t\t\tlet baseOpen = xhr.open;\r\n\t\t\tlet customHeaders = this.config.customHeaders;\r\n\t\t\txhr.open = function () {\r\n\t\t\t\tbaseOpen.apply(this, [].slice.call(arguments));\r\n\t\t\t\tcustomHeaders.forEach(function (customHeader) {\r\n\t\t\t\t\tif (!!customHeader.header && !!customHeader.value) {\r\n\t\t\t\t\t\txhr.setRequestHeader(customHeader.header, customHeader.value);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn xhr;\r\n\t}\r\n};\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9aZWFQb3RyZWUvLi9zcmMvWEhSRmFjdG9yeS5qcz80YmFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9zcmMvWEhSRmFjdG9yeS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5jb25zdCBYSFJGYWN0b3J5ID0ge1xyXG5cdGNvbmZpZzoge1xyXG5cdFx0d2l0aENyZWRlbnRpYWxzOiBmYWxzZSxcclxuXHRcdGN1c3RvbUhlYWRlcnM6IFtcclxuXHRcdFx0eyBoZWFkZXI6IG51bGwsIHZhbHVlOiBudWxsIH1cclxuXHRcdF1cclxuXHR9LFxyXG5cclxuXHRjcmVhdGVYTUxIdHRwUmVxdWVzdDogZnVuY3Rpb24gKCkge1xyXG5cdFx0bGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG5cclxuXHRcdGlmICh0aGlzLmNvbmZpZy5jdXN0b21IZWFkZXJzICYmXHJcblx0XHRcdEFycmF5LmlzQXJyYXkodGhpcy5jb25maWcuY3VzdG9tSGVhZGVycykgJiZcclxuXHRcdFx0dGhpcy5jb25maWcuY3VzdG9tSGVhZGVycy5sZW5ndGggPiAwKSB7XHJcblx0XHRcdGxldCBiYXNlT3BlbiA9IHhoci5vcGVuO1xyXG5cdFx0XHRsZXQgY3VzdG9tSGVhZGVycyA9IHRoaXMuY29uZmlnLmN1c3RvbUhlYWRlcnM7XHJcblx0XHRcdHhoci5vcGVuID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdGJhc2VPcGVuLmFwcGx5KHRoaXMsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XHJcblx0XHRcdFx0Y3VzdG9tSGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uIChjdXN0b21IZWFkZXIpIHtcclxuXHRcdFx0XHRcdGlmICghIWN1c3RvbUhlYWRlci5oZWFkZXIgJiYgISFjdXN0b21IZWFkZXIudmFsdWUpIHtcclxuXHRcdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoY3VzdG9tSGVhZGVyLmhlYWRlciwgY3VzdG9tSGVhZGVyLnZhbHVlKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4geGhyO1xyXG5cdH1cclxufTtcclxuXHJcbmV4cG9ydCB7WEhSRmFjdG9yeX07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/XHRFactory.js\n");

/***/ }),

/***/ "./src/defines.js":
/*!************************!*\
  !*** ./src/defines.js ***!
  \************************/
/*! exports provided: CameraMode, ClipTask, ClipMethod, MOUSE, PointSizeType, PointShape, PointColorType, TreeType, LengthUnits */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CameraMode\", function() { return CameraMode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ClipTask\", function() { return ClipTask; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ClipMethod\", function() { return ClipMethod; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MOUSE\", function() { return MOUSE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PointSizeType\", function() { return PointSizeType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PointShape\", function() { return PointShape; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PointColorType\", function() { return PointColorType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TreeType\", function() { return TreeType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LengthUnits\", function() { return LengthUnits; });\n/* harmony import */ var _Enum_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Enum.js */ \"./src/Enum.js\");\n\r\n\r\n\r\n\r\nconst CameraMode = {\r\n\tORTHOGRAPHIC: 0,\r\n\tPERSPECTIVE: 1,\r\n\tVR: 2,\r\n};\r\n\r\nconst ClipTask = {\r\n\tNONE: 0,\r\n\tHIGHLIGHT: 1,\r\n\tSHOW_INSIDE: 2,\r\n\tSHOW_OUTSIDE: 3\r\n};\r\n\r\nconst ClipMethod = {\r\n\tINSIDE_ANY: 0,\r\n\tINSIDE_ALL: 1\r\n};\r\n\r\nconst MOUSE = {\r\n\tLEFT: 0b0001,\r\n\tRIGHT: 0b0010,\r\n\tMIDDLE: 0b0100\r\n};\r\n\r\nconst PointSizeType = {\r\n\tFIXED: 0,\r\n\tATTENUATED: 1,\r\n\tADAPTIVE: 2\r\n};\r\n\r\nconst PointShape = {\r\n\tSQUARE: 0,\r\n\tCIRCLE: 1,\r\n\tPARABOLOID: 2\r\n};\r\n\r\nconst PointColorType = {\r\n\tRGB: 0,\r\n\tCOLOR: 1,\r\n\tDEPTH: 2,\r\n\tHEIGHT: 3,\r\n\tELEVATION: 3,\r\n\tINTENSITY: 4,\r\n\tINTENSITY_GRADIENT:\t5,\r\n\tLOD: 6,\r\n\tLEVEL_OF_DETAIL: 6,\r\n\tPOINT_INDEX: 7,\r\n\tCLASSIFICATION: 8,\r\n\tRETURN_NUMBER: 9,\r\n\tSOURCE: 10,\r\n\tNORMAL: 11,\r\n\tPHONG: 12,\r\n\tRGB_HEIGHT: 13,\r\n\tGPS_TIME: 14,\r\n\tMATCAP: 15,\r\n\tCOMPOSITE: 50\r\n};\r\n\r\nconst TreeType = {\r\n\tOCTREE:\t0,\r\n\tKDTREE:\t1\r\n};\r\n\r\nconst LengthUnits = {\r\n\tMETER: {code: 'm', unitspermeter: 1.0},\r\n\tFEET: {code: 'ft', unitspermeter: 3.28084},\r\n\tINCH: {code: '\\u2033', unitspermeter: 39.3701}\r\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9aZWFQb3RyZWUvLi9zcmMvZGVmaW5lcy5qcz83YWU0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUMrQjs7O0FBR3hCO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTs7QUFFTztBQUNQLFNBQVMsOEJBQThCO0FBQ3ZDLFFBQVEsbUNBQW1DO0FBQzNDLFFBQVE7QUFDUiIsImZpbGUiOiIuL3NyYy9kZWZpbmVzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCB7RW51bX0gZnJvbSBcIi4vRW51bS5qc1wiO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBDYW1lcmFNb2RlID0ge1xyXG5cdE9SVEhPR1JBUEhJQzogMCxcclxuXHRQRVJTUEVDVElWRTogMSxcclxuXHRWUjogMixcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBDbGlwVGFzayA9IHtcclxuXHROT05FOiAwLFxyXG5cdEhJR0hMSUdIVDogMSxcclxuXHRTSE9XX0lOU0lERTogMixcclxuXHRTSE9XX09VVFNJREU6IDNcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBDbGlwTWV0aG9kID0ge1xyXG5cdElOU0lERV9BTlk6IDAsXHJcblx0SU5TSURFX0FMTDogMVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IE1PVVNFID0ge1xyXG5cdExFRlQ6IDBiMDAwMSxcclxuXHRSSUdIVDogMGIwMDEwLFxyXG5cdE1JRERMRTogMGIwMTAwXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgUG9pbnRTaXplVHlwZSA9IHtcclxuXHRGSVhFRDogMCxcclxuXHRBVFRFTlVBVEVEOiAxLFxyXG5cdEFEQVBUSVZFOiAyXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgUG9pbnRTaGFwZSA9IHtcclxuXHRTUVVBUkU6IDAsXHJcblx0Q0lSQ0xFOiAxLFxyXG5cdFBBUkFCT0xPSUQ6IDJcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBQb2ludENvbG9yVHlwZSA9IHtcclxuXHRSR0I6IDAsXHJcblx0Q09MT1I6IDEsXHJcblx0REVQVEg6IDIsXHJcblx0SEVJR0hUOiAzLFxyXG5cdEVMRVZBVElPTjogMyxcclxuXHRJTlRFTlNJVFk6IDQsXHJcblx0SU5URU5TSVRZX0dSQURJRU5UOlx0NSxcclxuXHRMT0Q6IDYsXHJcblx0TEVWRUxfT0ZfREVUQUlMOiA2LFxyXG5cdFBPSU5UX0lOREVYOiA3LFxyXG5cdENMQVNTSUZJQ0FUSU9OOiA4LFxyXG5cdFJFVFVSTl9OVU1CRVI6IDksXHJcblx0U09VUkNFOiAxMCxcclxuXHROT1JNQUw6IDExLFxyXG5cdFBIT05HOiAxMixcclxuXHRSR0JfSEVJR0hUOiAxMyxcclxuXHRHUFNfVElNRTogMTQsXHJcblx0TUFUQ0FQOiAxNSxcclxuXHRDT01QT1NJVEU6IDUwXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgVHJlZVR5cGUgPSB7XHJcblx0T0NUUkVFOlx0MCxcclxuXHRLRFRSRUU6XHQxXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgTGVuZ3RoVW5pdHMgPSB7XHJcblx0TUVURVI6IHtjb2RlOiAnbScsIHVuaXRzcGVybWV0ZXI6IDEuMH0sXHJcblx0RkVFVDoge2NvZGU6ICdmdCcsIHVuaXRzcGVybWV0ZXI6IDMuMjgwODR9LFxyXG5cdElOQ0g6IHtjb2RlOiAnXFx1MjAzMycsIHVuaXRzcGVybWV0ZXI6IDM5LjM3MDF9XHJcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/defines.js\n");

/***/ }),

/***/ "./src/loader/BinaryLoader.js":
/*!************************************!*\
  !*** ./src/loader/BinaryLoader.js ***!
  \************************************/
/*! exports provided: BinaryLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BinaryLoader\", function() { return BinaryLoader; });\n/* harmony import */ var _Version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Version.js */ \"./src/Version.js\");\n/* harmony import */ var _XHRFactory_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../XHRFactory.js */ \"./src/XHRFactory.js\");\n/* harmony import */ var _WorkerPool_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../WorkerPool.js */ \"./src/WorkerPool.js\");\n\r\n\r\n\r\n\r\n\r\nconst BinaryDecoderWorker = __webpack_require__(/*! worker-loader?inline!../workers/BinaryDecoderWorker.js */ \"./node_modules/worker-loader/dist/cjs.js?inline!./src/workers/BinaryDecoderWorker.js\")\r\n\r\nclass BinaryLoader{\r\n\r\n\tconstructor(version, boundingBox, scale){\r\n\t\tif (typeof (version) === 'string') {\r\n\t\t\tthis.version = new _Version_js__WEBPACK_IMPORTED_MODULE_0__[\"Version\"](version);\r\n\t\t} else {\r\n\t\t\tthis.version = version;\r\n\t\t}\r\n\r\n\t\tthis.boundingBox = boundingBox;\r\n\t\tthis.scale = scale;\r\n\t}\r\n\r\n\tload(node){\r\n\t\treturn new Promise((resolve, reject)=>{\r\n\t\tif (node.loaded) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet url = node.getURL();\r\n\r\n\t\tif (this.version.equalOrHigher('1.4')) {\r\n\t\t\turl += '.bin';\r\n\t\t}\r\n\r\n\t\tlet xhr = _XHRFactory_js__WEBPACK_IMPORTED_MODULE_1__[\"XHRFactory\"].createXMLHttpRequest();\r\n\t\txhr.open('GET', url, true);\r\n\t\txhr.responseType = 'arraybuffer';\r\n\t\txhr.overrideMimeType('text/plain; charset=x-user-defined');\r\n\t\txhr.onreadystatechange = () => {\r\n\t\t\tif (xhr.readyState === 4) {\r\n\t\t\t\tif((xhr.status === 200 || xhr.status === 0) &&  xhr.response !== null){\r\n\t\t\t\t\tlet buffer = xhr.response;\r\n\t\t\t\t\tthis.parse(node, buffer).then(()=>{\r\n\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(`Failed to load file! HTTP status: ${xhr.status}, file: ${url}`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\ttry {\r\n\t\t\txhr.send(null);\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log('fehler beim laden der punktwolke: ' + e);\r\n\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\tparse(node, buffer){\r\n\t\treturn new Promise((resolve, reject)=>{\r\n\t\tlet pointAttributes = node.pcoGeometry.pointAttributes;\r\n\r\n\t\t// if (this.version.upTo('1.5')) {\r\n\t\t// \tlet numPoints = buffer.byteLength / pointAttributes.byteSize;\r\n\t\t// \tnode.numPoints = numPoints;\r\n\t\t// }\r\n\r\n\t\tlet workerCls = BinaryDecoderWorker;\r\n\t\tlet worker = _WorkerPool_js__WEBPACK_IMPORTED_MODULE_2__[\"workerPool\"].getWorker(workerCls);\r\n\t\tconst version  = this.version;\r\n\t\tworker.onmessage = function (e) {\r\n\t\t\t_WorkerPool_js__WEBPACK_IMPORTED_MODULE_2__[\"workerPool\"].returnWorker(workerCls, worker);\r\n\r\n\t\t\tlet data = e.data;\r\n\t\t\tnode.parse(data, version)\r\n\t\t\tresolve();\r\n\t\t\t/*\r\n\r\n\t\t\tlet buffers = data.attributeBuffers;\r\n\t\t\tlet tightBoundingBox = new THREE.Box3(\r\n\t\t\t\tnew THREE.Vector3().fromArray(data.tightBoundingBox.min),\r\n\t\t\t\tnew THREE.Vector3().fromArray(data.tightBoundingBox.max)\r\n\t\t\t);\r\n\r\n\t\t\tlet geometry = new THREE.BufferGeometry();\r\n\r\n\t\t\tfor(let property in buffers){\r\n\t\t\t\tlet buffer = buffers[property].buffer;\r\n\r\n\t\t\t\tif (parseInt(property) === PointAttributeNames.POSITION_CARTESIAN) {\r\n\t\t\t\t\tgeometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array(buffer), 3));\r\n\t\t\t\t} else if (parseInt(property) === PointAttributeNames.COLOR_PACKED) {\r\n\t\t\t\t\tgeometry.addAttribute('color', new THREE.BufferAttribute(new Uint8Array(buffer), 4, true));\r\n\t\t\t\t} else if (parseInt(property) === PointAttributeNames.INTENSITY) {\r\n\t\t\t\t\tgeometry.addAttribute('intensity', new THREE.BufferAttribute(new Float32Array(buffer), 1));\r\n\t\t\t\t} else if (parseInt(property) === PointAttributeNames.CLASSIFICATION) {\r\n\t\t\t\t\tgeometry.addAttribute('classification', new THREE.BufferAttribute(new Uint8Array(buffer), 1));\r\n\t\t\t\t} else if (parseInt(property) === PointAttributeNames.RETURN_NUMBER) {\r\n\t\t\t\t\tgeometry.addAttribute('returnNumber', new THREE.BufferAttribute(new Uint8Array(buffer), 1));\r\n\t\t\t\t} else if (parseInt(property) === PointAttributeNames.NUMBER_OF_RETURNS) {\r\n\t\t\t\t\tgeometry.addAttribute('numberOfReturns', new THREE.BufferAttribute(new Uint8Array(buffer), 1));\r\n\t\t\t\t} else if (parseInt(property) === PointAttributeNames.SOURCE_ID) {\r\n\t\t\t\t\tgeometry.addAttribute('pointSourceID', new THREE.BufferAttribute(new Uint16Array(buffer), 1));\r\n\t\t\t\t} else if (parseInt(property) === PointAttributeNames.NORMAL_SPHEREMAPPED) {\r\n\t\t\t\t\tgeometry.addAttribute('normal', new THREE.BufferAttribute(new Float32Array(buffer), 3));\r\n\t\t\t\t} else if (parseInt(property) === PointAttributeNames.NORMAL_OCT16) {\r\n\t\t\t\t\tgeometry.addAttribute('normal', new THREE.BufferAttribute(new Float32Array(buffer), 3));\r\n\t\t\t\t} else if (parseInt(property) === PointAttributeNames.NORMAL) {\r\n\t\t\t\t\tgeometry.addAttribute('normal', new THREE.BufferAttribute(new Float32Array(buffer), 3));\r\n\t\t\t\t} else if (parseInt(property) === PointAttributeNames.INDICES) {\r\n\t\t\t\t\tlet bufferAttribute = new THREE.BufferAttribute(new Uint8Array(buffer), 4);\r\n\t\t\t\t\tbufferAttribute.normalized = true;\r\n\t\t\t\t\tgeometry.addAttribute('indices', bufferAttribute);\r\n\t\t\t\t} else if (parseInt(property) === PointAttributeNames.SPACING) {\r\n\t\t\t\t\tlet bufferAttribute = new THREE.BufferAttribute(new Float32Array(buffer), 1);\r\n\t\t\t\t\tgeometry.addAttribute('spacing', bufferAttribute);\r\n\t\t\t\t} else if (parseInt(property) === PointAttributeNames.GPS_TIME) {\r\n\t\t\t\t\tlet bufferAttribute = new THREE.BufferAttribute(new Float32Array(buffer), 1);\r\n\t\t\t\t\tgeometry.addAttribute('gpsTime', bufferAttribute);\r\n\r\n\t\t\t\t\tnode.gpsTime = {\r\n\t\t\t\t\t\toffset: buffers[property].offset,\r\n\t\t\t\t\t\trange: buffers[property].range,\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\ttightBoundingBox.max.sub(tightBoundingBox.min);\r\n\t\t\ttightBoundingBox.min.set(0, 0, 0);\r\n\r\n\t\t\tlet numPoints = e.data.buffer.byteLength / pointAttributes.byteSize;\r\n\t\t\t\r\n\t\t\tnode.numPoints = numPoints;\r\n\t\t\tnode.geometry = geometry;\r\n\t\t\tnode.mean = new THREE.Vector3(...data.mean);\r\n\t\t\tnode.tightBoundingBox = tightBoundingBox;\r\n\t\t\tnode.loaded = true;\r\n\t\t\tnode.loading = false;\r\n\t\t\tnode.estimatedSpacing = data.estimatedSpacing;\r\n\t\t\tPotree.numNodesLoading--;\r\n\t\t\t*/\r\n\t\t};\r\n\r\n\t\tlet message = {\r\n\t\t\tbuffer: buffer,\r\n\t\t\tpointAttributes: pointAttributes,\r\n\t\t\tversion: this.version.version,\r\n\t\t\tmin: [ node.boundingBox.min.x, node.boundingBox.min.y, node.boundingBox.min.z ],\r\n\t\t\toffset: [node.pcoGeometry.offset.x, node.pcoGeometry.offset.y, node.pcoGeometry.offset.z],\r\n\t\t\tscale: this.scale,\r\n\t\t\tspacing: node.spacing,\r\n\t\t\thasChildren: node.hasChildren,\r\n\t\t\tname: node.name\r\n\t\t};\r\n\t\tworker.postMessage(message, [message.buffer]);\r\n\t\t});\r\n\t};\r\n\r\n\t\r\n}\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/loader/BinaryLoader.js\n");

/***/ }),

/***/ "./src/loader/LasLazLoader.js":
/*!************************************!*\
  !*** ./src/loader/LasLazLoader.js ***!
  \************************************/
/*! exports provided: LasLazLoader, LasLazBatcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LasLazLoader\", function() { return LasLazLoader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LasLazBatcher\", function() { return LasLazBatcher; });\n/* harmony import */ var _Version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Version.js */ \"./src/Version.js\");\n/* harmony import */ var _XHRFactory_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../XHRFactory.js */ \"./src/XHRFactory.js\");\n\r\n\r\n\r\n\r\n\r\n/**\r\n * laslaz code taken and adapted from plas.io js-laslaz\r\n *\thttp://plas.io/\r\n *  https://github.com/verma/plasio\r\n *\r\n * Thanks to Uday Verma and Howard Butler\r\n *\r\n */\r\n\r\nclass LasLazLoader {\r\n\r\n\tconstructor (version) {\r\n\t\tif (typeof (version) === 'string') {\r\n\t\t\tthis.version = new _Version_js__WEBPACK_IMPORTED_MODULE_0__[\"Version\"](version);\r\n\t\t} else {\r\n\t\t\tthis.version = version;\r\n\t\t}\r\n\t}\r\n\r\n\tstatic progressCB () {\r\n\r\n\t}\r\n\r\n\tload (node) {\r\n\t\tif (node.loaded) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet pointAttributes = node.pcoGeometry.pointAttributes;\r\n\r\n\t\tlet url = node.getURL();\r\n\r\n\t\tif (this.version.equalOrHigher('1.4')) {\r\n\t\t\turl += '.' + pointAttributes.toLowerCase();\r\n\t\t}\r\n\r\n\t\tlet xhr = _XHRFactory_js__WEBPACK_IMPORTED_MODULE_1__[\"XHRFactory\"].createXMLHttpRequest();\r\n\t\txhr.open('GET', url, true);\r\n\t\txhr.responseType = 'arraybuffer';\r\n\t\txhr.overrideMimeType('text/plain; charset=x-user-defined');\r\n\t\txhr.onreadystatechange = () => {\r\n\t\t\tif (xhr.readyState === 4) {\r\n\t\t\t\tif (xhr.status === 200 || xhr.status === 0) {\r\n\t\t\t\t\tlet buffer = xhr.response;\r\n\t\t\t\t\tthis.parse(node, buffer);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log('Failed to load file! HTTP status: ' + xhr.status + ', file: ' + url);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\txhr.send(null);\r\n\t}\r\n\r\n\tparse(node, buffer){\r\n\t\tlet lf = new LASFile(buffer);\r\n\t\tlet handler = new LasLazBatcher(node);\r\n\r\n\r\n\t\t//\r\n\t\t// DEBUG\r\n\t\t//\r\n\t\t// invoke the laz decompress worker thousands of times to check for memory leaks\r\n\t\t// until 2018/03/05, it tended to run out of memory at ~6230 invocations\r\n\t\t// \r\n\t\t//\r\n\t\t//lf.open()\r\n\t\t//.then( msg => {\r\n\t\t//\tlf.isOpen = true;\r\n\t\t//\treturn lf;\r\n\t\t//}).catch( msg => {\r\n\t\t//\tconsole.log(\"failed to open file. :(\");\t\r\n\t\t//}).then( lf => {\r\n\t\t//\treturn lf.getHeader().then(function (h) {\r\n\t\t//\t\treturn [lf, h];\r\n\t\t//\t});\r\n\t\t//}).then( v => {\r\n\t\t//\tlet lf = v[0];\r\n\t\t//\tlet header = v[1];\r\n\r\n\t\t//\tlf.readData(1000000, 0, 1)\r\n\t\t//\t.then( v => {\r\n\t\t//\t\tconsole.log(\"read\");\r\n\r\n\t\t//\t\tthis.parse(node, buffer);\r\n\t\t//\t}).then (v => {\r\n\t\t//\t\tlf.close();\t\r\n\t\t//\t});\r\n\r\n\t\t//})\r\n\r\n\r\n\r\n\t\tlf.open()\r\n\t\t.then( msg => {\r\n\t\t\tlf.isOpen = true;\r\n\t\t\treturn lf;\r\n\t\t}).catch( msg => {\r\n\t\t\tconsole.log(\"failed to open file. :(\");\t\r\n\t\t}).then( lf => {\r\n\t\t\treturn lf.getHeader().then(function (h) {\r\n\t\t\t\treturn [lf, h];\r\n\t\t\t});\r\n\t\t}).then( v => {\r\n\t\t\tlet lf = v[0];\r\n\t\t\tlet header = v[1];\r\n\r\n\t\t\tlet skip = 1;\r\n\t\t\tlet totalRead = 0;\r\n\t\t\tlet totalToRead = (skip <= 1 ? header.pointsCount : header.pointsCount / skip);\r\n\t\t\tlet reader = function () {\r\n\t\t\t\tlet p = lf.readData(1000000, 0, skip);\r\n\t\t\t\treturn p.then(function (data) {\r\n\t\t\t\t\thandler.push(new LASDecoder(data.buffer,\r\n\t\t\t\t\t\theader.pointsFormatId,\r\n\t\t\t\t\t\theader.pointsStructSize,\r\n\t\t\t\t\t\tdata.count,\r\n\t\t\t\t\t\theader.scale,\r\n\t\t\t\t\t\theader.offset,\r\n\t\t\t\t\t\theader.mins, header.maxs));\r\n\r\n\t\t\t\t\ttotalRead += data.count;\r\n\t\t\t\t\tLasLazLoader.progressCB(totalRead / totalToRead);\r\n\r\n\t\t\t\t\tif (data.hasMoreData) {\r\n\t\t\t\t\t\treturn reader();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\theader.totalRead = totalRead;\r\n\t\t\t\t\t\theader.versionAsString = lf.versionAsString;\r\n\t\t\t\t\t\theader.isCompressed = lf.isCompressed;\r\n\t\t\t\t\t\treturn [lf, header, handler];\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t};\r\n\r\n\t\t\treturn reader();\r\n\t\t}).then( v => {\r\n\t\t\tlet lf = v[0];\r\n\t\t\t// we're done loading this file\r\n\t\t\t//\r\n\t\t\tLasLazLoader.progressCB(1);\r\n\r\n\t\t\t// Close it\r\n\t\t\treturn lf.close().then(function () {\r\n\t\t\t\tlf.isOpen = false;\r\n\r\n\t\t\t\treturn v.slice(1);\r\n\t\t\t}).catch(e => {\r\n\t\t\t\t// If there was a cancellation, make sure the file is closed, if the file is open\r\n\t\t\t\t// close and then fail\r\n\t\t\t\tif (lf.isOpen) {\r\n\t\t\t\t\treturn lf.close().then(function () {\r\n\t\t\t\t\t\tlf.isOpen = false;\r\n\t\t\t\t\t\tthrow e;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tthrow e;\t\r\n\t\t\t});\t\r\n\t\t});\r\n\t}\r\n\r\n\thandle (node, url) {\r\n\r\n\t}\r\n};\r\n\r\nclass LasLazBatcher{\r\n\r\n\tconstructor (node) {\r\n\t\tthis.node = node;\r\n\t}\r\n\r\n\tpush (lasBuffer) {\r\n\t\tlet workerPath = Potree.scriptPath + '/workers/LASDecoderWorker.js';\r\n\t\tlet worker = Potree.workerPool.getWorker(workerPath);\r\n\t\tlet node = this.node;\r\n\r\n\t\tworker.onmessage = (e) => {\r\n\t\t\tlet geometry = new THREE.BufferGeometry();\r\n\t\t\tlet numPoints = lasBuffer.pointsCount;\r\n\r\n\t\t\tlet positions = new Float32Array(e.data.position);\r\n\t\t\tlet colors = new Uint8Array(e.data.color);\r\n\t\t\tlet intensities = new Float32Array(e.data.intensity);\r\n\t\t\tlet classifications = new Uint8Array(e.data.classification);\r\n\t\t\tlet returnNumbers = new Uint8Array(e.data.returnNumber);\r\n\t\t\tlet numberOfReturns = new Uint8Array(e.data.numberOfReturns);\r\n\t\t\tlet pointSourceIDs = new Uint16Array(e.data.pointSourceID);\r\n\t\t\tlet indices = new Uint8Array(e.data.indices);\r\n\r\n\t\t\tgeometry.addAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n\t\t\tgeometry.addAttribute('color', new THREE.BufferAttribute(colors, 4, true));\r\n\t\t\tgeometry.addAttribute('intensity', new THREE.BufferAttribute(intensities, 1));\r\n\t\t\tgeometry.addAttribute('classification', new THREE.BufferAttribute(classifications, 1));\r\n\t\t\tgeometry.addAttribute('returnNumber', new THREE.BufferAttribute(returnNumbers, 1));\r\n\t\t\tgeometry.addAttribute('numberOfReturns', new THREE.BufferAttribute(numberOfReturns, 1));\r\n\t\t\tgeometry.addAttribute('pointSourceID', new THREE.BufferAttribute(pointSourceIDs, 1));\r\n\t\t\t//geometry.addAttribute('normal', new THREE.BufferAttribute(new Float32Array(numPoints * 3), 3));\r\n\t\t\tgeometry.addAttribute('indices', new THREE.BufferAttribute(indices, 4));\r\n\t\t\tgeometry.attributes.indices.normalized = true;\r\n\r\n\t\t\tlet tightBoundingBox = new THREE.Box3(\r\n\t\t\t\tnew THREE.Vector3().fromArray(e.data.tightBoundingBox.min),\r\n\t\t\t\tnew THREE.Vector3().fromArray(e.data.tightBoundingBox.max)\r\n\t\t\t);\r\n\r\n\t\t\tgeometry.boundingBox = this.node.boundingBox;\r\n\t\t\tthis.node.tightBoundingBox = tightBoundingBox;\r\n\r\n\t\t\tthis.node.geometry = geometry;\r\n\t\t\tthis.node.numPoints = numPoints;\r\n\t\t\tthis.node.loaded = true;\r\n\t\t\tthis.node.loading = false;\r\n\t\t\tPotree.numNodesLoading--;\r\n\t\t\tthis.node.mean = new THREE.Vector3(...e.data.mean);\r\n\r\n\t\t\t//debugger;\r\n\r\n\t\t\tPotree.workerPool.returnWorker(workerPath, worker);\r\n\t\t};\r\n\r\n\t\tlet message = {\r\n\t\t\tbuffer: lasBuffer.arrayb,\r\n\t\t\tnumPoints: lasBuffer.pointsCount,\r\n\t\t\tpointSize: lasBuffer.pointSize,\r\n\t\t\tpointFormatID: 2,\r\n\t\t\tscale: lasBuffer.scale,\r\n\t\t\toffset: lasBuffer.offset,\r\n\t\t\tmins: lasBuffer.mins,\r\n\t\t\tmaxs: lasBuffer.maxs\r\n\t\t};\r\n\t\tworker.postMessage(message, [message.buffer]);\r\n\t};\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9aZWFQb3RyZWUvLi9zcmMvbG9hZGVyL0xhc0xhekxvYWRlci5qcz84NjkyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFc0M7QUFDTTs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTzs7QUFFUDtBQUNBO0FBQ0Esc0JBQXNCLG1EQUFPO0FBQzdCLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLFlBQVkseURBQVU7QUFDdEI7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLDRDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxNQUFNO0FBQ04sS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOLGlCO0FBQ0EsTUFBTTs7QUFFTixLQUFLOzs7O0FBSUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsMEM7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsWTtBQUNBLElBQUksRTtBQUNKLEdBQUc7QUFDSDs7QUFFQTs7QUFFQTtBQUNBOztBQUVPOztBQUVQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vc3JjL2xvYWRlci9MYXNMYXpMb2FkZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmltcG9ydCB7VmVyc2lvbn0gZnJvbSBcIi4uL1ZlcnNpb24uanNcIjtcclxuaW1wb3J0IHtYSFJGYWN0b3J5fSBmcm9tIFwiLi4vWEhSRmFjdG9yeS5qc1wiO1xyXG5cclxuLyoqXHJcbiAqIGxhc2xheiBjb2RlIHRha2VuIGFuZCBhZGFwdGVkIGZyb20gcGxhcy5pbyBqcy1sYXNsYXpcclxuICpcdGh0dHA6Ly9wbGFzLmlvL1xyXG4gKiAgaHR0cHM6Ly9naXRodWIuY29tL3Zlcm1hL3BsYXNpb1xyXG4gKlxyXG4gKiBUaGFua3MgdG8gVWRheSBWZXJtYSBhbmQgSG93YXJkIEJ1dGxlclxyXG4gKlxyXG4gKi9cclxuXHJcbmV4cG9ydCBjbGFzcyBMYXNMYXpMb2FkZXIge1xyXG5cclxuXHRjb25zdHJ1Y3RvciAodmVyc2lvbikge1xyXG5cdFx0aWYgKHR5cGVvZiAodmVyc2lvbikgPT09ICdzdHJpbmcnKSB7XHJcblx0XHRcdHRoaXMudmVyc2lvbiA9IG5ldyBWZXJzaW9uKHZlcnNpb24pO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBwcm9ncmVzc0NCICgpIHtcclxuXHJcblx0fVxyXG5cclxuXHRsb2FkIChub2RlKSB7XHJcblx0XHRpZiAobm9kZS5sb2FkZWQpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBwb2ludEF0dHJpYnV0ZXMgPSBub2RlLnBjb0dlb21ldHJ5LnBvaW50QXR0cmlidXRlcztcclxuXHJcblx0XHRsZXQgdXJsID0gbm9kZS5nZXRVUkwoKTtcclxuXHJcblx0XHRpZiAodGhpcy52ZXJzaW9uLmVxdWFsT3JIaWdoZXIoJzEuNCcpKSB7XHJcblx0XHRcdHVybCArPSAnLicgKyBwb2ludEF0dHJpYnV0ZXMudG9Mb3dlckNhc2UoKTtcclxuXHRcdH1cclxuXHJcblx0XHRsZXQgeGhyID0gWEhSRmFjdG9yeS5jcmVhdGVYTUxIdHRwUmVxdWVzdCgpO1xyXG5cdFx0eGhyLm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XHJcblx0XHR4aHIucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcclxuXHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCd0ZXh0L3BsYWluOyBjaGFyc2V0PXgtdXNlci1kZWZpbmVkJyk7XHJcblx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xyXG5cdFx0XHRpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcclxuXHRcdFx0XHRpZiAoeGhyLnN0YXR1cyA9PT0gMjAwIHx8IHhoci5zdGF0dXMgPT09IDApIHtcclxuXHRcdFx0XHRcdGxldCBidWZmZXIgPSB4aHIucmVzcG9uc2U7XHJcblx0XHRcdFx0XHR0aGlzLnBhcnNlKG5vZGUsIGJ1ZmZlcik7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdGYWlsZWQgdG8gbG9hZCBmaWxlISBIVFRQIHN0YXR1czogJyArIHhoci5zdGF0dXMgKyAnLCBmaWxlOiAnICsgdXJsKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0eGhyLnNlbmQobnVsbCk7XHJcblx0fVxyXG5cclxuXHRwYXJzZShub2RlLCBidWZmZXIpe1xyXG5cdFx0bGV0IGxmID0gbmV3IExBU0ZpbGUoYnVmZmVyKTtcclxuXHRcdGxldCBoYW5kbGVyID0gbmV3IExhc0xhekJhdGNoZXIobm9kZSk7XHJcblxyXG5cclxuXHRcdC8vXHJcblx0XHQvLyBERUJVR1xyXG5cdFx0Ly9cclxuXHRcdC8vIGludm9rZSB0aGUgbGF6IGRlY29tcHJlc3Mgd29ya2VyIHRob3VzYW5kcyBvZiB0aW1lcyB0byBjaGVjayBmb3IgbWVtb3J5IGxlYWtzXHJcblx0XHQvLyB1bnRpbCAyMDE4LzAzLzA1LCBpdCB0ZW5kZWQgdG8gcnVuIG91dCBvZiBtZW1vcnkgYXQgfjYyMzAgaW52b2NhdGlvbnNcclxuXHRcdC8vIFxyXG5cdFx0Ly9cclxuXHRcdC8vbGYub3BlbigpXHJcblx0XHQvLy50aGVuKCBtc2cgPT4ge1xyXG5cdFx0Ly9cdGxmLmlzT3BlbiA9IHRydWU7XHJcblx0XHQvL1x0cmV0dXJuIGxmO1xyXG5cdFx0Ly99KS5jYXRjaCggbXNnID0+IHtcclxuXHRcdC8vXHRjb25zb2xlLmxvZyhcImZhaWxlZCB0byBvcGVuIGZpbGUuIDooXCIpO1x0XHJcblx0XHQvL30pLnRoZW4oIGxmID0+IHtcclxuXHRcdC8vXHRyZXR1cm4gbGYuZ2V0SGVhZGVyKCkudGhlbihmdW5jdGlvbiAoaCkge1xyXG5cdFx0Ly9cdFx0cmV0dXJuIFtsZiwgaF07XHJcblx0XHQvL1x0fSk7XHJcblx0XHQvL30pLnRoZW4oIHYgPT4ge1xyXG5cdFx0Ly9cdGxldCBsZiA9IHZbMF07XHJcblx0XHQvL1x0bGV0IGhlYWRlciA9IHZbMV07XHJcblxyXG5cdFx0Ly9cdGxmLnJlYWREYXRhKDEwMDAwMDAsIDAsIDEpXHJcblx0XHQvL1x0LnRoZW4oIHYgPT4ge1xyXG5cdFx0Ly9cdFx0Y29uc29sZS5sb2coXCJyZWFkXCIpO1xyXG5cclxuXHRcdC8vXHRcdHRoaXMucGFyc2Uobm9kZSwgYnVmZmVyKTtcclxuXHRcdC8vXHR9KS50aGVuICh2ID0+IHtcclxuXHRcdC8vXHRcdGxmLmNsb3NlKCk7XHRcclxuXHRcdC8vXHR9KTtcclxuXHJcblx0XHQvL30pXHJcblxyXG5cclxuXHJcblx0XHRsZi5vcGVuKClcclxuXHRcdC50aGVuKCBtc2cgPT4ge1xyXG5cdFx0XHRsZi5pc09wZW4gPSB0cnVlO1xyXG5cdFx0XHRyZXR1cm4gbGY7XHJcblx0XHR9KS5jYXRjaCggbXNnID0+IHtcclxuXHRcdFx0Y29uc29sZS5sb2coXCJmYWlsZWQgdG8gb3BlbiBmaWxlLiA6KFwiKTtcdFxyXG5cdFx0fSkudGhlbiggbGYgPT4ge1xyXG5cdFx0XHRyZXR1cm4gbGYuZ2V0SGVhZGVyKCkudGhlbihmdW5jdGlvbiAoaCkge1xyXG5cdFx0XHRcdHJldHVybiBbbGYsIGhdO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pLnRoZW4oIHYgPT4ge1xyXG5cdFx0XHRsZXQgbGYgPSB2WzBdO1xyXG5cdFx0XHRsZXQgaGVhZGVyID0gdlsxXTtcclxuXHJcblx0XHRcdGxldCBza2lwID0gMTtcclxuXHRcdFx0bGV0IHRvdGFsUmVhZCA9IDA7XHJcblx0XHRcdGxldCB0b3RhbFRvUmVhZCA9IChza2lwIDw9IDEgPyBoZWFkZXIucG9pbnRzQ291bnQgOiBoZWFkZXIucG9pbnRzQ291bnQgLyBza2lwKTtcclxuXHRcdFx0bGV0IHJlYWRlciA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRsZXQgcCA9IGxmLnJlYWREYXRhKDEwMDAwMDAsIDAsIHNraXApO1xyXG5cdFx0XHRcdHJldHVybiBwLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuXHRcdFx0XHRcdGhhbmRsZXIucHVzaChuZXcgTEFTRGVjb2RlcihkYXRhLmJ1ZmZlcixcclxuXHRcdFx0XHRcdFx0aGVhZGVyLnBvaW50c0Zvcm1hdElkLFxyXG5cdFx0XHRcdFx0XHRoZWFkZXIucG9pbnRzU3RydWN0U2l6ZSxcclxuXHRcdFx0XHRcdFx0ZGF0YS5jb3VudCxcclxuXHRcdFx0XHRcdFx0aGVhZGVyLnNjYWxlLFxyXG5cdFx0XHRcdFx0XHRoZWFkZXIub2Zmc2V0LFxyXG5cdFx0XHRcdFx0XHRoZWFkZXIubWlucywgaGVhZGVyLm1heHMpKTtcclxuXHJcblx0XHRcdFx0XHR0b3RhbFJlYWQgKz0gZGF0YS5jb3VudDtcclxuXHRcdFx0XHRcdExhc0xhekxvYWRlci5wcm9ncmVzc0NCKHRvdGFsUmVhZCAvIHRvdGFsVG9SZWFkKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoZGF0YS5oYXNNb3JlRGF0YSkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVhZGVyKCk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRoZWFkZXIudG90YWxSZWFkID0gdG90YWxSZWFkO1xyXG5cdFx0XHRcdFx0XHRoZWFkZXIudmVyc2lvbkFzU3RyaW5nID0gbGYudmVyc2lvbkFzU3RyaW5nO1xyXG5cdFx0XHRcdFx0XHRoZWFkZXIuaXNDb21wcmVzc2VkID0gbGYuaXNDb21wcmVzc2VkO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gW2xmLCBoZWFkZXIsIGhhbmRsZXJdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0cmV0dXJuIHJlYWRlcigpO1xyXG5cdFx0fSkudGhlbiggdiA9PiB7XHJcblx0XHRcdGxldCBsZiA9IHZbMF07XHJcblx0XHRcdC8vIHdlJ3JlIGRvbmUgbG9hZGluZyB0aGlzIGZpbGVcclxuXHRcdFx0Ly9cclxuXHRcdFx0TGFzTGF6TG9hZGVyLnByb2dyZXNzQ0IoMSk7XHJcblxyXG5cdFx0XHQvLyBDbG9zZSBpdFxyXG5cdFx0XHRyZXR1cm4gbGYuY2xvc2UoKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRsZi5pc09wZW4gPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIHYuc2xpY2UoMSk7XHJcblx0XHRcdH0pLmNhdGNoKGUgPT4ge1xyXG5cdFx0XHRcdC8vIElmIHRoZXJlIHdhcyBhIGNhbmNlbGxhdGlvbiwgbWFrZSBzdXJlIHRoZSBmaWxlIGlzIGNsb3NlZCwgaWYgdGhlIGZpbGUgaXMgb3BlblxyXG5cdFx0XHRcdC8vIGNsb3NlIGFuZCB0aGVuIGZhaWxcclxuXHRcdFx0XHRpZiAobGYuaXNPcGVuKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gbGYuY2xvc2UoKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0bGYuaXNPcGVuID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdHRocm93IGU7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dGhyb3cgZTtcdFxyXG5cdFx0XHR9KTtcdFxyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRoYW5kbGUgKG5vZGUsIHVybCkge1xyXG5cclxuXHR9XHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgTGFzTGF6QmF0Y2hlcntcclxuXHJcblx0Y29uc3RydWN0b3IgKG5vZGUpIHtcclxuXHRcdHRoaXMubm9kZSA9IG5vZGU7XHJcblx0fVxyXG5cclxuXHRwdXNoIChsYXNCdWZmZXIpIHtcclxuXHRcdGxldCB3b3JrZXJQYXRoID0gUG90cmVlLnNjcmlwdFBhdGggKyAnL3dvcmtlcnMvTEFTRGVjb2Rlcldvcmtlci5qcyc7XHJcblx0XHRsZXQgd29ya2VyID0gUG90cmVlLndvcmtlclBvb2wuZ2V0V29ya2VyKHdvcmtlclBhdGgpO1xyXG5cdFx0bGV0IG5vZGUgPSB0aGlzLm5vZGU7XHJcblxyXG5cdFx0d29ya2VyLm9ubWVzc2FnZSA9IChlKSA9PiB7XHJcblx0XHRcdGxldCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xyXG5cdFx0XHRsZXQgbnVtUG9pbnRzID0gbGFzQnVmZmVyLnBvaW50c0NvdW50O1xyXG5cclxuXHRcdFx0bGV0IHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoZS5kYXRhLnBvc2l0aW9uKTtcclxuXHRcdFx0bGV0IGNvbG9ycyA9IG5ldyBVaW50OEFycmF5KGUuZGF0YS5jb2xvcik7XHJcblx0XHRcdGxldCBpbnRlbnNpdGllcyA9IG5ldyBGbG9hdDMyQXJyYXkoZS5kYXRhLmludGVuc2l0eSk7XHJcblx0XHRcdGxldCBjbGFzc2lmaWNhdGlvbnMgPSBuZXcgVWludDhBcnJheShlLmRhdGEuY2xhc3NpZmljYXRpb24pO1xyXG5cdFx0XHRsZXQgcmV0dXJuTnVtYmVycyA9IG5ldyBVaW50OEFycmF5KGUuZGF0YS5yZXR1cm5OdW1iZXIpO1xyXG5cdFx0XHRsZXQgbnVtYmVyT2ZSZXR1cm5zID0gbmV3IFVpbnQ4QXJyYXkoZS5kYXRhLm51bWJlck9mUmV0dXJucyk7XHJcblx0XHRcdGxldCBwb2ludFNvdXJjZUlEcyA9IG5ldyBVaW50MTZBcnJheShlLmRhdGEucG9pbnRTb3VyY2VJRCk7XHJcblx0XHRcdGxldCBpbmRpY2VzID0gbmV3IFVpbnQ4QXJyYXkoZS5kYXRhLmluZGljZXMpO1xyXG5cclxuXHRcdFx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUocG9zaXRpb25zLCAzKSk7XHJcblx0XHRcdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgnY29sb3InLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGNvbG9ycywgNCwgdHJ1ZSkpO1xyXG5cdFx0XHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoJ2ludGVuc2l0eScsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoaW50ZW5zaXRpZXMsIDEpKTtcclxuXHRcdFx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCdjbGFzc2lmaWNhdGlvbicsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoY2xhc3NpZmljYXRpb25zLCAxKSk7XHJcblx0XHRcdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgncmV0dXJuTnVtYmVyJywgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShyZXR1cm5OdW1iZXJzLCAxKSk7XHJcblx0XHRcdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgnbnVtYmVyT2ZSZXR1cm5zJywgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShudW1iZXJPZlJldHVybnMsIDEpKTtcclxuXHRcdFx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCdwb2ludFNvdXJjZUlEJywgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShwb2ludFNvdXJjZUlEcywgMSkpO1xyXG5cdFx0XHQvL2dlb21ldHJ5LmFkZEF0dHJpYnV0ZSgnbm9ybWFsJywgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgRmxvYXQzMkFycmF5KG51bVBvaW50cyAqIDMpLCAzKSk7XHJcblx0XHRcdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgnaW5kaWNlcycsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoaW5kaWNlcywgNCkpO1xyXG5cdFx0XHRnZW9tZXRyeS5hdHRyaWJ1dGVzLmluZGljZXMubm9ybWFsaXplZCA9IHRydWU7XHJcblxyXG5cdFx0XHRsZXQgdGlnaHRCb3VuZGluZ0JveCA9IG5ldyBUSFJFRS5Cb3gzKFxyXG5cdFx0XHRcdG5ldyBUSFJFRS5WZWN0b3IzKCkuZnJvbUFycmF5KGUuZGF0YS50aWdodEJvdW5kaW5nQm94Lm1pbiksXHJcblx0XHRcdFx0bmV3IFRIUkVFLlZlY3RvcjMoKS5mcm9tQXJyYXkoZS5kYXRhLnRpZ2h0Qm91bmRpbmdCb3gubWF4KVxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdFx0Z2VvbWV0cnkuYm91bmRpbmdCb3ggPSB0aGlzLm5vZGUuYm91bmRpbmdCb3g7XHJcblx0XHRcdHRoaXMubm9kZS50aWdodEJvdW5kaW5nQm94ID0gdGlnaHRCb3VuZGluZ0JveDtcclxuXHJcblx0XHRcdHRoaXMubm9kZS5nZW9tZXRyeSA9IGdlb21ldHJ5O1xyXG5cdFx0XHR0aGlzLm5vZGUubnVtUG9pbnRzID0gbnVtUG9pbnRzO1xyXG5cdFx0XHR0aGlzLm5vZGUubG9hZGVkID0gdHJ1ZTtcclxuXHRcdFx0dGhpcy5ub2RlLmxvYWRpbmcgPSBmYWxzZTtcclxuXHRcdFx0UG90cmVlLm51bU5vZGVzTG9hZGluZy0tO1xyXG5cdFx0XHR0aGlzLm5vZGUubWVhbiA9IG5ldyBUSFJFRS5WZWN0b3IzKC4uLmUuZGF0YS5tZWFuKTtcclxuXHJcblx0XHRcdC8vZGVidWdnZXI7XHJcblxyXG5cdFx0XHRQb3RyZWUud29ya2VyUG9vbC5yZXR1cm5Xb3JrZXIod29ya2VyUGF0aCwgd29ya2VyKTtcclxuXHRcdH07XHJcblxyXG5cdFx0bGV0IG1lc3NhZ2UgPSB7XHJcblx0XHRcdGJ1ZmZlcjogbGFzQnVmZmVyLmFycmF5YixcclxuXHRcdFx0bnVtUG9pbnRzOiBsYXNCdWZmZXIucG9pbnRzQ291bnQsXHJcblx0XHRcdHBvaW50U2l6ZTogbGFzQnVmZmVyLnBvaW50U2l6ZSxcclxuXHRcdFx0cG9pbnRGb3JtYXRJRDogMixcclxuXHRcdFx0c2NhbGU6IGxhc0J1ZmZlci5zY2FsZSxcclxuXHRcdFx0b2Zmc2V0OiBsYXNCdWZmZXIub2Zmc2V0LFxyXG5cdFx0XHRtaW5zOiBsYXNCdWZmZXIubWlucyxcclxuXHRcdFx0bWF4czogbGFzQnVmZmVyLm1heHNcclxuXHRcdH07XHJcblx0XHR3b3JrZXIucG9zdE1lc3NhZ2UobWVzc2FnZSwgW21lc3NhZ2UuYnVmZmVyXSk7XHJcblx0fTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/loader/LasLazLoader.js\n");

/***/ }),

/***/ "./src/loader/POCLoader.js":
/*!*********************************!*\
  !*** ./src/loader/POCLoader.js ***!
  \*********************************/
/*! exports provided: POCLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"POCLoader\", function() { return POCLoader; });\n/* harmony import */ var _PointCloudOctreeGeometry_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../PointCloudOctreeGeometry.js */ \"./src/PointCloudOctreeGeometry.js\");\n/* harmony import */ var _Version_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Version.js */ \"./src/Version.js\");\n/* harmony import */ var _XHRFactory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../XHRFactory.js */ \"./src/XHRFactory.js\");\n/* harmony import */ var _LasLazLoader_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LasLazLoader.js */ \"./src/loader/LasLazLoader.js\");\n/* harmony import */ var _BinaryLoader_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./BinaryLoader.js */ \"./src/loader/BinaryLoader.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils.js */ \"./src/utils.js\");\n/* harmony import */ var _PointAttributes_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./PointAttributes.js */ \"./src/loader/PointAttributes.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass POCLoader {\r\n\r\n\tstatic load(url, callback){\r\n\t\ttry {\r\n\t\t\tlet pco = new _PointCloudOctreeGeometry_js__WEBPACK_IMPORTED_MODULE_0__[\"PointCloudOctreeGeometry\"]();\r\n\t\t\tpco.url = url;\r\n\t\t\tlet xhr = _XHRFactory_js__WEBPACK_IMPORTED_MODULE_2__[\"XHRFactory\"].createXMLHttpRequest();\r\n\t\t\txhr.open('GET', url, true);\r\n\r\n\t\t\txhr.onreadystatechange = function () {\r\n\t\t\t\tif (xhr.readyState === 4 && (xhr.status === 200 || xhr.status === 0)) {\r\n\t\t\t\t\tlet fMno = JSON.parse(xhr.responseText);\r\n\r\n\t\t\t\t\tlet version = new _Version_js__WEBPACK_IMPORTED_MODULE_1__[\"Version\"](fMno.version);\r\n\r\n\t\t\t\t\t// assume octreeDir is absolute if it starts with http\r\n\t\t\t\t\tif (fMno.octreeDir.indexOf('http') === 0) {\r\n\t\t\t\t\t\tpco.octreeDir = fMno.octreeDir;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tpco.octreeDir = url + '/../' + fMno.octreeDir;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpco.numPoints = fMno.points;\r\n\t\t\t\t\tpco.spacing = fMno.spacing;\r\n\t\t\t\t\tpco.hierarchyStepSize = fMno.hierarchyStepSize;\r\n\r\n\t\t\t\t\tpco.pointAttributes = fMno.pointAttributes;\r\n\r\n\t\t\t\t\tlet min = new ZeaEngine.Vec3(fMno.boundingBox.lx, fMno.boundingBox.ly, fMno.boundingBox.lz);\r\n\t\t\t\t\tlet max = new ZeaEngine.Vec3(fMno.boundingBox.ux, fMno.boundingBox.uy, fMno.boundingBox.uz);\r\n\t\t\t\t\tlet boundingBox = new ZeaEngine.Box3(min, max);\r\n\t\t\t\t\tlet tightBoundingBox = boundingBox.clone();\r\n\r\n\t\t\t\t\tif (fMno.tightBoundingBox) {\r\n\t\t\t\t\t\ttightBoundingBox.min.set(fMno.tightBoundingBox.lx, fMno.tightBoundingBox.ly, fMno.tightBoundingBox.lz);\r\n\t\t\t\t\t\ttightBoundingBox.max.set(fMno.tightBoundingBox.ux, fMno.tightBoundingBox.uy, fMno.tightBoundingBox.uz);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet offset = min.clone();\r\n\r\n\t\t\t\t\tboundingBox.min.subtractInPlace(offset);\r\n\t\t\t\t\tboundingBox.max.subtractInPlace(offset);\r\n\r\n\t\t\t\t\ttightBoundingBox.min.subtractInPlace(offset);\r\n\t\t\t\t\ttightBoundingBox.max.subtractInPlace(offset);\r\n\r\n\t\t\t\t\tpco.projection = fMno.projection;\r\n\t\t\t\t\tpco.boundingBox = boundingBox;\r\n\t\t\t\t\tpco.tightBoundingBox = tightBoundingBox;\r\n\t\t\t\t\tpco.boundingSphere = boundingBox.getBoundingSphere();\r\n\t\t\t\t\tpco.tightBoundingSphere = tightBoundingBox.getBoundingSphere();\r\n\t\t\t\t\tpco.offset = offset;\r\n\t\t\t\t\tif (fMno.pointAttributes === 'LAS') {\r\n\t\t\t\t\t\tpco.loader = new _LasLazLoader_js__WEBPACK_IMPORTED_MODULE_3__[\"LasLazLoader\"](fMno.version);\r\n\t\t\t\t\t} else if (fMno.pointAttributes === 'LAZ') {\r\n\t\t\t\t\t\tpco.loader = new _LasLazLoader_js__WEBPACK_IMPORTED_MODULE_3__[\"LasLazLoader\"](fMno.version);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tpco.loader = new _BinaryLoader_js__WEBPACK_IMPORTED_MODULE_4__[\"BinaryLoader\"](fMno.version, boundingBox, fMno.scale);\r\n\t\t\t\t\t\tpco.pointAttributes = new _PointAttributes_js__WEBPACK_IMPORTED_MODULE_6__[\"PointAttributes\"](pco.pointAttributes);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet nodes = {};\r\n\r\n\t\t\t\t\t{ // load root\r\n\t\t\t\t\t\tlet name = 'r';\r\n\r\n\t\t\t\t\t\tlet root = new _PointCloudOctreeGeometry_js__WEBPACK_IMPORTED_MODULE_0__[\"PointCloudOctreeGeometryNode\"](name, pco, boundingBox);\r\n\t\t\t\t\t\troot.level = 0;\r\n\t\t\t\t\t\troot.hasChildren = true;\r\n\t\t\t\t\t\troot.spacing = pco.spacing;\r\n\t\t\t\t\t\tif (version.upTo('1.5')) {\r\n\t\t\t\t\t\t\troot.numPoints = fMno.hierarchy[0][1];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\troot.numPoints = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tpco.root = root;\r\n\t\t\t\t\t\tpco.root.load();\r\n\t\t\t\t\t\tnodes[name] = root;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// load remaining hierarchy\r\n\t\t\t\t\tif (version.upTo('1.4')) {\r\n\t\t\t\t\t\tfor (let i = 1; i < fMno.hierarchy.length; i++) {\r\n\t\t\t\t\t\t\tlet name = fMno.hierarchy[i][0];\r\n\t\t\t\t\t\t\tlet numPoints = fMno.hierarchy[i][1];\r\n\t\t\t\t\t\t\tlet index = parseInt(name.charAt(name.length - 1));\r\n\t\t\t\t\t\t\tlet parentName = name.substring(0, name.length - 1);\r\n\t\t\t\t\t\t\tlet parentNode = nodes[parentName];\r\n\t\t\t\t\t\t\tlet level = name.length - 1;\r\n\t\t\t\t\t\t\t//let boundingBox = POCLoader.createChildAABB(parentNode.boundingBox, index);\r\n\t\t\t\t\t\t\tlet boundingBox = _utils_js__WEBPACK_IMPORTED_MODULE_5__[\"Utils\"].createChildAABB(parentNode.boundingBox, index);\r\n\r\n\t\t\t\t\t\t\tlet node = new _PointCloudOctreeGeometry_js__WEBPACK_IMPORTED_MODULE_0__[\"PointCloudOctreeGeometryNode\"](name, pco, boundingBox);\r\n\t\t\t\t\t\t\tnode.level = level;\r\n\t\t\t\t\t\t\tnode.numPoints = numPoints;\r\n\t\t\t\t\t\t\tnode.spacing = pco.spacing / Math.pow(2, level);\r\n\t\t\t\t\t\t\tparentNode.addChild(node);\r\n\t\t\t\t\t\t\tnodes[name] = node;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpco.nodes = nodes;\r\n\r\n\t\t\t\t\tcallback(pco);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\txhr.send(null);\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(\"loading failed: '\" + url + \"'\");\r\n\t\t\tconsole.log(e);\r\n\r\n\t\t\tcallback();\r\n\t\t}\r\n\t}\r\n\r\n\tloadPointAttributes(mno){\r\n\t\tlet fpa = mno.pointAttributes;\r\n\t\tlet pa = new _PointAttributes_js__WEBPACK_IMPORTED_MODULE_6__[\"PointAttributes\"]();\r\n\r\n\t\tfor (let i = 0; i < fpa.length; i++) {\r\n\t\t\tlet pointAttribute = _PointAttributes_js__WEBPACK_IMPORTED_MODULE_6__[\"PointAttribute\"][fpa[i]];\r\n\t\t\tpa.add(pointAttribute);\r\n\t\t}\r\n\r\n\t\treturn pa;\r\n\t}\r\n\r\n\tcreateChildAABB(aabb, index){\r\n\t\tlet min = aabb.min.clone();\r\n\t\tlet max = aabb.max.clone();\r\n\t\t// let size = new ZeaEngine.Vec3().subVectors(max, min);\r\n\t\tlet size = max.subtract(min);\r\n\r\n\t\tif ((index & 0b0001) > 0) {\r\n\t\t\tmin.z += size.z / 2;\r\n\t\t} else {\r\n\t\t\tmax.z -= size.z / 2;\r\n\t\t}\r\n\r\n\t\tif ((index & 0b0010) > 0) {\r\n\t\t\tmin.y += size.y / 2;\r\n\t\t} else {\r\n\t\t\tmax.y -= size.y / 2;\r\n\t\t}\r\n\r\n\t\tif ((index & 0b0100) > 0) {\r\n\t\t\tmin.x += size.x / 2;\r\n\t\t} else {\r\n\t\t\tmax.x -= size.x / 2;\r\n\t\t}\r\n\r\n\t\treturn new ZeaEngine.Box3(min, max);\r\n\t}\r\n}\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/loader/POCLoader.js\n");

/***/ }),

/***/ "./src/loader/PointAttributes.js":
/*!***************************************!*\
  !*** ./src/loader/PointAttributes.js ***!
  \***************************************/
/*! exports provided: PointAttributeNames, PointAttributeTypes, PointAttribute, PointAttributes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PointAttributeNames\", function() { return PointAttributeNames; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PointAttributeTypes\", function() { return PointAttributeTypes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PointAttribute\", function() { return PointAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PointAttributes\", function() { return PointAttributes; });\n\r\n\r\nconst PointAttributeNames = {\r\n\tPOSITION_CARTESIAN: 0, // float x, y, z;\r\n\tCOLOR_PACKED: 1, // byte r, g, b, a; \tI: [0,1]\r\n\tCOLOR_FLOATS_1: 2, // float r, g, b; \tI: [0,1]\r\n\tCOLOR_FLOATS_255: 3, // float r, g, b; \tI: [0,255]\r\n\tNORMAL_FLOATS: 4, // float x, y, z;\r\n\tFILLER: 5,\r\n\tINTENSITY: 6,\r\n\tCLASSIFICATION: 7,\r\n\tNORMAL_SPHEREMAPPED: 8,\r\n\tNORMAL_OCT16: 9,\r\n\tNORMAL: 10,\r\n\tRETURN_NUMBER: 11,\r\n\tNUMBER_OF_RETURNS: 12,\r\n\tSOURCE_ID: 13,\r\n\tINDICES: 14,\r\n\tSPACING: 15,\r\n\tGPS_TIME: 16,\r\n};\r\n\r\n\r\n/**\r\n * Some types of possible point attribute data formats\r\n *\r\n * @class\r\n */\r\nconst PointAttributeTypes = {\r\n\tDATA_TYPE_DOUBLE: {ordinal: 0, size: 8},\r\n\tDATA_TYPE_FLOAT: {ordinal: 1, size: 4},\r\n\tDATA_TYPE_INT8: {ordinal: 2, size: 1},\r\n\tDATA_TYPE_UINT8: {ordinal: 3, size: 1},\r\n\tDATA_TYPE_INT16: {ordinal: 4, size: 2},\r\n\tDATA_TYPE_UINT16: {ordinal: 5, size: 2},\r\n\tDATA_TYPE_INT32: {ordinal: 6, size: 4},\r\n\tDATA_TYPE_UINT32: {ordinal: 7, size: 4},\r\n\tDATA_TYPE_INT64: {ordinal: 8, size: 8},\r\n\tDATA_TYPE_UINT64: {ordinal: 9, size: 8}\r\n};\r\n\r\nlet i = 0;\r\nfor (let obj in PointAttributeTypes) {\r\n\tPointAttributeTypes[i] = PointAttributeTypes[obj];\r\n\ti++;\r\n}\r\n\r\n\r\n\r\n\r\nclass PointAttribute{\r\n\t\r\n\tconstructor(name, type, numElements){\r\n\t\tthis.name = name;\r\n\t\tthis.type = type;\r\n\t\tthis.numElements = numElements;\r\n\t\tthis.byteSize = this.numElements * this.type.size;\r\n\t}\r\n\r\n};\r\n\r\nPointAttribute.POSITION_CARTESIAN = new PointAttribute(\r\n\tPointAttributeNames.POSITION_CARTESIAN,\r\n\tPointAttributeTypes.DATA_TYPE_FLOAT, 3);\r\n\r\nPointAttribute.RGBA_PACKED = new PointAttribute(\r\n\tPointAttributeNames.COLOR_PACKED,\r\n\tPointAttributeTypes.DATA_TYPE_INT8, 4);\r\n\r\nPointAttribute.COLOR_PACKED = PointAttribute.RGBA_PACKED;\r\n\r\nPointAttribute.RGB_PACKED = new PointAttribute(\r\n\tPointAttributeNames.COLOR_PACKED,\r\n\tPointAttributeTypes.DATA_TYPE_INT8, 3);\r\n\r\nPointAttribute.NORMAL_FLOATS = new PointAttribute(\r\n\tPointAttributeNames.NORMAL_FLOATS,\r\n\tPointAttributeTypes.DATA_TYPE_FLOAT, 3);\r\n\r\nPointAttribute.FILLER_1B = new PointAttribute(\r\n\tPointAttributeNames.FILLER,\r\n\tPointAttributeTypes.DATA_TYPE_UINT8, 1);\r\n\r\nPointAttribute.INTENSITY = new PointAttribute(\r\n\tPointAttributeNames.INTENSITY,\r\n\tPointAttributeTypes.DATA_TYPE_UINT16, 1);\r\n\r\nPointAttribute.CLASSIFICATION = new PointAttribute(\r\n\tPointAttributeNames.CLASSIFICATION,\r\n\tPointAttributeTypes.DATA_TYPE_UINT8, 1);\r\n\r\nPointAttribute.NORMAL_SPHEREMAPPED = new PointAttribute(\r\n\tPointAttributeNames.NORMAL_SPHEREMAPPED,\r\n\tPointAttributeTypes.DATA_TYPE_UINT8, 2);\r\n\r\nPointAttribute.NORMAL_OCT16 = new PointAttribute(\r\n\tPointAttributeNames.NORMAL_OCT16,\r\n\tPointAttributeTypes.DATA_TYPE_UINT8, 2);\r\n\r\nPointAttribute.NORMAL = new PointAttribute(\r\n\tPointAttributeNames.NORMAL,\r\n\tPointAttributeTypes.DATA_TYPE_FLOAT, 3);\r\n\t\r\nPointAttribute.RETURN_NUMBER = new PointAttribute(\r\n\tPointAttributeNames.RETURN_NUMBER,\r\n\tPointAttributeTypes.DATA_TYPE_UINT8, 1);\r\n\t\r\nPointAttribute.NUMBER_OF_RETURNS = new PointAttribute(\r\n\tPointAttributeNames.NUMBER_OF_RETURNS,\r\n\tPointAttributeTypes.DATA_TYPE_UINT8, 1);\r\n\t\r\nPointAttribute.SOURCE_ID = new PointAttribute(\r\n\tPointAttributeNames.SOURCE_ID,\r\n\tPointAttributeTypes.DATA_TYPE_UINT16, 1);\r\n\r\nPointAttribute.INDICES = new PointAttribute(\r\n\tPointAttributeNames.INDICES,\r\n\tPointAttributeTypes.DATA_TYPE_UINT32, 1);\r\n\r\nPointAttribute.SPACING = new PointAttribute(\r\n\tPointAttributeNames.SPACING,\r\n\tPointAttributeTypes.DATA_TYPE_FLOAT, 1);\r\n\r\nPointAttribute.GPS_TIME = new PointAttribute(\r\n\tPointAttributeNames.GPS_TIME,\r\n\tPointAttributeTypes.DATA_TYPE_DOUBLE, 1);\r\n\r\n\r\n\r\nclass PointAttributes{\r\n\r\n\tconstructor(pointAttributes){\r\n\t\tthis.attributes = [];\r\n\t\tthis.byteSize = 0;\r\n\t\tthis.size = 0;\r\n\r\n\t\tif (pointAttributes != null) {\r\n\t\t\tfor (let i = 0; i < pointAttributes.length; i++) {\r\n\t\t\t\tlet pointAttributeName = pointAttributes[i];\r\n\t\t\t\tlet pointAttribute = PointAttribute[pointAttributeName];\r\n\t\t\t\tthis.attributes.push(pointAttribute);\r\n\t\t\t\tthis.byteSize += pointAttribute.byteSize;\r\n\t\t\t\tthis.size++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tadd(pointAttribute){\r\n\t\tthis.attributes.push(pointAttribute);\r\n\t\tthis.byteSize += pointAttribute.byteSize;\r\n\t\tthis.size++;\r\n\t};\r\n\r\n\thasColors(){\r\n\t\tfor (let name in this.attributes) {\r\n\t\t\tlet pointAttribute = this.attributes[name];\r\n\t\t\tif (pointAttribute.name === PointAttributeNames.COLOR_PACKED) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t};\r\n\r\n\thasNormals(){\r\n\t\tfor (let name in this.attributes) {\r\n\t\t\tlet pointAttribute = this.attributes[name];\r\n\t\t\tif (\r\n\t\t\t\tpointAttribute === PointAttribute.NORMAL_SPHEREMAPPED ||\r\n\t\t\t\tpointAttribute === PointAttribute.NORMAL_FLOATS ||\r\n\t\t\t\tpointAttribute === PointAttribute.NORMAL ||\r\n\t\t\t\tpointAttribute === PointAttribute.NORMAL_OCT16) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t};\r\n\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/loader/PointAttributes.js\n");

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/*! exports provided: Utils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Utils\", function() { return Utils; });\n/* harmony import */ var _XHRFactory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./XHRFactory.js */ \"./src/XHRFactory.js\");\n/* harmony import */ var _defines_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./defines.js */ \"./src/defines.js\");\n\r\n\r\n// import {Volume} from \"./utils/Volume.js\";\r\n// import {Profile} from \"./utils/Profile.js\";\r\n// import {Measure} from \"./utils/Measure.js\";\r\n// import {PolygonClipVolume} from \"./utils/PolygonClipVolume.js\";\r\n\r\n\r\n\r\nclass Utils {\r\n\t/*\r\n\tstatic async loadShapefileFeatures (file, callback) {\r\n\t\tlet features = [];\r\n\r\n\t\tlet handleFinish = () => {\r\n\t\t\tcallback(features);\r\n\t\t};\r\n\r\n\t\tlet source = await shapefile.open(file);\r\n\r\n\t\twhile(true){\r\n\t\t\tlet result = await source.read();\r\n\r\n\t\t\tif (result.done) {\r\n\t\t\t\thandleFinish();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (result.value && result.value.type === 'Feature' && result.value.geometry !== undefined) {\r\n\t\t\t\tfeatures.push(result.value);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tstatic toString (value) {\r\n\t\tif (value instanceof THREE.Vector3) {\r\n\t\t\treturn value.x.toFixed(2) + ', ' + value.y.toFixed(2) + ', ' + value.z.toFixed(2);\r\n\t\t} else {\r\n\t\t\treturn '' + value + '';\r\n\t\t}\r\n\t}\r\n\r\n\tstatic normalizeURL (url) {\r\n\t\tlet u = new URL(url);\r\n\r\n\t\treturn u.protocol + '//' + u.hostname + u.pathname.replace(/\\/+/g, '/');\r\n\t};\r\n\r\n\tstatic pathExists (url) {\r\n\t\tlet req = XHRFactory.createXMLHttpRequest();\r\n\t\treq.open('GET', url, false);\r\n\t\treq.send(null);\r\n\t\tif (req.status !== 200) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tstatic debugSphere(parent, position, scale, color){\r\n\t\tlet geometry = new THREE.SphereGeometry(1, 8, 8);\r\n\t\tlet material;\r\n\r\n\t\tif(color !== undefined){\r\n\t\t\tmaterial = new THREE.MeshBasicMaterial({color: color});\r\n\t\t}else{\r\n\t\t\tmaterial = new THREE.MeshNormalMaterial();\r\n\t\t}\r\n\t\tlet sphere = new THREE.Mesh(geometry, material);\r\n\t\tsphere.position.copy(position);\r\n\t\tsphere.scale.set(scale, scale, scale);\r\n\t\tparent.add(sphere);\r\n\t}\r\n\r\n\tstatic debugLine(parent, start, end, color){\r\n\t\tlet material = new THREE.LineBasicMaterial({ color: color }); \r\n\t\tlet geometry = new THREE.Geometry(); \r\n\t\tgeometry.vertices.push( start, end); \r\n\t\tlet tl = new THREE.Line( geometry, material ); \r\n\t\tparent.add(tl);\r\n\t}\r\n\r\n\tstatic debugBox(parent, box, transform = new THREE.Matrix4(), color = 0xFFFF00){\r\n\t\t\r\n\t\tlet vertices = [\r\n\t\t\t[box.min.x, box.min.y, box.min.z],\r\n\t\t\t[box.min.x, box.min.y, box.max.z],\r\n\t\t\t[box.min.x, box.max.y, box.min.z],\r\n\t\t\t[box.min.x, box.max.y, box.max.z],\r\n\r\n\t\t\t[box.max.x, box.min.y, box.min.z],\r\n\t\t\t[box.max.x, box.min.y, box.max.z],\r\n\t\t\t[box.max.x, box.max.y, box.min.z],\r\n\t\t\t[box.max.x, box.max.y, box.max.z],\r\n\t\t].map(v => new THREE.Vector3(...v));\r\n\r\n\t\tlet edges = [\r\n\t\t\t[0, 4], [4, 5], [5, 1], [1, 0],\r\n\t\t\t[2, 6], [6, 7], [7, 3], [3, 2],\r\n\t\t\t[0, 2], [4, 6], [5, 7], [1, 3]\r\n\t\t];\r\n\r\n\t\tlet center = box.getCenter(new THREE.Vector3());\r\n\r\n\t\tlet centroids = [\r\n\t\t\t{position: [box.min.x, center.y, center.z], color: 0xFF0000},\r\n\t\t\t{position: [box.max.x, center.y, center.z], color: 0x880000},\r\n\r\n\t\t\t{position: [center.x, box.min.y, center.z], color: 0x00FF00},\r\n\t\t\t{position: [center.x, box.max.y, center.z], color: 0x008800},\r\n\r\n\t\t\t{position: [center.x, center.y, box.min.z], color: 0x0000FF},\r\n\t\t\t{position: [center.x, center.y, box.max.z], color: 0x000088},\r\n\t\t];\r\n\r\n\t\tfor(let vertex of vertices){\r\n\t\t\tlet pos = vertex.clone().applyMatrix4(transform);\r\n\r\n\t\t\tUtils.debugSphere(parent, pos, 0.1, 0xFF0000);\r\n\t\t}\r\n\r\n\t\tfor(let edge of edges){\r\n\t\t\tlet start = vertices[edge[0]].clone().applyMatrix4(transform);\r\n\t\t\tlet end = vertices[edge[1]].clone().applyMatrix4(transform);\r\n\r\n\t\t\tUtils.debugLine(parent, start, end, color);\r\n\t\t}\r\n\r\n\t\tfor(let centroid of centroids){\r\n\t\t\tlet pos = new THREE.Vector3(...centroid.position).applyMatrix4(transform);\r\n\r\n\t\t\tUtils.debugSphere(parent, pos, 0.1, centroid.color);\r\n\t\t}\r\n\t}\r\n\r\n\tstatic debugPlane(parent, plane, size = 1, color = 0x0000FF){\r\n\r\n\t\tlet planehelper = new THREE.PlaneHelper(plane, size, color);\r\n\r\n\t\tparent.add(planehelper);\r\n\r\n\t}\r\n\t*/\r\n\r\n\t/**\r\n\t * adapted from mhluska at https://github.com/mrdoob/three.js/issues/1561\r\n\t * /\r\n\tstatic computeTransformedBoundingBox (box, transform) {\r\n\t\tlet vertices = [\r\n\t\t\tnew THREE.Vector3(box.min.x, box.min.y, box.min.z).applyMatrix4(transform),\r\n\t\t\tnew THREE.Vector3(box.min.x, box.min.y, box.min.z).applyMatrix4(transform),\r\n\t\t\tnew THREE.Vector3(box.max.x, box.min.y, box.min.z).applyMatrix4(transform),\r\n\t\t\tnew THREE.Vector3(box.min.x, box.max.y, box.min.z).applyMatrix4(transform),\r\n\t\t\tnew THREE.Vector3(box.min.x, box.min.y, box.max.z).applyMatrix4(transform),\r\n\t\t\tnew THREE.Vector3(box.min.x, box.max.y, box.max.z).applyMatrix4(transform),\r\n\t\t\tnew THREE.Vector3(box.max.x, box.max.y, box.min.z).applyMatrix4(transform),\r\n\t\t\tnew THREE.Vector3(box.max.x, box.min.y, box.max.z).applyMatrix4(transform),\r\n\t\t\tnew THREE.Vector3(box.max.x, box.max.y, box.max.z).applyMatrix4(transform)\r\n\t\t];\r\n\r\n\t\tlet boundingBox = new THREE.Box3();\r\n\t\tboundingBox.setFromPoints(vertices);\r\n\r\n\t\treturn boundingBox;\r\n\t};\r\n\r\n\t/**\r\n\t * add separators to large numbers\r\n\t *\r\n\t * @param nStr\r\n\t * @returns\r\n\t * /\r\n\tstatic addCommas (nStr) {\r\n\t\tnStr += '';\r\n\t\tlet x = nStr.split('.');\r\n\t\tlet x1 = x[0];\r\n\t\tlet x2 = x.length > 1 ? '.' + x[1] : '';\r\n\t\tlet rgx = /(\\d+)(\\d{3})/;\r\n\t\twhile (rgx.test(x1)) {\r\n\t\t\tx1 = x1.replace(rgx, '$1' + ',' + '$2');\r\n\t\t}\r\n\t\treturn x1 + x2;\r\n\t};\r\n\r\n\tstatic removeCommas (str) {\r\n\t\treturn str.replace(/,/g, '');\r\n\t}*/\r\n\r\n\t/**\r\n\t * create worker from a string\r\n\t *\r\n\t * code from http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\r\n\t */\r\n\tstatic createWorker (code) {\r\n\t\tlet blob = new Blob([code], {type: 'application/javascript'});\r\n\t\tlet worker = new Worker(URL.createObjectURL(blob));\r\n\r\n\t\treturn worker;\r\n\t};\r\n\t/*\r\n\tstatic moveTo(scene, endPosition, endTarget){\r\n\r\n\t\tlet view = scene.view;\r\n\t\tlet camera = scene.getActiveCamera();\r\n\t\tlet animationDuration = 500;\r\n\t\tlet easing = TWEEN.Easing.Quartic.Out;\r\n\r\n\t\t{ // animate camera position\r\n\t\t\tlet tween = new TWEEN.Tween(view.position).to(endPosition, animationDuration);\r\n\t\t\ttween.easing(easing);\r\n\t\t\ttween.start();\r\n\t\t}\r\n\r\n\t\t{ // animate camera target\r\n\t\t\tlet camTargetDistance = camera.position.distanceTo(endTarget);\r\n\t\t\tlet target = new THREE.Vector3().addVectors(\r\n\t\t\t\tcamera.position,\r\n\t\t\t\tcamera.getWorldDirection(new THREE.Vector3()).clone().multiplyScalar(camTargetDistance)\r\n\t\t\t);\r\n\t\t\tlet tween = new TWEEN.Tween(target).to(endTarget, animationDuration);\r\n\t\t\ttween.easing(easing);\r\n\t\t\ttween.onUpdate(() => {\r\n\t\t\t\tview.lookAt(target);\r\n\t\t\t});\r\n\t\t\ttween.onComplete(() => {\r\n\t\t\t\tview.lookAt(target);\r\n\t\t\t});\r\n\t\t\ttween.start();\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tstatic loadSkybox (path) {\r\n\t\tlet camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 100000);\r\n\t\tcamera.up.set(0, 0, 1);\r\n\t\tlet scene = new THREE.Scene();\r\n\r\n\t\tlet format = '.jpg';\r\n\t\tlet urls = [\r\n\t\t\tpath + 'px' + format, path + 'nx' + format,\r\n\t\t\tpath + 'py' + format, path + 'ny' + format,\r\n\t\t\tpath + 'pz' + format, path + 'nz' + format\r\n\t\t];\r\n\r\n\t\tlet materialArray = [];\r\n\t\t{\r\n\t\t\tfor (let i = 0; i < 6; i++) {\r\n\t\t\t\tlet material = new THREE.MeshBasicMaterial({\r\n\t\t\t\t\tmap: null,\r\n\t\t\t\t\tside: THREE.BackSide,\r\n\t\t\t\t\tdepthTest: false,\r\n\t\t\t\t\tdepthWrite: false,\r\n\t\t\t\t\tcolor: 0x424556\r\n\t\t\t\t});\r\n\r\n\t\t\t\tmaterialArray.push(material);\r\n\r\n\t\t\t\tlet loader = new THREE.TextureLoader();\r\n\t\t\t\tloader.load(urls[i],\r\n\t\t\t\t\tfunction loaded (texture) {\r\n\t\t\t\t\t\tmaterial.map = texture;\r\n\t\t\t\t\t\tmaterial.needsUpdate = true;\r\n\t\t\t\t\t\tmaterial.color.setHex(0xffffff);\r\n\t\t\t\t\t}, function progress (xhr) {\r\n\t\t\t\t\t\t// console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );\r\n\t\t\t\t\t}, function error (xhr) {\r\n\t\t\t\t\t\tconsole.log('An error happened', xhr);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet skyGeometry = new THREE.CubeGeometry(5000, 5000, 5000);\r\n\t\tlet skybox = new THREE.Mesh(skyGeometry, materialArray);\r\n\r\n\t\tscene.add(skybox);\r\n\r\n\t\t// z up\r\n\t\tscene.rotation.x = Math.PI / 2;\r\n\r\n\t\treturn {'camera': camera, 'scene': scene};\r\n\t};\r\n\r\n\tstatic createGrid (width, length, spacing, color) {\r\n\t\tlet material = new THREE.LineBasicMaterial({\r\n\t\t\tcolor: color || 0x888888\r\n\t\t});\r\n\r\n\t\tlet geometry = new THREE.Geometry();\r\n\t\tfor (let i = 0; i <= length; i++) {\r\n\t\t\tgeometry.vertices.push(new THREE.Vector3(-(spacing * width) / 2, i * spacing - (spacing * length) / 2, 0));\r\n\t\t\tgeometry.vertices.push(new THREE.Vector3(+(spacing * width) / 2, i * spacing - (spacing * length) / 2, 0));\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i <= width; i++) {\r\n\t\t\tgeometry.vertices.push(new THREE.Vector3(i * spacing - (spacing * width) / 2, -(spacing * length) / 2, 0));\r\n\t\t\tgeometry.vertices.push(new THREE.Vector3(i * spacing - (spacing * width) / 2, +(spacing * length) / 2, 0));\r\n\t\t}\r\n\r\n\t\tlet line = new THREE.LineSegments(geometry, material, THREE.LinePieces);\r\n\t\tline.receiveShadow = true;\r\n\t\treturn line;\r\n\t}\r\n\r\n\tstatic createBackgroundTexture (width, height) {\r\n\t\tfunction gauss (x, y) {\r\n\t\t\treturn (1 / (2 * Math.PI)) * Math.exp(-(x * x + y * y) / 2);\r\n\t\t};\r\n\r\n\t\t// map.magFilter = THREE.NearestFilter;\r\n\t\tlet size = width * height;\r\n\t\tlet data = new Uint8Array(3 * size);\r\n\r\n\t\tlet chroma = [1, 1.5, 1.7];\r\n\t\tlet max = gauss(0, 0);\r\n\r\n\t\tfor (let x = 0; x < width; x++) {\r\n\t\t\tfor (let y = 0; y < height; y++) {\r\n\t\t\t\tlet u = 2 * (x / width) - 1;\r\n\t\t\t\tlet v = 2 * (y / height) - 1;\r\n\r\n\t\t\t\tlet i = x + width * y;\r\n\t\t\t\tlet d = gauss(2 * u, 2 * v) / max;\r\n\t\t\t\tlet r = (Math.random() + Math.random() + Math.random()) / 3;\r\n\t\t\t\tr = (d * 0.5 + 0.5) * r * 0.03;\r\n\t\t\t\tr = r * 0.4;\r\n\r\n\t\t\t\t// d = Math.pow(d, 0.6);\r\n\r\n\t\t\t\tdata[3 * i + 0] = 255 * (d / 15 + 0.05 + r) * chroma[0];\r\n\t\t\t\tdata[3 * i + 1] = 255 * (d / 15 + 0.05 + r) * chroma[1];\r\n\t\t\t\tdata[3 * i + 2] = 255 * (d / 15 + 0.05 + r) * chroma[2];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet texture = new THREE.DataTexture(data, width, height, THREE.RGBFormat);\r\n\t\ttexture.needsUpdate = true;\r\n\r\n\t\treturn texture;\r\n\t}\r\n\r\n\tstatic getMousePointCloudIntersection (mouse, camera, viewer, pointclouds, params = {}) {\r\n\t\t\r\n\t\tlet renderer = viewer.renderer;\r\n\t\t\r\n\t\tlet nmouse = {\r\n\t\t\tx: (mouse.x / renderer.domElement.clientWidth) * 2 - 1,\r\n\t\t\ty: -(mouse.y / renderer.domElement.clientHeight) * 2 + 1\r\n\t\t};\r\n\r\n\t\tlet pickParams = {};\r\n\r\n\t\tif(params.pickClipped){\r\n\t\t\tpickParams.pickClipped = params.pickClipped;\r\n\t\t}\r\n\r\n\t\tpickParams.x = mouse.x;\r\n\t\tpickParams.y = renderer.domElement.clientHeight - mouse.y;\r\n\r\n\t\tlet raycaster = new THREE.Raycaster();\r\n\t\traycaster.setFromCamera(nmouse, camera);\r\n\t\tlet ray = raycaster.ray;\r\n\r\n\t\tlet selectedPointcloud = null;\r\n\t\tlet closestDistance = Infinity;\r\n\t\tlet closestIntersection = null;\r\n\t\tlet closestPoint = null;\r\n\t\t\r\n\t\tfor(let pointcloud of pointclouds){\r\n\t\t\tlet point = pointcloud.pick(viewer, camera, ray, pickParams);\r\n\t\t\t\r\n\t\t\tif(!point){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tlet distance = camera.position.distanceTo(point.position);\r\n\r\n\t\t\tif (distance < closestDistance) {\r\n\t\t\t\tclosestDistance = distance;\r\n\t\t\t\tselectedPointcloud = pointcloud;\r\n\t\t\t\tclosestIntersection = point.position;\r\n\t\t\t\tclosestPoint = point;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (selectedPointcloud) {\r\n\t\t\treturn {\r\n\t\t\t\tlocation: closestIntersection,\r\n\t\t\t\tdistance: closestDistance,\r\n\t\t\t\tpointcloud: selectedPointcloud,\r\n\t\t\t\tpoint: closestPoint\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tstatic pixelsArrayToImage (pixels, width, height) {\r\n\t\tlet canvas = document.createElement('canvas');\r\n\t\tcanvas.width = width;\r\n\t\tcanvas.height = height;\r\n\r\n\t\tlet context = canvas.getContext('2d');\r\n\r\n\t\tpixels = new pixels.constructor(pixels);\r\n\r\n\t\tfor (let i = 0; i < pixels.length; i++) {\r\n\t\t\tpixels[i * 4 + 3] = 255;\r\n\t\t}\r\n\r\n\t\tlet imageData = context.createImageData(width, height);\r\n\t\timageData.data.set(pixels);\r\n\t\tcontext.putImageData(imageData, 0, 0);\r\n\r\n\t\tlet img = new Image();\r\n\t\timg.src = canvas.toDataURL();\r\n\t\t// img.style.transform = \"scaleY(-1)\";\r\n\r\n\t\treturn img;\r\n\t}\r\n\r\n\tstatic pixelsArrayToDataUrl(pixels, width, height) {\r\n\t\tlet canvas = document.createElement('canvas');\r\n\t\tcanvas.width = width;\r\n\t\tcanvas.height = height;\r\n\r\n\t\tlet context = canvas.getContext('2d');\r\n\r\n\t\tpixels = new pixels.constructor(pixels);\r\n\r\n\t\tfor (let i = 0; i < pixels.length; i++) {\r\n\t\t\tpixels[i * 4 + 3] = 255;\r\n\t\t}\r\n\r\n\t\tlet imageData = context.createImageData(width, height);\r\n\t\timageData.data.set(pixels);\r\n\t\tcontext.putImageData(imageData, 0, 0);\r\n\r\n\t\tlet dataURL = canvas.toDataURL();\r\n\r\n\t\treturn dataURL;\r\n\t}\r\n\r\n\tstatic pixelsArrayToCanvas(pixels, width, height){\r\n\t\tlet canvas = document.createElement('canvas');\r\n\t\tcanvas.width = width;\r\n\t\tcanvas.height = height;\r\n\r\n\t\tlet context = canvas.getContext('2d');\r\n\r\n\t\tpixels = new pixels.constructor(pixels);\r\n\r\n\t\t//for (let i = 0; i < pixels.length; i++) {\r\n\t\t//\tpixels[i * 4 + 3] = 255;\r\n\t\t//}\r\n\r\n\t\t// flip vertically\r\n\t\tlet bytesPerLine = width * 4;\r\n\t\tfor(let i = 0; i < parseInt(height / 2); i++){\r\n\t\t\tlet j = height - i - 1;\r\n\r\n\t\t\tlet lineI = pixels.slice(i * bytesPerLine, i * bytesPerLine + bytesPerLine);\r\n\t\t\tlet lineJ = pixels.slice(j * bytesPerLine, j * bytesPerLine + bytesPerLine);\r\n\t\t\tpixels.set(lineJ, i * bytesPerLine);\r\n\t\t\tpixels.set(lineI, j * bytesPerLine);\r\n\t\t}\r\n\r\n\t\tlet imageData = context.createImageData(width, height);\r\n\t\timageData.data.set(pixels);\r\n\t\tcontext.putImageData(imageData, 0, 0);\r\n\r\n\t\treturn canvas;\r\n\t}\r\n\r\n\tstatic removeListeners(dispatcher, type){\r\n\t\tif (dispatcher._listeners === undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (dispatcher._listeners[ type ]) {\r\n\t\t\tdelete dispatcher._listeners[ type ];\r\n\t\t}\r\n\t}\r\n\r\n\tstatic mouseToRay(mouse, camera, width, height){\r\n\r\n\t\tlet normalizedMouse = {\r\n\t\t\tx: (mouse.x / width) * 2 - 1,\r\n\t\t\ty: -(mouse.y / height) * 2 + 1\r\n\t\t};\r\n\r\n\t\tlet vector = new THREE.Vector3(normalizedMouse.x, normalizedMouse.y, 0.5);\r\n\t\tlet origin = new THREE.Vector3(normalizedMouse.x, normalizedMouse.y, 0);\r\n\t\tvector.unproject(camera);\r\n\t\torigin.unproject(camera);\r\n\t\tlet direction = new THREE.Vector3().subVectors(vector, origin).normalize();\r\n\r\n\t\tlet ray = new THREE.Ray(origin, direction);\r\n\r\n\t\treturn ray;\r\n\t}\r\n\t*/\r\n/*\r\n\tstatic projectedRadius(radius, camera, distance, screenWidth, screenHeight){\r\n\t\tif(camera instanceof THREE.OrthographicCamera){\r\n\t\t\treturn Utils.projectedRadiusOrtho(radius, camera.projectionMatrix, screenWidth, screenHeight);\r\n\t\t}else if(camera instanceof THREE.PerspectiveCamera){\r\n\t\t\treturn Utils.projectedRadiusPerspective(radius, camera.fov * Math.PI / 180, distance, screenHeight);\r\n\t\t}else{\r\n\t\t\tthrow new Error(\"invalid parameters\");\r\n\t\t}\r\n\t}\r\n\r\n\tstatic projectedRadiusPerspective(radius, fov, distance, screenHeight) {\r\n\t\tlet projFactor = (1 / Math.tan(fov / 2)) / distance;\r\n\t\tprojFactor = projFactor * screenHeight / 2;\r\n\r\n\t\treturn radius * projFactor;\r\n\t}\r\n\r\n\tstatic projectedRadiusOrtho(radius, proj, screenWidth, screenHeight) {\r\n\t\tlet p1 = new THREE.Vector4(0);\r\n\t\tlet p2 = new THREE.Vector4(radius);\r\n\r\n\t\tp1.applyMatrix4(proj);\r\n\t\tp2.applyMatrix4(proj);\r\n\t\tp1 = new THREE.Vector3(p1.x, p1.y, p1.z);\r\n\t\tp2 = new THREE.Vector3(p2.x, p2.y, p2.z);\r\n\t\tp1.x = (p1.x + 1.0) * 0.5 * screenWidth;\r\n\t\tp1.y = (p1.y + 1.0) * 0.5 * screenHeight;\r\n\t\tp2.x = (p2.x + 1.0) * 0.5 * screenWidth;\r\n\t\tp2.y = (p2.y + 1.0) * 0.5 * screenHeight;\r\n\t\treturn p1.distanceTo(p2);\r\n\t}\r\n\t\t\r\n\t\t\r\n\tstatic topView(camera, node){\r\n\t\tcamera.position.set(0, 1, 0);\r\n\t\tcamera.rotation.set(-Math.PI / 2, 0, 0);\r\n\t\tcamera.zoomTo(node, 1);\r\n\t}\r\n\r\n\tstatic frontView (camera, node) {\r\n\t\tcamera.position.set(0, 0, 1);\r\n\t\tcamera.rotation.set(0, 0, 0);\r\n\t\tcamera.zoomTo(node, 1);\r\n\t}\r\n\r\n\tstatic leftView (camera, node) {\r\n\t\tcamera.position.set(-1, 0, 0);\r\n\t\tcamera.rotation.set(0, -Math.PI / 2, 0);\r\n\t\tcamera.zoomTo(node, 1);\r\n\t}\r\n\r\n\tstatic rightView (camera, node) {\r\n\t\tcamera.position.set(1, 0, 0);\r\n\t\tcamera.rotation.set(0, Math.PI / 2, 0);\r\n\t\tcamera.zoomTo(node, 1);\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * 0: no intersection\r\n\t * 1: intersection\r\n\t * 2: fully inside\r\n\t * /\r\n\tstatic frustumSphereIntersection (frustum, sphere) {\r\n\t\tlet planes = frustum.planes;\r\n\t\tlet center = sphere.center;\r\n\t\tlet negRadius = -sphere.radius;\r\n\r\n\t\tlet minDistance = Number.MAX_VALUE;\r\n\r\n\t\tfor (let i = 0; i < 6; i++) {\r\n\t\t\tlet distance = planes[ i ].distanceToPoint(center);\r\n\r\n\t\t\tif (distance < negRadius) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\r\n\t\t\tminDistance = Math.min(minDistance, distance);\r\n\t\t}\r\n\r\n\t\treturn (minDistance >= sphere.radius) ? 2 : 1;\r\n\t}\r\n\r\n\t// code taken from three.js\r\n\t// ImageUtils - generateDataTexture()\r\n\tstatic generateDataTexture (width, height, color) {\r\n\t\tlet size = width * height;\r\n\t\tlet data = new Uint8Array(4 * width * height);\r\n\r\n\t\tlet r = Math.floor(color.r * 255);\r\n\t\tlet g = Math.floor(color.g * 255);\r\n\t\tlet b = Math.floor(color.b * 255);\r\n\r\n\t\tfor (let i = 0; i < size; i++) {\r\n\t\t\tdata[ i * 3 ] = r;\r\n\t\t\tdata[ i * 3 + 1 ] = g;\r\n\t\t\tdata[ i * 3 + 2 ] = b;\r\n\t\t}\r\n\r\n\t\tlet texture = new THREE.DataTexture(data, width, height, THREE.RGBAFormat);\r\n\t\ttexture.needsUpdate = true;\r\n\t\ttexture.magFilter = THREE.NearestFilter;\r\n\r\n\t\treturn texture;\r\n\t}\r\n\r\n\t// from http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript\r\n\tstatic getParameterByName (name) {\r\n\t\tname = name.replace(/[[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\r\n\t\tlet regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\r\n\t\tlet results = regex.exec(document.location.search);\r\n\t\treturn results === null ? null : decodeURIComponent(results[1].replace(/\\+/g, ' '));\r\n\t}\r\n\r\n\tstatic setParameter (name, value) {\r\n\t\t// value = encodeURIComponent(value);\r\n\r\n\t\tname = name.replace(/[[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\r\n\t\tlet regex = new RegExp('([\\\\?&])(' + name + '=([^&#]*))');\r\n\t\tlet results = regex.exec(document.location.search);\r\n\r\n\t\tlet url = window.location.href;\r\n\t\tif (results === null) {\r\n\t\t\tif (window.location.search.length === 0) {\r\n\t\t\t\turl = url + '?';\r\n\t\t\t} else {\r\n\t\t\t\turl = url + '&';\r\n\t\t\t}\r\n\r\n\t\t\turl = url + name + '=' + value;\r\n\t\t} else {\r\n\t\t\tlet newValue = name + '=' + value;\r\n\t\t\turl = url.replace(results[2], newValue);\r\n\t\t}\r\n\t\twindow.history.replaceState({}, '', url);\r\n\t}\r\n*/\r\n\tstatic createChildAABB(aabb, index){\r\n\t\tlet min = aabb.min.clone();\r\n\t\tlet max = aabb.max.clone();\r\n\t\tlet size = max.subtract(min);\r\n\r\n\t\tif ((index & 0b0001) > 0) {\r\n\t\t\tmin.z += size.z / 2;\r\n\t\t} else {\r\n\t\t\tmax.z -= size.z / 2;\r\n\t\t}\r\n\r\n\t\tif ((index & 0b0010) > 0) {\r\n\t\t\tmin.y += size.y / 2;\r\n\t\t} else {\r\n\t\t\tmax.y -= size.y / 2;\r\n\t\t}\r\n\r\n\t\tif ((index & 0b0100) > 0) {\r\n\t\t\tmin.x += size.x / 2;\r\n\t\t} else {\r\n\t\t\tmax.x -= size.x / 2;\r\n\t\t}\r\n\r\n\t\treturn new ZeaEngine.Box3(min, max);\r\n\t}\r\n/*\r\n\t// see https://stackoverflow.com/questions/400212/how-do-i-copy-to-the-clipboard-in-javascript\r\n\tstatic clipboardCopy(text){\r\n\t\tlet textArea = document.createElement(\"textarea\");\r\n\r\n\t\ttextArea.style.position = 'fixed';\r\n\t\ttextArea.style.top = 0;\r\n\t\ttextArea.style.left = 0;\r\n\r\n\t\ttextArea.style.width = '2em';\r\n\t\ttextArea.style.height = '2em';\r\n\r\n\t\ttextArea.style.padding = 0;\r\n\r\n\t\ttextArea.style.border = 'none';\r\n\t\ttextArea.style.outline = 'none';\r\n\t\ttextArea.style.boxShadow = 'none';\r\n\r\n\t\ttextArea.style.background = 'transparent';\r\n\r\n\t\ttextArea.value = text;\r\n\r\n\t\tdocument.body.appendChild(textArea);\r\n\r\n\t\ttextArea.select();\r\n\r\n\t\t try {\r\n\t\t\tlet success = document.execCommand('copy');\r\n\t\t\tif(success){\r\n\t\t\t\tconsole.log(\"copied text to clipboard\");\r\n\t\t\t}else{\r\n\t\t\t\tconsole.log(\"copy to clipboard failed\");\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(\"error while trying to copy to clipboard\");\r\n\t\t}\r\n\r\n\t\tdocument.body.removeChild(textArea);\r\n\r\n\t}\r\n\r\n\tstatic getMeasurementIcon(measurement){\r\n\t\tif (measurement instanceof Measure) {\r\n\t\t\tif (measurement.showDistances && !measurement.showArea && !measurement.showAngles) {\r\n\t\t\t\treturn `${Potree.resourcePath}/icons/distance.svg`;\r\n\t\t\t} else if (measurement.showDistances && measurement.showArea && !measurement.showAngles) {\r\n\t\t\t\treturn `${Potree.resourcePath}/icons/area.svg`;\r\n\t\t\t} else if (measurement.maxMarkers === 1) {\r\n\t\t\t\treturn `${Potree.resourcePath}/icons/point.svg`;\r\n\t\t\t} else if (!measurement.showDistances && !measurement.showArea && measurement.showAngles) {\r\n\t\t\t\treturn `${Potree.resourcePath}/icons/angle.png`;\r\n\t\t\t} else if (measurement.showHeight) {\r\n\t\t\t\treturn `${Potree.resourcePath}/icons/height.svg`;\r\n\t\t\t} else {\r\n\t\t\t\treturn `${Potree.resourcePath}/icons/distance.svg`;\r\n\t\t\t}\r\n\t\t} else if (measurement instanceof Profile) {\r\n\t\t\treturn `${Potree.resourcePath}/icons/profile.svg`;\r\n\t\t} else if (measurement instanceof Volume) {\r\n\t\t\treturn `${Potree.resourcePath}/icons/volume.svg`;\r\n\t\t} else if (measurement instanceof PolygonClipVolume) {\r\n\t\t\treturn `${Potree.resourcePath}/icons/clip-polygon.svg`;\r\n\t\t}\r\n\t}\r\n\r\n\tstatic toMaterialID(materialName){\r\n\t\tif (materialName === 'RGB'){\r\n\t\t\treturn PointColorType.RGB;\r\n\t\t} else if (materialName === 'Color') {\r\n\t\t\treturn PointColorType.COLOR;\r\n\t\t} else if (materialName === 'Elevation') {\r\n\t\t\treturn PointColorType.HEIGHT;\r\n\t\t} else if (materialName === 'Intensity') {\r\n\t\t\treturn PointColorType.INTENSITY;\r\n\t\t} else if (materialName === 'Intensity Gradient') {\r\n\t\t\treturn PointColorType.INTENSITY_GRADIENT;\r\n\t\t} else if (materialName === 'Classification') {\r\n\t\t\treturn PointColorType.CLASSIFICATION;\r\n\t\t} else if (materialName === 'Return Number') {\r\n\t\t\treturn PointColorType.RETURN_NUMBER;\r\n\t\t} else if (materialName === 'Source') {\r\n\t\t\treturn PointColorType.SOURCE;\r\n\t\t} else if (materialName === 'Level of Detail') {\r\n\t\t\treturn PointColorType.LOD;\r\n\t\t} else if (materialName === 'Point Index') {\r\n\t\t\treturn PointColorType.POINT_INDEX;\r\n\t\t} else if (materialName === 'Normal') {\r\n\t\t\treturn PointColorType.NORMAL;\r\n\t\t} else if (materialName === 'Phong') {\r\n\t\t\treturn PointColorType.PHONG;\r\n\t\t} else if (materialName === 'Index') {\r\n\t\t\treturn PointColorType.POINT_INDEX;\r\n\t\t} else if (materialName === 'RGB and Elevation') {\r\n\t\t\treturn PointColorType.RGB_HEIGHT;\r\n\t\t} else if (materialName === 'Composite') {\r\n\t\t\treturn PointColorType.COMPOSITE;\r\n\t\t} else if (materialName === 'GPS Time') {\r\n\t\t\treturn PointColorType.GPS_TIME;\r\n\t\t} else if (materialName === 'Matcap') {\r\n\t\t\treturn PointColorType.MATCAP;\r\n\t\t}\r\n\t};\r\n\r\n\r\n\tstatic toMaterialName(materialID) {\r\n\t\tif (materialID === PointColorType.RGB) {\r\n\t\t\treturn 'RGB';\r\n\t\t} else if (materialID === PointColorType.COLOR) {\r\n\t\t\treturn 'Color';\r\n\t\t} else if (materialID === PointColorType.HEIGHT) {\r\n\t\t\treturn 'Elevation';\r\n\t\t} else if (materialID === PointColorType.INTENSITY) {\r\n\t\t\treturn 'Intensity';\r\n\t\t} else if (materialID === PointColorType.INTENSITY_GRADIENT) {\r\n\t\t\treturn 'Intensity Gradient';\r\n\t\t} else if (materialID === PointColorType.CLASSIFICATION) {\r\n\t\t\treturn 'Classification';\r\n\t\t} else if (materialID === PointColorType.RETURN_NUMBER) {\r\n\t\t\treturn 'Return Number';\r\n\t\t} else if (materialID === PointColorType.SOURCE) {\r\n\t\t\treturn 'Source';\r\n\t\t} else if (materialID === PointColorType.LOD) {\r\n\t\t\treturn 'Level of Detail';\r\n\t\t} else if (materialID === PointColorType.NORMAL) {\r\n\t\t\treturn 'Normal';\r\n\t\t} else if (materialID === PointColorType.PHONG) {\r\n\t\t\treturn 'Phong';\r\n\t\t} else if (materialID === PointColorType.POINT_INDEX) {\r\n\t\t\treturn 'Index';\r\n\t\t} else if (materialID === PointColorType.RGB_HEIGHT) {\r\n\t\t\treturn 'RGB and Elevation';\r\n\t\t} else if (materialID === PointColorType.COMPOSITE) {\r\n\t\t\treturn 'Composite';\r\n\t\t} else if (materialID === PointColorType.GPS_TIME) {\r\n\t\t\treturn 'GPS Time';\r\n\t\t} else if (materialID === PointColorType.MATCAP) {\r\n\t\t\treturn 'Matcap';\r\n\t\t}\r\n\t};\r\n*/\r\n}\r\n\r\n// Utils.screenPass = new function () {\r\n// \tthis.screenScene = new THREE.Scene();\r\n// \tthis.screenQuad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2, 0));\r\n// \tthis.screenQuad.material.depthTest = true;\r\n// \tthis.screenQuad.material.depthWrite = true;\r\n// \tthis.screenQuad.material.transparent = true;\r\n// \tthis.screenScene.add(this.screenQuad);\r\n// \tthis.camera = new THREE.Camera();\r\n\r\n// \tthis.render = function (renderer, material, target) {\r\n// \t\tthis.screenQuad.material = material;\r\n\r\n// \t\tif (typeof target === 'undefined') {\r\n// \t\t\trenderer.render(this.screenScene, this.camera);\r\n// \t\t} else {\r\n// \t\t\trenderer.render(this.screenScene, this.camera, target);\r\n// \t\t}\r\n// \t};\r\n// }();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9aZWFQb3RyZWUvLi9zcmMvdXRpbHMuanM/MDI1ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUMyQztBQUMzQyxXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLGtCQUFrQjtBQUNlOzs7QUFHckM7QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJDQUEyQyxhQUFhO0FBQ3hELEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhDQUE4QyxlQUFlLEU7QUFDN0Qsc0M7QUFDQSxzQztBQUNBLGdEO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLElBQUksMkRBQTJEO0FBQy9ELElBQUksMkRBQTJEOztBQUUvRCxJQUFJLDJEQUEyRDtBQUMvRCxJQUFJLDJEQUEyRDs7QUFFL0QsSUFBSSwyREFBMkQ7QUFDL0QsSUFBSSwyREFBMkQ7QUFDL0Q7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLEVBQUU7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsK0JBQStCO0FBQzlEOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixPQUFPO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLFVBQVU7QUFDVjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsaUJBQWlCLGFBQWE7QUFDOUI7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixZQUFZO0FBQzdCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxpQkFBaUIsV0FBVztBQUM1QixrQkFBa0IsWUFBWTtBQUM5QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsdUZBQXVGOztBQUV2Rjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLGlCQUFpQixtQkFBbUI7QUFDcEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsaUJBQWlCLG1CQUFtQjtBQUNwQztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLG1CQUFtQixtQkFBbUI7QUFDdEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLDBCQUEwQjtBQUMxQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxpQkFBaUIsT0FBTztBQUN4Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixVQUFVO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG9CQUFvQjtBQUNsQyxJQUFJO0FBQ0osY0FBYyxvQkFBb0I7QUFDbEMsSUFBSTtBQUNKLGNBQWMsb0JBQW9CO0FBQ2xDLElBQUk7QUFDSixjQUFjLG9CQUFvQjtBQUNsQyxJQUFJO0FBQ0osY0FBYyxvQkFBb0I7QUFDbEMsSUFBSTtBQUNKLGNBQWMsb0JBQW9CO0FBQ2xDO0FBQ0EsR0FBRztBQUNILGFBQWEsb0JBQW9CO0FBQ2pDLEdBQUc7QUFDSCxhQUFhLG9CQUFvQjtBQUNqQyxHQUFHO0FBQ0gsYUFBYSxvQkFBb0I7QUFDakM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxJQUFJIiwiZmlsZSI6Ii4vc3JjL3V0aWxzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCB7WEhSRmFjdG9yeX0gZnJvbSBcIi4vWEhSRmFjdG9yeS5qc1wiO1xyXG4vLyBpbXBvcnQge1ZvbHVtZX0gZnJvbSBcIi4vdXRpbHMvVm9sdW1lLmpzXCI7XHJcbi8vIGltcG9ydCB7UHJvZmlsZX0gZnJvbSBcIi4vdXRpbHMvUHJvZmlsZS5qc1wiO1xyXG4vLyBpbXBvcnQge01lYXN1cmV9IGZyb20gXCIuL3V0aWxzL01lYXN1cmUuanNcIjtcclxuLy8gaW1wb3J0IHtQb2x5Z29uQ2xpcFZvbHVtZX0gZnJvbSBcIi4vdXRpbHMvUG9seWdvbkNsaXBWb2x1bWUuanNcIjtcclxuaW1wb3J0IHtQb2ludENvbG9yVHlwZX0gZnJvbSBcIi4vZGVmaW5lcy5qc1wiO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBVdGlscyB7XHJcblx0LypcclxuXHRzdGF0aWMgYXN5bmMgbG9hZFNoYXBlZmlsZUZlYXR1cmVzIChmaWxlLCBjYWxsYmFjaykge1xyXG5cdFx0bGV0IGZlYXR1cmVzID0gW107XHJcblxyXG5cdFx0bGV0IGhhbmRsZUZpbmlzaCA9ICgpID0+IHtcclxuXHRcdFx0Y2FsbGJhY2soZmVhdHVyZXMpO1xyXG5cdFx0fTtcclxuXHJcblx0XHRsZXQgc291cmNlID0gYXdhaXQgc2hhcGVmaWxlLm9wZW4oZmlsZSk7XHJcblxyXG5cdFx0d2hpbGUodHJ1ZSl7XHJcblx0XHRcdGxldCByZXN1bHQgPSBhd2FpdCBzb3VyY2UucmVhZCgpO1xyXG5cclxuXHRcdFx0aWYgKHJlc3VsdC5kb25lKSB7XHJcblx0XHRcdFx0aGFuZGxlRmluaXNoKCk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChyZXN1bHQudmFsdWUgJiYgcmVzdWx0LnZhbHVlLnR5cGUgPT09ICdGZWF0dXJlJyAmJiByZXN1bHQudmFsdWUuZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdGZlYXR1cmVzLnB1c2gocmVzdWx0LnZhbHVlKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHN0YXRpYyB0b1N0cmluZyAodmFsdWUpIHtcclxuXHRcdGlmICh2YWx1ZSBpbnN0YW5jZW9mIFRIUkVFLlZlY3RvcjMpIHtcclxuXHRcdFx0cmV0dXJuIHZhbHVlLngudG9GaXhlZCgyKSArICcsICcgKyB2YWx1ZS55LnRvRml4ZWQoMikgKyAnLCAnICsgdmFsdWUuei50b0ZpeGVkKDIpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuICcnICsgdmFsdWUgKyAnJztcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBub3JtYWxpemVVUkwgKHVybCkge1xyXG5cdFx0bGV0IHUgPSBuZXcgVVJMKHVybCk7XHJcblxyXG5cdFx0cmV0dXJuIHUucHJvdG9jb2wgKyAnLy8nICsgdS5ob3N0bmFtZSArIHUucGF0aG5hbWUucmVwbGFjZSgvXFwvKy9nLCAnLycpO1xyXG5cdH07XHJcblxyXG5cdHN0YXRpYyBwYXRoRXhpc3RzICh1cmwpIHtcclxuXHRcdGxldCByZXEgPSBYSFJGYWN0b3J5LmNyZWF0ZVhNTEh0dHBSZXF1ZXN0KCk7XHJcblx0XHRyZXEub3BlbignR0VUJywgdXJsLCBmYWxzZSk7XHJcblx0XHRyZXEuc2VuZChudWxsKTtcclxuXHRcdGlmIChyZXEuc3RhdHVzICE9PSAyMDApIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fTtcclxuXHJcblx0c3RhdGljIGRlYnVnU3BoZXJlKHBhcmVudCwgcG9zaXRpb24sIHNjYWxlLCBjb2xvcil7XHJcblx0XHRsZXQgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoMSwgOCwgOCk7XHJcblx0XHRsZXQgbWF0ZXJpYWw7XHJcblxyXG5cdFx0aWYoY29sb3IgIT09IHVuZGVmaW5lZCl7XHJcblx0XHRcdG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtjb2xvcjogY29sb3J9KTtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoTm9ybWFsTWF0ZXJpYWwoKTtcclxuXHRcdH1cclxuXHRcdGxldCBzcGhlcmUgPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG5cdFx0c3BoZXJlLnBvc2l0aW9uLmNvcHkocG9zaXRpb24pO1xyXG5cdFx0c3BoZXJlLnNjYWxlLnNldChzY2FsZSwgc2NhbGUsIHNjYWxlKTtcclxuXHRcdHBhcmVudC5hZGQoc3BoZXJlKTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBkZWJ1Z0xpbmUocGFyZW50LCBzdGFydCwgZW5kLCBjb2xvcil7XHJcblx0XHRsZXQgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogY29sb3IgfSk7IFxyXG5cdFx0bGV0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLkdlb21ldHJ5KCk7IFxyXG5cdFx0Z2VvbWV0cnkudmVydGljZXMucHVzaCggc3RhcnQsIGVuZCk7IFxyXG5cdFx0bGV0IHRsID0gbmV3IFRIUkVFLkxpbmUoIGdlb21ldHJ5LCBtYXRlcmlhbCApOyBcclxuXHRcdHBhcmVudC5hZGQodGwpO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGRlYnVnQm94KHBhcmVudCwgYm94LCB0cmFuc2Zvcm0gPSBuZXcgVEhSRUUuTWF0cml4NCgpLCBjb2xvciA9IDB4RkZGRjAwKXtcclxuXHRcdFxyXG5cdFx0bGV0IHZlcnRpY2VzID0gW1xyXG5cdFx0XHRbYm94Lm1pbi54LCBib3gubWluLnksIGJveC5taW4uel0sXHJcblx0XHRcdFtib3gubWluLngsIGJveC5taW4ueSwgYm94Lm1heC56XSxcclxuXHRcdFx0W2JveC5taW4ueCwgYm94Lm1heC55LCBib3gubWluLnpdLFxyXG5cdFx0XHRbYm94Lm1pbi54LCBib3gubWF4LnksIGJveC5tYXguel0sXHJcblxyXG5cdFx0XHRbYm94Lm1heC54LCBib3gubWluLnksIGJveC5taW4uel0sXHJcblx0XHRcdFtib3gubWF4LngsIGJveC5taW4ueSwgYm94Lm1heC56XSxcclxuXHRcdFx0W2JveC5tYXgueCwgYm94Lm1heC55LCBib3gubWluLnpdLFxyXG5cdFx0XHRbYm94Lm1heC54LCBib3gubWF4LnksIGJveC5tYXguel0sXHJcblx0XHRdLm1hcCh2ID0+IG5ldyBUSFJFRS5WZWN0b3IzKC4uLnYpKTtcclxuXHJcblx0XHRsZXQgZWRnZXMgPSBbXHJcblx0XHRcdFswLCA0XSwgWzQsIDVdLCBbNSwgMV0sIFsxLCAwXSxcclxuXHRcdFx0WzIsIDZdLCBbNiwgN10sIFs3LCAzXSwgWzMsIDJdLFxyXG5cdFx0XHRbMCwgMl0sIFs0LCA2XSwgWzUsIDddLCBbMSwgM11cclxuXHRcdF07XHJcblxyXG5cdFx0bGV0IGNlbnRlciA9IGJveC5nZXRDZW50ZXIobmV3IFRIUkVFLlZlY3RvcjMoKSk7XHJcblxyXG5cdFx0bGV0IGNlbnRyb2lkcyA9IFtcclxuXHRcdFx0e3Bvc2l0aW9uOiBbYm94Lm1pbi54LCBjZW50ZXIueSwgY2VudGVyLnpdLCBjb2xvcjogMHhGRjAwMDB9LFxyXG5cdFx0XHR7cG9zaXRpb246IFtib3gubWF4LngsIGNlbnRlci55LCBjZW50ZXIuel0sIGNvbG9yOiAweDg4MDAwMH0sXHJcblxyXG5cdFx0XHR7cG9zaXRpb246IFtjZW50ZXIueCwgYm94Lm1pbi55LCBjZW50ZXIuel0sIGNvbG9yOiAweDAwRkYwMH0sXHJcblx0XHRcdHtwb3NpdGlvbjogW2NlbnRlci54LCBib3gubWF4LnksIGNlbnRlci56XSwgY29sb3I6IDB4MDA4ODAwfSxcclxuXHJcblx0XHRcdHtwb3NpdGlvbjogW2NlbnRlci54LCBjZW50ZXIueSwgYm94Lm1pbi56XSwgY29sb3I6IDB4MDAwMEZGfSxcclxuXHRcdFx0e3Bvc2l0aW9uOiBbY2VudGVyLngsIGNlbnRlci55LCBib3gubWF4LnpdLCBjb2xvcjogMHgwMDAwODh9LFxyXG5cdFx0XTtcclxuXHJcblx0XHRmb3IobGV0IHZlcnRleCBvZiB2ZXJ0aWNlcyl7XHJcblx0XHRcdGxldCBwb3MgPSB2ZXJ0ZXguY2xvbmUoKS5hcHBseU1hdHJpeDQodHJhbnNmb3JtKTtcclxuXHJcblx0XHRcdFV0aWxzLmRlYnVnU3BoZXJlKHBhcmVudCwgcG9zLCAwLjEsIDB4RkYwMDAwKTtcclxuXHRcdH1cclxuXHJcblx0XHRmb3IobGV0IGVkZ2Ugb2YgZWRnZXMpe1xyXG5cdFx0XHRsZXQgc3RhcnQgPSB2ZXJ0aWNlc1tlZGdlWzBdXS5jbG9uZSgpLmFwcGx5TWF0cml4NCh0cmFuc2Zvcm0pO1xyXG5cdFx0XHRsZXQgZW5kID0gdmVydGljZXNbZWRnZVsxXV0uY2xvbmUoKS5hcHBseU1hdHJpeDQodHJhbnNmb3JtKTtcclxuXHJcblx0XHRcdFV0aWxzLmRlYnVnTGluZShwYXJlbnQsIHN0YXJ0LCBlbmQsIGNvbG9yKTtcclxuXHRcdH1cclxuXHJcblx0XHRmb3IobGV0IGNlbnRyb2lkIG9mIGNlbnRyb2lkcyl7XHJcblx0XHRcdGxldCBwb3MgPSBuZXcgVEhSRUUuVmVjdG9yMyguLi5jZW50cm9pZC5wb3NpdGlvbikuYXBwbHlNYXRyaXg0KHRyYW5zZm9ybSk7XHJcblxyXG5cdFx0XHRVdGlscy5kZWJ1Z1NwaGVyZShwYXJlbnQsIHBvcywgMC4xLCBjZW50cm9pZC5jb2xvcik7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZGVidWdQbGFuZShwYXJlbnQsIHBsYW5lLCBzaXplID0gMSwgY29sb3IgPSAweDAwMDBGRil7XHJcblxyXG5cdFx0bGV0IHBsYW5laGVscGVyID0gbmV3IFRIUkVFLlBsYW5lSGVscGVyKHBsYW5lLCBzaXplLCBjb2xvcik7XHJcblxyXG5cdFx0cGFyZW50LmFkZChwbGFuZWhlbHBlcik7XHJcblxyXG5cdH1cclxuXHQqL1xyXG5cclxuXHQvKipcclxuXHQgKiBhZGFwdGVkIGZyb20gbWhsdXNrYSBhdCBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL2lzc3Vlcy8xNTYxXHJcblx0ICogL1xyXG5cdHN0YXRpYyBjb21wdXRlVHJhbnNmb3JtZWRCb3VuZGluZ0JveCAoYm94LCB0cmFuc2Zvcm0pIHtcclxuXHRcdGxldCB2ZXJ0aWNlcyA9IFtcclxuXHRcdFx0bmV3IFRIUkVFLlZlY3RvcjMoYm94Lm1pbi54LCBib3gubWluLnksIGJveC5taW4ueikuYXBwbHlNYXRyaXg0KHRyYW5zZm9ybSksXHJcblx0XHRcdG5ldyBUSFJFRS5WZWN0b3IzKGJveC5taW4ueCwgYm94Lm1pbi55LCBib3gubWluLnopLmFwcGx5TWF0cml4NCh0cmFuc2Zvcm0pLFxyXG5cdFx0XHRuZXcgVEhSRUUuVmVjdG9yMyhib3gubWF4LngsIGJveC5taW4ueSwgYm94Lm1pbi56KS5hcHBseU1hdHJpeDQodHJhbnNmb3JtKSxcclxuXHRcdFx0bmV3IFRIUkVFLlZlY3RvcjMoYm94Lm1pbi54LCBib3gubWF4LnksIGJveC5taW4ueikuYXBwbHlNYXRyaXg0KHRyYW5zZm9ybSksXHJcblx0XHRcdG5ldyBUSFJFRS5WZWN0b3IzKGJveC5taW4ueCwgYm94Lm1pbi55LCBib3gubWF4LnopLmFwcGx5TWF0cml4NCh0cmFuc2Zvcm0pLFxyXG5cdFx0XHRuZXcgVEhSRUUuVmVjdG9yMyhib3gubWluLngsIGJveC5tYXgueSwgYm94Lm1heC56KS5hcHBseU1hdHJpeDQodHJhbnNmb3JtKSxcclxuXHRcdFx0bmV3IFRIUkVFLlZlY3RvcjMoYm94Lm1heC54LCBib3gubWF4LnksIGJveC5taW4ueikuYXBwbHlNYXRyaXg0KHRyYW5zZm9ybSksXHJcblx0XHRcdG5ldyBUSFJFRS5WZWN0b3IzKGJveC5tYXgueCwgYm94Lm1pbi55LCBib3gubWF4LnopLmFwcGx5TWF0cml4NCh0cmFuc2Zvcm0pLFxyXG5cdFx0XHRuZXcgVEhSRUUuVmVjdG9yMyhib3gubWF4LngsIGJveC5tYXgueSwgYm94Lm1heC56KS5hcHBseU1hdHJpeDQodHJhbnNmb3JtKVxyXG5cdFx0XTtcclxuXHJcblx0XHRsZXQgYm91bmRpbmdCb3ggPSBuZXcgVEhSRUUuQm94MygpO1xyXG5cdFx0Ym91bmRpbmdCb3guc2V0RnJvbVBvaW50cyh2ZXJ0aWNlcyk7XHJcblxyXG5cdFx0cmV0dXJuIGJvdW5kaW5nQm94O1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIGFkZCBzZXBhcmF0b3JzIHRvIGxhcmdlIG51bWJlcnNcclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBuU3RyXHJcblx0ICogQHJldHVybnNcclxuXHQgKiAvXHJcblx0c3RhdGljIGFkZENvbW1hcyAoblN0cikge1xyXG5cdFx0blN0ciArPSAnJztcclxuXHRcdGxldCB4ID0gblN0ci5zcGxpdCgnLicpO1xyXG5cdFx0bGV0IHgxID0geFswXTtcclxuXHRcdGxldCB4MiA9IHgubGVuZ3RoID4gMSA/ICcuJyArIHhbMV0gOiAnJztcclxuXHRcdGxldCByZ3ggPSAvKFxcZCspKFxcZHszfSkvO1xyXG5cdFx0d2hpbGUgKHJneC50ZXN0KHgxKSkge1xyXG5cdFx0XHR4MSA9IHgxLnJlcGxhY2Uocmd4LCAnJDEnICsgJywnICsgJyQyJyk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4geDEgKyB4MjtcclxuXHR9O1xyXG5cclxuXHRzdGF0aWMgcmVtb3ZlQ29tbWFzIChzdHIpIHtcclxuXHRcdHJldHVybiBzdHIucmVwbGFjZSgvLC9nLCAnJyk7XHJcblx0fSovXHJcblxyXG5cdC8qKlxyXG5cdCAqIGNyZWF0ZSB3b3JrZXIgZnJvbSBhIHN0cmluZ1xyXG5cdCAqXHJcblx0ICogY29kZSBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTAzNDM5MTMvaG93LXRvLWNyZWF0ZS1hLXdlYi13b3JrZXItZnJvbS1hLXN0cmluZ1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBjcmVhdGVXb3JrZXIgKGNvZGUpIHtcclxuXHRcdGxldCBibG9iID0gbmV3IEJsb2IoW2NvZGVdLCB7dHlwZTogJ2FwcGxpY2F0aW9uL2phdmFzY3JpcHQnfSk7XHJcblx0XHRsZXQgd29ya2VyID0gbmV3IFdvcmtlcihVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpKTtcclxuXHJcblx0XHRyZXR1cm4gd29ya2VyO1xyXG5cdH07XHJcblx0LypcclxuXHRzdGF0aWMgbW92ZVRvKHNjZW5lLCBlbmRQb3NpdGlvbiwgZW5kVGFyZ2V0KXtcclxuXHJcblx0XHRsZXQgdmlldyA9IHNjZW5lLnZpZXc7XHJcblx0XHRsZXQgY2FtZXJhID0gc2NlbmUuZ2V0QWN0aXZlQ2FtZXJhKCk7XHJcblx0XHRsZXQgYW5pbWF0aW9uRHVyYXRpb24gPSA1MDA7XHJcblx0XHRsZXQgZWFzaW5nID0gVFdFRU4uRWFzaW5nLlF1YXJ0aWMuT3V0O1xyXG5cclxuXHRcdHsgLy8gYW5pbWF0ZSBjYW1lcmEgcG9zaXRpb25cclxuXHRcdFx0bGV0IHR3ZWVuID0gbmV3IFRXRUVOLlR3ZWVuKHZpZXcucG9zaXRpb24pLnRvKGVuZFBvc2l0aW9uLCBhbmltYXRpb25EdXJhdGlvbik7XHJcblx0XHRcdHR3ZWVuLmVhc2luZyhlYXNpbmcpO1xyXG5cdFx0XHR0d2Vlbi5zdGFydCgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHsgLy8gYW5pbWF0ZSBjYW1lcmEgdGFyZ2V0XHJcblx0XHRcdGxldCBjYW1UYXJnZXREaXN0YW5jZSA9IGNhbWVyYS5wb3NpdGlvbi5kaXN0YW5jZVRvKGVuZFRhcmdldCk7XHJcblx0XHRcdGxldCB0YXJnZXQgPSBuZXcgVEhSRUUuVmVjdG9yMygpLmFkZFZlY3RvcnMoXHJcblx0XHRcdFx0Y2FtZXJhLnBvc2l0aW9uLFxyXG5cdFx0XHRcdGNhbWVyYS5nZXRXb3JsZERpcmVjdGlvbihuZXcgVEhSRUUuVmVjdG9yMygpKS5jbG9uZSgpLm11bHRpcGx5U2NhbGFyKGNhbVRhcmdldERpc3RhbmNlKVxyXG5cdFx0XHQpO1xyXG5cdFx0XHRsZXQgdHdlZW4gPSBuZXcgVFdFRU4uVHdlZW4odGFyZ2V0KS50byhlbmRUYXJnZXQsIGFuaW1hdGlvbkR1cmF0aW9uKTtcclxuXHRcdFx0dHdlZW4uZWFzaW5nKGVhc2luZyk7XHJcblx0XHRcdHR3ZWVuLm9uVXBkYXRlKCgpID0+IHtcclxuXHRcdFx0XHR2aWV3Lmxvb2tBdCh0YXJnZXQpO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0dHdlZW4ub25Db21wbGV0ZSgoKSA9PiB7XHJcblx0XHRcdFx0dmlldy5sb29rQXQodGFyZ2V0KTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdHR3ZWVuLnN0YXJ0KCk7XHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0c3RhdGljIGxvYWRTa3lib3ggKHBhdGgpIHtcclxuXHRcdGxldCBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoNzUsIHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0LCAxLCAxMDAwMDApO1xyXG5cdFx0Y2FtZXJhLnVwLnNldCgwLCAwLCAxKTtcclxuXHRcdGxldCBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xyXG5cclxuXHRcdGxldCBmb3JtYXQgPSAnLmpwZyc7XHJcblx0XHRsZXQgdXJscyA9IFtcclxuXHRcdFx0cGF0aCArICdweCcgKyBmb3JtYXQsIHBhdGggKyAnbngnICsgZm9ybWF0LFxyXG5cdFx0XHRwYXRoICsgJ3B5JyArIGZvcm1hdCwgcGF0aCArICdueScgKyBmb3JtYXQsXHJcblx0XHRcdHBhdGggKyAncHonICsgZm9ybWF0LCBwYXRoICsgJ256JyArIGZvcm1hdFxyXG5cdFx0XTtcclxuXHJcblx0XHRsZXQgbWF0ZXJpYWxBcnJheSA9IFtdO1xyXG5cdFx0e1xyXG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IDY7IGkrKykge1xyXG5cdFx0XHRcdGxldCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7XHJcblx0XHRcdFx0XHRtYXA6IG51bGwsXHJcblx0XHRcdFx0XHRzaWRlOiBUSFJFRS5CYWNrU2lkZSxcclxuXHRcdFx0XHRcdGRlcHRoVGVzdDogZmFsc2UsXHJcblx0XHRcdFx0XHRkZXB0aFdyaXRlOiBmYWxzZSxcclxuXHRcdFx0XHRcdGNvbG9yOiAweDQyNDU1NlxyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRtYXRlcmlhbEFycmF5LnB1c2gobWF0ZXJpYWwpO1xyXG5cclxuXHRcdFx0XHRsZXQgbG9hZGVyID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKTtcclxuXHRcdFx0XHRsb2FkZXIubG9hZCh1cmxzW2ldLFxyXG5cdFx0XHRcdFx0ZnVuY3Rpb24gbG9hZGVkICh0ZXh0dXJlKSB7XHJcblx0XHRcdFx0XHRcdG1hdGVyaWFsLm1hcCA9IHRleHR1cmU7XHJcblx0XHRcdFx0XHRcdG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwuY29sb3Iuc2V0SGV4KDB4ZmZmZmZmKTtcclxuXHRcdFx0XHRcdH0sIGZ1bmN0aW9uIHByb2dyZXNzICh4aHIpIHtcclxuXHRcdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coICh4aHIubG9hZGVkIC8geGhyLnRvdGFsICogMTAwKSArICclIGxvYWRlZCcgKTtcclxuXHRcdFx0XHRcdH0sIGZ1bmN0aW9uIGVycm9yICh4aHIpIHtcclxuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coJ0FuIGVycm9yIGhhcHBlbmVkJywgeGhyKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IHNreUdlb21ldHJ5ID0gbmV3IFRIUkVFLkN1YmVHZW9tZXRyeSg1MDAwLCA1MDAwLCA1MDAwKTtcclxuXHRcdGxldCBza3lib3ggPSBuZXcgVEhSRUUuTWVzaChza3lHZW9tZXRyeSwgbWF0ZXJpYWxBcnJheSk7XHJcblxyXG5cdFx0c2NlbmUuYWRkKHNreWJveCk7XHJcblxyXG5cdFx0Ly8geiB1cFxyXG5cdFx0c2NlbmUucm90YXRpb24ueCA9IE1hdGguUEkgLyAyO1xyXG5cclxuXHRcdHJldHVybiB7J2NhbWVyYSc6IGNhbWVyYSwgJ3NjZW5lJzogc2NlbmV9O1xyXG5cdH07XHJcblxyXG5cdHN0YXRpYyBjcmVhdGVHcmlkICh3aWR0aCwgbGVuZ3RoLCBzcGFjaW5nLCBjb2xvcikge1xyXG5cdFx0bGV0IG1hdGVyaWFsID0gbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHtcclxuXHRcdFx0Y29sb3I6IGNvbG9yIHx8IDB4ODg4ODg4XHJcblx0XHR9KTtcclxuXHJcblx0XHRsZXQgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuR2VvbWV0cnkoKTtcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDw9IGxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdGdlb21ldHJ5LnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoLShzcGFjaW5nICogd2lkdGgpIC8gMiwgaSAqIHNwYWNpbmcgLSAoc3BhY2luZyAqIGxlbmd0aCkgLyAyLCAwKSk7XHJcblx0XHRcdGdlb21ldHJ5LnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoKyhzcGFjaW5nICogd2lkdGgpIC8gMiwgaSAqIHNwYWNpbmcgLSAoc3BhY2luZyAqIGxlbmd0aCkgLyAyLCAwKSk7XHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPD0gd2lkdGg7IGkrKykge1xyXG5cdFx0XHRnZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKGkgKiBzcGFjaW5nIC0gKHNwYWNpbmcgKiB3aWR0aCkgLyAyLCAtKHNwYWNpbmcgKiBsZW5ndGgpIC8gMiwgMCkpO1xyXG5cdFx0XHRnZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKGkgKiBzcGFjaW5nIC0gKHNwYWNpbmcgKiB3aWR0aCkgLyAyLCArKHNwYWNpbmcgKiBsZW5ndGgpIC8gMiwgMCkpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBsaW5lID0gbmV3IFRIUkVFLkxpbmVTZWdtZW50cyhnZW9tZXRyeSwgbWF0ZXJpYWwsIFRIUkVFLkxpbmVQaWVjZXMpO1xyXG5cdFx0bGluZS5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcclxuXHRcdHJldHVybiBsaW5lO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGNyZWF0ZUJhY2tncm91bmRUZXh0dXJlICh3aWR0aCwgaGVpZ2h0KSB7XHJcblx0XHRmdW5jdGlvbiBnYXVzcyAoeCwgeSkge1xyXG5cdFx0XHRyZXR1cm4gKDEgLyAoMiAqIE1hdGguUEkpKSAqIE1hdGguZXhwKC0oeCAqIHggKyB5ICogeSkgLyAyKTtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gbWFwLm1hZ0ZpbHRlciA9IFRIUkVFLk5lYXJlc3RGaWx0ZXI7XHJcblx0XHRsZXQgc2l6ZSA9IHdpZHRoICogaGVpZ2h0O1xyXG5cdFx0bGV0IGRhdGEgPSBuZXcgVWludDhBcnJheSgzICogc2l6ZSk7XHJcblxyXG5cdFx0bGV0IGNocm9tYSA9IFsxLCAxLjUsIDEuN107XHJcblx0XHRsZXQgbWF4ID0gZ2F1c3MoMCwgMCk7XHJcblxyXG5cdFx0Zm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XHJcblx0XHRcdGZvciAobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcclxuXHRcdFx0XHRsZXQgdSA9IDIgKiAoeCAvIHdpZHRoKSAtIDE7XHJcblx0XHRcdFx0bGV0IHYgPSAyICogKHkgLyBoZWlnaHQpIC0gMTtcclxuXHJcblx0XHRcdFx0bGV0IGkgPSB4ICsgd2lkdGggKiB5O1xyXG5cdFx0XHRcdGxldCBkID0gZ2F1c3MoMiAqIHUsIDIgKiB2KSAvIG1heDtcclxuXHRcdFx0XHRsZXQgciA9IChNYXRoLnJhbmRvbSgpICsgTWF0aC5yYW5kb20oKSArIE1hdGgucmFuZG9tKCkpIC8gMztcclxuXHRcdFx0XHRyID0gKGQgKiAwLjUgKyAwLjUpICogciAqIDAuMDM7XHJcblx0XHRcdFx0ciA9IHIgKiAwLjQ7XHJcblxyXG5cdFx0XHRcdC8vIGQgPSBNYXRoLnBvdyhkLCAwLjYpO1xyXG5cclxuXHRcdFx0XHRkYXRhWzMgKiBpICsgMF0gPSAyNTUgKiAoZCAvIDE1ICsgMC4wNSArIHIpICogY2hyb21hWzBdO1xyXG5cdFx0XHRcdGRhdGFbMyAqIGkgKyAxXSA9IDI1NSAqIChkIC8gMTUgKyAwLjA1ICsgcikgKiBjaHJvbWFbMV07XHJcblx0XHRcdFx0ZGF0YVszICogaSArIDJdID0gMjU1ICogKGQgLyAxNSArIDAuMDUgKyByKSAqIGNocm9tYVsyXTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGxldCB0ZXh0dXJlID0gbmV3IFRIUkVFLkRhdGFUZXh0dXJlKGRhdGEsIHdpZHRoLCBoZWlnaHQsIFRIUkVFLlJHQkZvcm1hdCk7XHJcblx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcblx0XHRyZXR1cm4gdGV4dHVyZTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBnZXRNb3VzZVBvaW50Q2xvdWRJbnRlcnNlY3Rpb24gKG1vdXNlLCBjYW1lcmEsIHZpZXdlciwgcG9pbnRjbG91ZHMsIHBhcmFtcyA9IHt9KSB7XHJcblx0XHRcclxuXHRcdGxldCByZW5kZXJlciA9IHZpZXdlci5yZW5kZXJlcjtcclxuXHRcdFxyXG5cdFx0bGV0IG5tb3VzZSA9IHtcclxuXHRcdFx0eDogKG1vdXNlLnggLyByZW5kZXJlci5kb21FbGVtZW50LmNsaWVudFdpZHRoKSAqIDIgLSAxLFxyXG5cdFx0XHR5OiAtKG1vdXNlLnkgLyByZW5kZXJlci5kb21FbGVtZW50LmNsaWVudEhlaWdodCkgKiAyICsgMVxyXG5cdFx0fTtcclxuXHJcblx0XHRsZXQgcGlja1BhcmFtcyA9IHt9O1xyXG5cclxuXHRcdGlmKHBhcmFtcy5waWNrQ2xpcHBlZCl7XHJcblx0XHRcdHBpY2tQYXJhbXMucGlja0NsaXBwZWQgPSBwYXJhbXMucGlja0NsaXBwZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cGlja1BhcmFtcy54ID0gbW91c2UueDtcclxuXHRcdHBpY2tQYXJhbXMueSA9IHJlbmRlcmVyLmRvbUVsZW1lbnQuY2xpZW50SGVpZ2h0IC0gbW91c2UueTtcclxuXHJcblx0XHRsZXQgcmF5Y2FzdGVyID0gbmV3IFRIUkVFLlJheWNhc3RlcigpO1xyXG5cdFx0cmF5Y2FzdGVyLnNldEZyb21DYW1lcmEobm1vdXNlLCBjYW1lcmEpO1xyXG5cdFx0bGV0IHJheSA9IHJheWNhc3Rlci5yYXk7XHJcblxyXG5cdFx0bGV0IHNlbGVjdGVkUG9pbnRjbG91ZCA9IG51bGw7XHJcblx0XHRsZXQgY2xvc2VzdERpc3RhbmNlID0gSW5maW5pdHk7XHJcblx0XHRsZXQgY2xvc2VzdEludGVyc2VjdGlvbiA9IG51bGw7XHJcblx0XHRsZXQgY2xvc2VzdFBvaW50ID0gbnVsbDtcclxuXHRcdFxyXG5cdFx0Zm9yKGxldCBwb2ludGNsb3VkIG9mIHBvaW50Y2xvdWRzKXtcclxuXHRcdFx0bGV0IHBvaW50ID0gcG9pbnRjbG91ZC5waWNrKHZpZXdlciwgY2FtZXJhLCByYXksIHBpY2tQYXJhbXMpO1xyXG5cdFx0XHRcclxuXHRcdFx0aWYoIXBvaW50KXtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0bGV0IGRpc3RhbmNlID0gY2FtZXJhLnBvc2l0aW9uLmRpc3RhbmNlVG8ocG9pbnQucG9zaXRpb24pO1xyXG5cclxuXHRcdFx0aWYgKGRpc3RhbmNlIDwgY2xvc2VzdERpc3RhbmNlKSB7XHJcblx0XHRcdFx0Y2xvc2VzdERpc3RhbmNlID0gZGlzdGFuY2U7XHJcblx0XHRcdFx0c2VsZWN0ZWRQb2ludGNsb3VkID0gcG9pbnRjbG91ZDtcclxuXHRcdFx0XHRjbG9zZXN0SW50ZXJzZWN0aW9uID0gcG9pbnQucG9zaXRpb247XHJcblx0XHRcdFx0Y2xvc2VzdFBvaW50ID0gcG9pbnQ7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoc2VsZWN0ZWRQb2ludGNsb3VkKSB7XHJcblx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0bG9jYXRpb246IGNsb3Nlc3RJbnRlcnNlY3Rpb24sXHJcblx0XHRcdFx0ZGlzdGFuY2U6IGNsb3Nlc3REaXN0YW5jZSxcclxuXHRcdFx0XHRwb2ludGNsb3VkOiBzZWxlY3RlZFBvaW50Y2xvdWQsXHJcblx0XHRcdFx0cG9pbnQ6IGNsb3Nlc3RQb2ludFxyXG5cdFx0XHR9O1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgcGl4ZWxzQXJyYXlUb0ltYWdlIChwaXhlbHMsIHdpZHRoLCBoZWlnaHQpIHtcclxuXHRcdGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuXHRcdGNhbnZhcy53aWR0aCA9IHdpZHRoO1xyXG5cdFx0Y2FudmFzLmhlaWdodCA9IGhlaWdodDtcclxuXHJcblx0XHRsZXQgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG5cclxuXHRcdHBpeGVscyA9IG5ldyBwaXhlbHMuY29uc3RydWN0b3IocGl4ZWxzKTtcclxuXHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHBpeGVscy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRwaXhlbHNbaSAqIDQgKyAzXSA9IDI1NTtcclxuXHRcdH1cclxuXHJcblx0XHRsZXQgaW1hZ2VEYXRhID0gY29udGV4dC5jcmVhdGVJbWFnZURhdGEod2lkdGgsIGhlaWdodCk7XHJcblx0XHRpbWFnZURhdGEuZGF0YS5zZXQocGl4ZWxzKTtcclxuXHRcdGNvbnRleHQucHV0SW1hZ2VEYXRhKGltYWdlRGF0YSwgMCwgMCk7XHJcblxyXG5cdFx0bGV0IGltZyA9IG5ldyBJbWFnZSgpO1xyXG5cdFx0aW1nLnNyYyA9IGNhbnZhcy50b0RhdGFVUkwoKTtcclxuXHRcdC8vIGltZy5zdHlsZS50cmFuc2Zvcm0gPSBcInNjYWxlWSgtMSlcIjtcclxuXHJcblx0XHRyZXR1cm4gaW1nO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIHBpeGVsc0FycmF5VG9EYXRhVXJsKHBpeGVscywgd2lkdGgsIGhlaWdodCkge1xyXG5cdFx0bGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG5cdFx0Y2FudmFzLndpZHRoID0gd2lkdGg7XHJcblx0XHRjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG5cclxuXHRcdGxldCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcblxyXG5cdFx0cGl4ZWxzID0gbmV3IHBpeGVscy5jb25zdHJ1Y3RvcihwaXhlbHMpO1xyXG5cclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcGl4ZWxzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHBpeGVsc1tpICogNCArIDNdID0gMjU1O1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBpbWFnZURhdGEgPSBjb250ZXh0LmNyZWF0ZUltYWdlRGF0YSh3aWR0aCwgaGVpZ2h0KTtcclxuXHRcdGltYWdlRGF0YS5kYXRhLnNldChwaXhlbHMpO1xyXG5cdFx0Y29udGV4dC5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCAwLCAwKTtcclxuXHJcblx0XHRsZXQgZGF0YVVSTCA9IGNhbnZhcy50b0RhdGFVUkwoKTtcclxuXHJcblx0XHRyZXR1cm4gZGF0YVVSTDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBwaXhlbHNBcnJheVRvQ2FudmFzKHBpeGVscywgd2lkdGgsIGhlaWdodCl7XHJcblx0XHRsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcblx0XHRjYW52YXMud2lkdGggPSB3aWR0aDtcclxuXHRcdGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XHJcblxyXG5cdFx0bGV0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuXHJcblx0XHRwaXhlbHMgPSBuZXcgcGl4ZWxzLmNvbnN0cnVjdG9yKHBpeGVscyk7XHJcblxyXG5cdFx0Ly9mb3IgKGxldCBpID0gMDsgaSA8IHBpeGVscy5sZW5ndGg7IGkrKykge1xyXG5cdFx0Ly9cdHBpeGVsc1tpICogNCArIDNdID0gMjU1O1xyXG5cdFx0Ly99XHJcblxyXG5cdFx0Ly8gZmxpcCB2ZXJ0aWNhbGx5XHJcblx0XHRsZXQgYnl0ZXNQZXJMaW5lID0gd2lkdGggKiA0O1xyXG5cdFx0Zm9yKGxldCBpID0gMDsgaSA8IHBhcnNlSW50KGhlaWdodCAvIDIpOyBpKyspe1xyXG5cdFx0XHRsZXQgaiA9IGhlaWdodCAtIGkgLSAxO1xyXG5cclxuXHRcdFx0bGV0IGxpbmVJID0gcGl4ZWxzLnNsaWNlKGkgKiBieXRlc1BlckxpbmUsIGkgKiBieXRlc1BlckxpbmUgKyBieXRlc1BlckxpbmUpO1xyXG5cdFx0XHRsZXQgbGluZUogPSBwaXhlbHMuc2xpY2UoaiAqIGJ5dGVzUGVyTGluZSwgaiAqIGJ5dGVzUGVyTGluZSArIGJ5dGVzUGVyTGluZSk7XHJcblx0XHRcdHBpeGVscy5zZXQobGluZUosIGkgKiBieXRlc1BlckxpbmUpO1xyXG5cdFx0XHRwaXhlbHMuc2V0KGxpbmVJLCBqICogYnl0ZXNQZXJMaW5lKTtcclxuXHRcdH1cclxuXHJcblx0XHRsZXQgaW1hZ2VEYXRhID0gY29udGV4dC5jcmVhdGVJbWFnZURhdGEod2lkdGgsIGhlaWdodCk7XHJcblx0XHRpbWFnZURhdGEuZGF0YS5zZXQocGl4ZWxzKTtcclxuXHRcdGNvbnRleHQucHV0SW1hZ2VEYXRhKGltYWdlRGF0YSwgMCwgMCk7XHJcblxyXG5cdFx0cmV0dXJuIGNhbnZhcztcclxuXHR9XHJcblxyXG5cdHN0YXRpYyByZW1vdmVMaXN0ZW5lcnMoZGlzcGF0Y2hlciwgdHlwZSl7XHJcblx0XHRpZiAoZGlzcGF0Y2hlci5fbGlzdGVuZXJzID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChkaXNwYXRjaGVyLl9saXN0ZW5lcnNbIHR5cGUgXSkge1xyXG5cdFx0XHRkZWxldGUgZGlzcGF0Y2hlci5fbGlzdGVuZXJzWyB0eXBlIF07XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgbW91c2VUb1JheShtb3VzZSwgY2FtZXJhLCB3aWR0aCwgaGVpZ2h0KXtcclxuXHJcblx0XHRsZXQgbm9ybWFsaXplZE1vdXNlID0ge1xyXG5cdFx0XHR4OiAobW91c2UueCAvIHdpZHRoKSAqIDIgLSAxLFxyXG5cdFx0XHR5OiAtKG1vdXNlLnkgLyBoZWlnaHQpICogMiArIDFcclxuXHRcdH07XHJcblxyXG5cdFx0bGV0IHZlY3RvciA9IG5ldyBUSFJFRS5WZWN0b3IzKG5vcm1hbGl6ZWRNb3VzZS54LCBub3JtYWxpemVkTW91c2UueSwgMC41KTtcclxuXHRcdGxldCBvcmlnaW4gPSBuZXcgVEhSRUUuVmVjdG9yMyhub3JtYWxpemVkTW91c2UueCwgbm9ybWFsaXplZE1vdXNlLnksIDApO1xyXG5cdFx0dmVjdG9yLnVucHJvamVjdChjYW1lcmEpO1xyXG5cdFx0b3JpZ2luLnVucHJvamVjdChjYW1lcmEpO1xyXG5cdFx0bGV0IGRpcmVjdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuc3ViVmVjdG9ycyh2ZWN0b3IsIG9yaWdpbikubm9ybWFsaXplKCk7XHJcblxyXG5cdFx0bGV0IHJheSA9IG5ldyBUSFJFRS5SYXkob3JpZ2luLCBkaXJlY3Rpb24pO1xyXG5cclxuXHRcdHJldHVybiByYXk7XHJcblx0fVxyXG5cdCovXHJcbi8qXHJcblx0c3RhdGljIHByb2plY3RlZFJhZGl1cyhyYWRpdXMsIGNhbWVyYSwgZGlzdGFuY2UsIHNjcmVlbldpZHRoLCBzY3JlZW5IZWlnaHQpe1xyXG5cdFx0aWYoY2FtZXJhIGluc3RhbmNlb2YgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKXtcclxuXHRcdFx0cmV0dXJuIFV0aWxzLnByb2plY3RlZFJhZGl1c09ydGhvKHJhZGl1cywgY2FtZXJhLnByb2plY3Rpb25NYXRyaXgsIHNjcmVlbldpZHRoLCBzY3JlZW5IZWlnaHQpO1xyXG5cdFx0fWVsc2UgaWYoY2FtZXJhIGluc3RhbmNlb2YgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEpe1xyXG5cdFx0XHRyZXR1cm4gVXRpbHMucHJvamVjdGVkUmFkaXVzUGVyc3BlY3RpdmUocmFkaXVzLCBjYW1lcmEuZm92ICogTWF0aC5QSSAvIDE4MCwgZGlzdGFuY2UsIHNjcmVlbkhlaWdodCk7XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBwYXJhbWV0ZXJzXCIpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0c3RhdGljIHByb2plY3RlZFJhZGl1c1BlcnNwZWN0aXZlKHJhZGl1cywgZm92LCBkaXN0YW5jZSwgc2NyZWVuSGVpZ2h0KSB7XHJcblx0XHRsZXQgcHJvakZhY3RvciA9ICgxIC8gTWF0aC50YW4oZm92IC8gMikpIC8gZGlzdGFuY2U7XHJcblx0XHRwcm9qRmFjdG9yID0gcHJvakZhY3RvciAqIHNjcmVlbkhlaWdodCAvIDI7XHJcblxyXG5cdFx0cmV0dXJuIHJhZGl1cyAqIHByb2pGYWN0b3I7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgcHJvamVjdGVkUmFkaXVzT3J0aG8ocmFkaXVzLCBwcm9qLCBzY3JlZW5XaWR0aCwgc2NyZWVuSGVpZ2h0KSB7XHJcblx0XHRsZXQgcDEgPSBuZXcgVEhSRUUuVmVjdG9yNCgwKTtcclxuXHRcdGxldCBwMiA9IG5ldyBUSFJFRS5WZWN0b3I0KHJhZGl1cyk7XHJcblxyXG5cdFx0cDEuYXBwbHlNYXRyaXg0KHByb2opO1xyXG5cdFx0cDIuYXBwbHlNYXRyaXg0KHByb2opO1xyXG5cdFx0cDEgPSBuZXcgVEhSRUUuVmVjdG9yMyhwMS54LCBwMS55LCBwMS56KTtcclxuXHRcdHAyID0gbmV3IFRIUkVFLlZlY3RvcjMocDIueCwgcDIueSwgcDIueik7XHJcblx0XHRwMS54ID0gKHAxLnggKyAxLjApICogMC41ICogc2NyZWVuV2lkdGg7XHJcblx0XHRwMS55ID0gKHAxLnkgKyAxLjApICogMC41ICogc2NyZWVuSGVpZ2h0O1xyXG5cdFx0cDIueCA9IChwMi54ICsgMS4wKSAqIDAuNSAqIHNjcmVlbldpZHRoO1xyXG5cdFx0cDIueSA9IChwMi55ICsgMS4wKSAqIDAuNSAqIHNjcmVlbkhlaWdodDtcclxuXHRcdHJldHVybiBwMS5kaXN0YW5jZVRvKHAyKTtcclxuXHR9XHJcblx0XHRcclxuXHRcdFxyXG5cdHN0YXRpYyB0b3BWaWV3KGNhbWVyYSwgbm9kZSl7XHJcblx0XHRjYW1lcmEucG9zaXRpb24uc2V0KDAsIDEsIDApO1xyXG5cdFx0Y2FtZXJhLnJvdGF0aW9uLnNldCgtTWF0aC5QSSAvIDIsIDAsIDApO1xyXG5cdFx0Y2FtZXJhLnpvb21Ubyhub2RlLCAxKTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9udFZpZXcgKGNhbWVyYSwgbm9kZSkge1xyXG5cdFx0Y2FtZXJhLnBvc2l0aW9uLnNldCgwLCAwLCAxKTtcclxuXHRcdGNhbWVyYS5yb3RhdGlvbi5zZXQoMCwgMCwgMCk7XHJcblx0XHRjYW1lcmEuem9vbVRvKG5vZGUsIDEpO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGxlZnRWaWV3IChjYW1lcmEsIG5vZGUpIHtcclxuXHRcdGNhbWVyYS5wb3NpdGlvbi5zZXQoLTEsIDAsIDApO1xyXG5cdFx0Y2FtZXJhLnJvdGF0aW9uLnNldCgwLCAtTWF0aC5QSSAvIDIsIDApO1xyXG5cdFx0Y2FtZXJhLnpvb21Ubyhub2RlLCAxKTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyByaWdodFZpZXcgKGNhbWVyYSwgbm9kZSkge1xyXG5cdFx0Y2FtZXJhLnBvc2l0aW9uLnNldCgxLCAwLCAwKTtcclxuXHRcdGNhbWVyYS5yb3RhdGlvbi5zZXQoMCwgTWF0aC5QSSAvIDIsIDApO1xyXG5cdFx0Y2FtZXJhLnpvb21Ubyhub2RlLCAxKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqXHJcblx0ICogMDogbm8gaW50ZXJzZWN0aW9uXHJcblx0ICogMTogaW50ZXJzZWN0aW9uXHJcblx0ICogMjogZnVsbHkgaW5zaWRlXHJcblx0ICogL1xyXG5cdHN0YXRpYyBmcnVzdHVtU3BoZXJlSW50ZXJzZWN0aW9uIChmcnVzdHVtLCBzcGhlcmUpIHtcclxuXHRcdGxldCBwbGFuZXMgPSBmcnVzdHVtLnBsYW5lcztcclxuXHRcdGxldCBjZW50ZXIgPSBzcGhlcmUuY2VudGVyO1xyXG5cdFx0bGV0IG5lZ1JhZGl1cyA9IC1zcGhlcmUucmFkaXVzO1xyXG5cclxuXHRcdGxldCBtaW5EaXN0YW5jZSA9IE51bWJlci5NQVhfVkFMVUU7XHJcblxyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCA2OyBpKyspIHtcclxuXHRcdFx0bGV0IGRpc3RhbmNlID0gcGxhbmVzWyBpIF0uZGlzdGFuY2VUb1BvaW50KGNlbnRlcik7XHJcblxyXG5cdFx0XHRpZiAoZGlzdGFuY2UgPCBuZWdSYWRpdXMpIHtcclxuXHRcdFx0XHRyZXR1cm4gMDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0bWluRGlzdGFuY2UgPSBNYXRoLm1pbihtaW5EaXN0YW5jZSwgZGlzdGFuY2UpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiAobWluRGlzdGFuY2UgPj0gc3BoZXJlLnJhZGl1cykgPyAyIDogMTtcclxuXHR9XHJcblxyXG5cdC8vIGNvZGUgdGFrZW4gZnJvbSB0aHJlZS5qc1xyXG5cdC8vIEltYWdlVXRpbHMgLSBnZW5lcmF0ZURhdGFUZXh0dXJlKClcclxuXHRzdGF0aWMgZ2VuZXJhdGVEYXRhVGV4dHVyZSAod2lkdGgsIGhlaWdodCwgY29sb3IpIHtcclxuXHRcdGxldCBzaXplID0gd2lkdGggKiBoZWlnaHQ7XHJcblx0XHRsZXQgZGF0YSA9IG5ldyBVaW50OEFycmF5KDQgKiB3aWR0aCAqIGhlaWdodCk7XHJcblxyXG5cdFx0bGV0IHIgPSBNYXRoLmZsb29yKGNvbG9yLnIgKiAyNTUpO1xyXG5cdFx0bGV0IGcgPSBNYXRoLmZsb29yKGNvbG9yLmcgKiAyNTUpO1xyXG5cdFx0bGV0IGIgPSBNYXRoLmZsb29yKGNvbG9yLmIgKiAyNTUpO1xyXG5cclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XHJcblx0XHRcdGRhdGFbIGkgKiAzIF0gPSByO1xyXG5cdFx0XHRkYXRhWyBpICogMyArIDEgXSA9IGc7XHJcblx0XHRcdGRhdGFbIGkgKiAzICsgMiBdID0gYjtcclxuXHRcdH1cclxuXHJcblx0XHRsZXQgdGV4dHVyZSA9IG5ldyBUSFJFRS5EYXRhVGV4dHVyZShkYXRhLCB3aWR0aCwgaGVpZ2h0LCBUSFJFRS5SR0JBRm9ybWF0KTtcclxuXHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cdFx0dGV4dHVyZS5tYWdGaWx0ZXIgPSBUSFJFRS5OZWFyZXN0RmlsdGVyO1xyXG5cclxuXHRcdHJldHVybiB0ZXh0dXJlO1xyXG5cdH1cclxuXHJcblx0Ly8gZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzkwMTExNS9ob3ctY2FuLWktZ2V0LXF1ZXJ5LXN0cmluZy12YWx1ZXMtaW4tamF2YXNjcmlwdFxyXG5cdHN0YXRpYyBnZXRQYXJhbWV0ZXJCeU5hbWUgKG5hbWUpIHtcclxuXHRcdG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tbXS8sICdcXFxcWycpLnJlcGxhY2UoL1tcXF1dLywgJ1xcXFxdJyk7XHJcblx0XHRsZXQgcmVnZXggPSBuZXcgUmVnRXhwKCdbXFxcXD8mXScgKyBuYW1lICsgJz0oW14mI10qKScpO1xyXG5cdFx0bGV0IHJlc3VsdHMgPSByZWdleC5leGVjKGRvY3VtZW50LmxvY2F0aW9uLnNlYXJjaCk7XHJcblx0XHRyZXR1cm4gcmVzdWx0cyA9PT0gbnVsbCA/IG51bGwgOiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0c1sxXS5yZXBsYWNlKC9cXCsvZywgJyAnKSk7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgc2V0UGFyYW1ldGVyIChuYW1lLCB2YWx1ZSkge1xyXG5cdFx0Ly8gdmFsdWUgPSBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpO1xyXG5cclxuXHRcdG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tbXS8sICdcXFxcWycpLnJlcGxhY2UoL1tcXF1dLywgJ1xcXFxdJyk7XHJcblx0XHRsZXQgcmVnZXggPSBuZXcgUmVnRXhwKCcoW1xcXFw/Jl0pKCcgKyBuYW1lICsgJz0oW14mI10qKSknKTtcclxuXHRcdGxldCByZXN1bHRzID0gcmVnZXguZXhlYyhkb2N1bWVudC5sb2NhdGlvbi5zZWFyY2gpO1xyXG5cclxuXHRcdGxldCB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcclxuXHRcdGlmIChyZXN1bHRzID09PSBudWxsKSB7XHJcblx0XHRcdGlmICh3aW5kb3cubG9jYXRpb24uc2VhcmNoLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0XHRcdHVybCA9IHVybCArICc/JztcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR1cmwgPSB1cmwgKyAnJic7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHVybCA9IHVybCArIG5hbWUgKyAnPScgKyB2YWx1ZTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGxldCBuZXdWYWx1ZSA9IG5hbWUgKyAnPScgKyB2YWx1ZTtcclxuXHRcdFx0dXJsID0gdXJsLnJlcGxhY2UocmVzdWx0c1syXSwgbmV3VmFsdWUpO1xyXG5cdFx0fVxyXG5cdFx0d2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCAnJywgdXJsKTtcclxuXHR9XHJcbiovXHJcblx0c3RhdGljIGNyZWF0ZUNoaWxkQUFCQihhYWJiLCBpbmRleCl7XHJcblx0XHRsZXQgbWluID0gYWFiYi5taW4uY2xvbmUoKTtcclxuXHRcdGxldCBtYXggPSBhYWJiLm1heC5jbG9uZSgpO1xyXG5cdFx0bGV0IHNpemUgPSBtYXguc3VidHJhY3QobWluKTtcclxuXHJcblx0XHRpZiAoKGluZGV4ICYgMGIwMDAxKSA+IDApIHtcclxuXHRcdFx0bWluLnogKz0gc2l6ZS56IC8gMjtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdG1heC56IC09IHNpemUueiAvIDI7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKChpbmRleCAmIDBiMDAxMCkgPiAwKSB7XHJcblx0XHRcdG1pbi55ICs9IHNpemUueSAvIDI7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRtYXgueSAtPSBzaXplLnkgLyAyO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICgoaW5kZXggJiAwYjAxMDApID4gMCkge1xyXG5cdFx0XHRtaW4ueCArPSBzaXplLnggLyAyO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bWF4LnggLT0gc2l6ZS54IC8gMjtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gbmV3IFplYUVuZ2luZS5Cb3gzKG1pbiwgbWF4KTtcclxuXHR9XHJcbi8qXHJcblx0Ly8gc2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQwMDIxMi9ob3ctZG8taS1jb3B5LXRvLXRoZS1jbGlwYm9hcmQtaW4tamF2YXNjcmlwdFxyXG5cdHN0YXRpYyBjbGlwYm9hcmRDb3B5KHRleHQpe1xyXG5cdFx0bGV0IHRleHRBcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIpO1xyXG5cclxuXHRcdHRleHRBcmVhLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcclxuXHRcdHRleHRBcmVhLnN0eWxlLnRvcCA9IDA7XHJcblx0XHR0ZXh0QXJlYS5zdHlsZS5sZWZ0ID0gMDtcclxuXHJcblx0XHR0ZXh0QXJlYS5zdHlsZS53aWR0aCA9ICcyZW0nO1xyXG5cdFx0dGV4dEFyZWEuc3R5bGUuaGVpZ2h0ID0gJzJlbSc7XHJcblxyXG5cdFx0dGV4dEFyZWEuc3R5bGUucGFkZGluZyA9IDA7XHJcblxyXG5cdFx0dGV4dEFyZWEuc3R5bGUuYm9yZGVyID0gJ25vbmUnO1xyXG5cdFx0dGV4dEFyZWEuc3R5bGUub3V0bGluZSA9ICdub25lJztcclxuXHRcdHRleHRBcmVhLnN0eWxlLmJveFNoYWRvdyA9ICdub25lJztcclxuXHJcblx0XHR0ZXh0QXJlYS5zdHlsZS5iYWNrZ3JvdW5kID0gJ3RyYW5zcGFyZW50JztcclxuXHJcblx0XHR0ZXh0QXJlYS52YWx1ZSA9IHRleHQ7XHJcblxyXG5cdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0ZXh0QXJlYSk7XHJcblxyXG5cdFx0dGV4dEFyZWEuc2VsZWN0KCk7XHJcblxyXG5cdFx0IHRyeSB7XHJcblx0XHRcdGxldCBzdWNjZXNzID0gZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKTtcclxuXHRcdFx0aWYoc3VjY2Vzcyl7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coXCJjb3BpZWQgdGV4dCB0byBjbGlwYm9hcmRcIik7XHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiY29weSB0byBjbGlwYm9hcmQgZmFpbGVkXCIpO1xyXG5cdFx0XHR9XHJcblx0XHR9IGNhdGNoIChlcnIpIHtcclxuXHRcdFx0Y29uc29sZS5sb2coXCJlcnJvciB3aGlsZSB0cnlpbmcgdG8gY29weSB0byBjbGlwYm9hcmRcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0ZXh0QXJlYSk7XHJcblxyXG5cdH1cclxuXHJcblx0c3RhdGljIGdldE1lYXN1cmVtZW50SWNvbihtZWFzdXJlbWVudCl7XHJcblx0XHRpZiAobWVhc3VyZW1lbnQgaW5zdGFuY2VvZiBNZWFzdXJlKSB7XHJcblx0XHRcdGlmIChtZWFzdXJlbWVudC5zaG93RGlzdGFuY2VzICYmICFtZWFzdXJlbWVudC5zaG93QXJlYSAmJiAhbWVhc3VyZW1lbnQuc2hvd0FuZ2xlcykge1xyXG5cdFx0XHRcdHJldHVybiBgJHtQb3RyZWUucmVzb3VyY2VQYXRofS9pY29ucy9kaXN0YW5jZS5zdmdgO1xyXG5cdFx0XHR9IGVsc2UgaWYgKG1lYXN1cmVtZW50LnNob3dEaXN0YW5jZXMgJiYgbWVhc3VyZW1lbnQuc2hvd0FyZWEgJiYgIW1lYXN1cmVtZW50LnNob3dBbmdsZXMpIHtcclxuXHRcdFx0XHRyZXR1cm4gYCR7UG90cmVlLnJlc291cmNlUGF0aH0vaWNvbnMvYXJlYS5zdmdgO1xyXG5cdFx0XHR9IGVsc2UgaWYgKG1lYXN1cmVtZW50Lm1heE1hcmtlcnMgPT09IDEpIHtcclxuXHRcdFx0XHRyZXR1cm4gYCR7UG90cmVlLnJlc291cmNlUGF0aH0vaWNvbnMvcG9pbnQuc3ZnYDtcclxuXHRcdFx0fSBlbHNlIGlmICghbWVhc3VyZW1lbnQuc2hvd0Rpc3RhbmNlcyAmJiAhbWVhc3VyZW1lbnQuc2hvd0FyZWEgJiYgbWVhc3VyZW1lbnQuc2hvd0FuZ2xlcykge1xyXG5cdFx0XHRcdHJldHVybiBgJHtQb3RyZWUucmVzb3VyY2VQYXRofS9pY29ucy9hbmdsZS5wbmdgO1xyXG5cdFx0XHR9IGVsc2UgaWYgKG1lYXN1cmVtZW50LnNob3dIZWlnaHQpIHtcclxuXHRcdFx0XHRyZXR1cm4gYCR7UG90cmVlLnJlc291cmNlUGF0aH0vaWNvbnMvaGVpZ2h0LnN2Z2A7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmV0dXJuIGAke1BvdHJlZS5yZXNvdXJjZVBhdGh9L2ljb25zL2Rpc3RhbmNlLnN2Z2A7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSBpZiAobWVhc3VyZW1lbnQgaW5zdGFuY2VvZiBQcm9maWxlKSB7XHJcblx0XHRcdHJldHVybiBgJHtQb3RyZWUucmVzb3VyY2VQYXRofS9pY29ucy9wcm9maWxlLnN2Z2A7XHJcblx0XHR9IGVsc2UgaWYgKG1lYXN1cmVtZW50IGluc3RhbmNlb2YgVm9sdW1lKSB7XHJcblx0XHRcdHJldHVybiBgJHtQb3RyZWUucmVzb3VyY2VQYXRofS9pY29ucy92b2x1bWUuc3ZnYDtcclxuXHRcdH0gZWxzZSBpZiAobWVhc3VyZW1lbnQgaW5zdGFuY2VvZiBQb2x5Z29uQ2xpcFZvbHVtZSkge1xyXG5cdFx0XHRyZXR1cm4gYCR7UG90cmVlLnJlc291cmNlUGF0aH0vaWNvbnMvY2xpcC1wb2x5Z29uLnN2Z2A7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgdG9NYXRlcmlhbElEKG1hdGVyaWFsTmFtZSl7XHJcblx0XHRpZiAobWF0ZXJpYWxOYW1lID09PSAnUkdCJyl7XHJcblx0XHRcdHJldHVybiBQb2ludENvbG9yVHlwZS5SR0I7XHJcblx0XHR9IGVsc2UgaWYgKG1hdGVyaWFsTmFtZSA9PT0gJ0NvbG9yJykge1xyXG5cdFx0XHRyZXR1cm4gUG9pbnRDb2xvclR5cGUuQ09MT1I7XHJcblx0XHR9IGVsc2UgaWYgKG1hdGVyaWFsTmFtZSA9PT0gJ0VsZXZhdGlvbicpIHtcclxuXHRcdFx0cmV0dXJuIFBvaW50Q29sb3JUeXBlLkhFSUdIVDtcclxuXHRcdH0gZWxzZSBpZiAobWF0ZXJpYWxOYW1lID09PSAnSW50ZW5zaXR5Jykge1xyXG5cdFx0XHRyZXR1cm4gUG9pbnRDb2xvclR5cGUuSU5URU5TSVRZO1xyXG5cdFx0fSBlbHNlIGlmIChtYXRlcmlhbE5hbWUgPT09ICdJbnRlbnNpdHkgR3JhZGllbnQnKSB7XHJcblx0XHRcdHJldHVybiBQb2ludENvbG9yVHlwZS5JTlRFTlNJVFlfR1JBRElFTlQ7XHJcblx0XHR9IGVsc2UgaWYgKG1hdGVyaWFsTmFtZSA9PT0gJ0NsYXNzaWZpY2F0aW9uJykge1xyXG5cdFx0XHRyZXR1cm4gUG9pbnRDb2xvclR5cGUuQ0xBU1NJRklDQVRJT047XHJcblx0XHR9IGVsc2UgaWYgKG1hdGVyaWFsTmFtZSA9PT0gJ1JldHVybiBOdW1iZXInKSB7XHJcblx0XHRcdHJldHVybiBQb2ludENvbG9yVHlwZS5SRVRVUk5fTlVNQkVSO1xyXG5cdFx0fSBlbHNlIGlmIChtYXRlcmlhbE5hbWUgPT09ICdTb3VyY2UnKSB7XHJcblx0XHRcdHJldHVybiBQb2ludENvbG9yVHlwZS5TT1VSQ0U7XHJcblx0XHR9IGVsc2UgaWYgKG1hdGVyaWFsTmFtZSA9PT0gJ0xldmVsIG9mIERldGFpbCcpIHtcclxuXHRcdFx0cmV0dXJuIFBvaW50Q29sb3JUeXBlLkxPRDtcclxuXHRcdH0gZWxzZSBpZiAobWF0ZXJpYWxOYW1lID09PSAnUG9pbnQgSW5kZXgnKSB7XHJcblx0XHRcdHJldHVybiBQb2ludENvbG9yVHlwZS5QT0lOVF9JTkRFWDtcclxuXHRcdH0gZWxzZSBpZiAobWF0ZXJpYWxOYW1lID09PSAnTm9ybWFsJykge1xyXG5cdFx0XHRyZXR1cm4gUG9pbnRDb2xvclR5cGUuTk9STUFMO1xyXG5cdFx0fSBlbHNlIGlmIChtYXRlcmlhbE5hbWUgPT09ICdQaG9uZycpIHtcclxuXHRcdFx0cmV0dXJuIFBvaW50Q29sb3JUeXBlLlBIT05HO1xyXG5cdFx0fSBlbHNlIGlmIChtYXRlcmlhbE5hbWUgPT09ICdJbmRleCcpIHtcclxuXHRcdFx0cmV0dXJuIFBvaW50Q29sb3JUeXBlLlBPSU5UX0lOREVYO1xyXG5cdFx0fSBlbHNlIGlmIChtYXRlcmlhbE5hbWUgPT09ICdSR0IgYW5kIEVsZXZhdGlvbicpIHtcclxuXHRcdFx0cmV0dXJuIFBvaW50Q29sb3JUeXBlLlJHQl9IRUlHSFQ7XHJcblx0XHR9IGVsc2UgaWYgKG1hdGVyaWFsTmFtZSA9PT0gJ0NvbXBvc2l0ZScpIHtcclxuXHRcdFx0cmV0dXJuIFBvaW50Q29sb3JUeXBlLkNPTVBPU0lURTtcclxuXHRcdH0gZWxzZSBpZiAobWF0ZXJpYWxOYW1lID09PSAnR1BTIFRpbWUnKSB7XHJcblx0XHRcdHJldHVybiBQb2ludENvbG9yVHlwZS5HUFNfVElNRTtcclxuXHRcdH0gZWxzZSBpZiAobWF0ZXJpYWxOYW1lID09PSAnTWF0Y2FwJykge1xyXG5cdFx0XHRyZXR1cm4gUG9pbnRDb2xvclR5cGUuTUFUQ0FQO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cclxuXHRzdGF0aWMgdG9NYXRlcmlhbE5hbWUobWF0ZXJpYWxJRCkge1xyXG5cdFx0aWYgKG1hdGVyaWFsSUQgPT09IFBvaW50Q29sb3JUeXBlLlJHQikge1xyXG5cdFx0XHRyZXR1cm4gJ1JHQic7XHJcblx0XHR9IGVsc2UgaWYgKG1hdGVyaWFsSUQgPT09IFBvaW50Q29sb3JUeXBlLkNPTE9SKSB7XHJcblx0XHRcdHJldHVybiAnQ29sb3InO1xyXG5cdFx0fSBlbHNlIGlmIChtYXRlcmlhbElEID09PSBQb2ludENvbG9yVHlwZS5IRUlHSFQpIHtcclxuXHRcdFx0cmV0dXJuICdFbGV2YXRpb24nO1xyXG5cdFx0fSBlbHNlIGlmIChtYXRlcmlhbElEID09PSBQb2ludENvbG9yVHlwZS5JTlRFTlNJVFkpIHtcclxuXHRcdFx0cmV0dXJuICdJbnRlbnNpdHknO1xyXG5cdFx0fSBlbHNlIGlmIChtYXRlcmlhbElEID09PSBQb2ludENvbG9yVHlwZS5JTlRFTlNJVFlfR1JBRElFTlQpIHtcclxuXHRcdFx0cmV0dXJuICdJbnRlbnNpdHkgR3JhZGllbnQnO1xyXG5cdFx0fSBlbHNlIGlmIChtYXRlcmlhbElEID09PSBQb2ludENvbG9yVHlwZS5DTEFTU0lGSUNBVElPTikge1xyXG5cdFx0XHRyZXR1cm4gJ0NsYXNzaWZpY2F0aW9uJztcclxuXHRcdH0gZWxzZSBpZiAobWF0ZXJpYWxJRCA9PT0gUG9pbnRDb2xvclR5cGUuUkVUVVJOX05VTUJFUikge1xyXG5cdFx0XHRyZXR1cm4gJ1JldHVybiBOdW1iZXInO1xyXG5cdFx0fSBlbHNlIGlmIChtYXRlcmlhbElEID09PSBQb2ludENvbG9yVHlwZS5TT1VSQ0UpIHtcclxuXHRcdFx0cmV0dXJuICdTb3VyY2UnO1xyXG5cdFx0fSBlbHNlIGlmIChtYXRlcmlhbElEID09PSBQb2ludENvbG9yVHlwZS5MT0QpIHtcclxuXHRcdFx0cmV0dXJuICdMZXZlbCBvZiBEZXRhaWwnO1xyXG5cdFx0fSBlbHNlIGlmIChtYXRlcmlhbElEID09PSBQb2ludENvbG9yVHlwZS5OT1JNQUwpIHtcclxuXHRcdFx0cmV0dXJuICdOb3JtYWwnO1xyXG5cdFx0fSBlbHNlIGlmIChtYXRlcmlhbElEID09PSBQb2ludENvbG9yVHlwZS5QSE9ORykge1xyXG5cdFx0XHRyZXR1cm4gJ1Bob25nJztcclxuXHRcdH0gZWxzZSBpZiAobWF0ZXJpYWxJRCA9PT0gUG9pbnRDb2xvclR5cGUuUE9JTlRfSU5ERVgpIHtcclxuXHRcdFx0cmV0dXJuICdJbmRleCc7XHJcblx0XHR9IGVsc2UgaWYgKG1hdGVyaWFsSUQgPT09IFBvaW50Q29sb3JUeXBlLlJHQl9IRUlHSFQpIHtcclxuXHRcdFx0cmV0dXJuICdSR0IgYW5kIEVsZXZhdGlvbic7XHJcblx0XHR9IGVsc2UgaWYgKG1hdGVyaWFsSUQgPT09IFBvaW50Q29sb3JUeXBlLkNPTVBPU0lURSkge1xyXG5cdFx0XHRyZXR1cm4gJ0NvbXBvc2l0ZSc7XHJcblx0XHR9IGVsc2UgaWYgKG1hdGVyaWFsSUQgPT09IFBvaW50Q29sb3JUeXBlLkdQU19USU1FKSB7XHJcblx0XHRcdHJldHVybiAnR1BTIFRpbWUnO1xyXG5cdFx0fSBlbHNlIGlmIChtYXRlcmlhbElEID09PSBQb2ludENvbG9yVHlwZS5NQVRDQVApIHtcclxuXHRcdFx0cmV0dXJuICdNYXRjYXAnO1xyXG5cdFx0fVxyXG5cdH07XHJcbiovXHJcbn1cclxuXHJcbi8vIFV0aWxzLnNjcmVlblBhc3MgPSBuZXcgZnVuY3Rpb24gKCkge1xyXG4vLyBcdHRoaXMuc2NyZWVuU2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcclxuLy8gXHR0aGlzLnNjcmVlblF1YWQgPSBuZXcgVEhSRUUuTWVzaChuZXcgVEhSRUUuUGxhbmVCdWZmZXJHZW9tZXRyeSgyLCAyLCAwKSk7XHJcbi8vIFx0dGhpcy5zY3JlZW5RdWFkLm1hdGVyaWFsLmRlcHRoVGVzdCA9IHRydWU7XHJcbi8vIFx0dGhpcy5zY3JlZW5RdWFkLm1hdGVyaWFsLmRlcHRoV3JpdGUgPSB0cnVlO1xyXG4vLyBcdHRoaXMuc2NyZWVuUXVhZC5tYXRlcmlhbC50cmFuc3BhcmVudCA9IHRydWU7XHJcbi8vIFx0dGhpcy5zY3JlZW5TY2VuZS5hZGQodGhpcy5zY3JlZW5RdWFkKTtcclxuLy8gXHR0aGlzLmNhbWVyYSA9IG5ldyBUSFJFRS5DYW1lcmEoKTtcclxuXHJcbi8vIFx0dGhpcy5yZW5kZXIgPSBmdW5jdGlvbiAocmVuZGVyZXIsIG1hdGVyaWFsLCB0YXJnZXQpIHtcclxuLy8gXHRcdHRoaXMuc2NyZWVuUXVhZC5tYXRlcmlhbCA9IG1hdGVyaWFsO1xyXG5cclxuLy8gXHRcdGlmICh0eXBlb2YgdGFyZ2V0ID09PSAndW5kZWZpbmVkJykge1xyXG4vLyBcdFx0XHRyZW5kZXJlci5yZW5kZXIodGhpcy5zY3JlZW5TY2VuZSwgdGhpcy5jYW1lcmEpO1xyXG4vLyBcdFx0fSBlbHNlIHtcclxuLy8gXHRcdFx0cmVuZGVyZXIucmVuZGVyKHRoaXMuc2NyZWVuU2NlbmUsIHRoaXMuY2FtZXJhLCB0YXJnZXQpO1xyXG4vLyBcdFx0fVxyXG4vLyBcdH07XHJcbi8vIH0oKTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils.js\n");

/***/ }),

/***/ "./src/zea/GLPotreeAsset.js":
/*!**********************************!*\
  !*** ./src/zea/GLPotreeAsset.js ***!
  \**********************************/
/*! exports provided: GLPotreeAsset */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GLPotreeAsset\", function() { return GLPotreeAsset; });\n\r\nlet globalCounter = 0;\r\n\r\nclass GLOctTreeNode extends ZeaEngine.GLPoints {\r\n  constructor(gl, node, ) {\r\n    super(gl, node.points)\r\n    this.node = node;\r\n\r\n    // this.offset = node.offset;\r\n    this.id = ++globalCounter;\r\n    this.loaded = true; // only for LRU. Safely remove after refactoring.\r\n    \r\n\r\n    this.children = []\r\n  }\r\n\r\n\r\n\r\n  // bind(renderstate){\r\n  //   super.bind(renderstate);\r\n\r\n  // }\r\n\r\n  get numPoints(){\r\n    return this.node.numPoints;\r\n  }\r\n\r\n  dispose() {\r\n    this.destroy()\r\n  }\r\n}\r\n\r\nclass GLPotreeAsset extends ZeaEngine.GLPass {\r\n  constructor(gl, potreeAsset, glshader){\r\n\r\n    super();\r\n\r\n    this.gl = gl;\r\n    this.potreeAsset = potreeAsset;\r\n\r\n    const xfoParam =  potreeAsset.getParameter('GlobalXfo')\r\n    const updateXfo = ()=>{\r\n      const xfo = potreeAsset.getGlobalXfo();\r\n      this.spacing = potreeAsset.pcoGeometry.spacing * Math.max(xfo.sc.x, xfo.sc.y, xfo.sc.z);\r\n      this.modelMatrixArray =  xfo.toMat4().asArray()\r\n    }\r\n    xfoParam.valueChanged.connect(updateXfo)\r\n    updateXfo();\r\n    \r\n    this.octreeSize = potreeAsset.pcoGeometry.boundingBox.size().x;\r\n\r\n    this.visibleNodes = [];\r\n    this.visibleGLNodes = [];\r\n    this.gloctreenodes = [];\r\n    this.map = new Map();\r\n    this.freeList = [];\r\n\r\n    this.updated = new ZeaEngine.Signal();\r\n  }\r\n\r\n  setVisibleNodes(visibleNodes, lru, offsets){\r\n    let visChanged = this.visibleNodes.length != visibleNodes.length\r\n    if(!visChanged) {\r\n      visChanged = visibleNodes.some((node, index) => {\r\n        return this.visibleNodes[index] != node;\r\n      })\r\n    }\r\n    if(visChanged) {\r\n      const gl = this.gl;\r\n\r\n      this.visibleGLNodes = []\r\n      // Iterate backwards to lru touches the closests node last.\r\n      for(let i=visibleNodes.length-1; i>=0; i--) {\r\n        const node = visibleNodes[i];\r\n        if (!this.map.has(node)) {\r\n\r\n          // console.log(\"GLPoints:\", node.name, node.offset);\r\n          const gloctreenode = new GLOctTreeNode(gl, node);\r\n          const index = this.freeList.length > 0 ? this.freeList.pop() : this.gloctreenodes.length;\r\n          this.gloctreenodes[index] = gloctreenode;\r\n          this.map.set(node, index);\r\n          \r\n          // Build the tree of gl nodes so we can clean them up later.\r\n          // if (node.name.length > 1){\r\n          //   const parentName = node.name.slice(0, -1);\r\n          //   let parent = this.map.get(parentName);\r\n          //   parent.children.push(gloctreenode);\r\n          // }\r\n\r\n          gloctreenode.destructing.connect(() => {\r\n            this.map.delete(node);\r\n            this.freeList.push(index);\r\n            this.gloctreenodes[index] = null;\r\n\r\n            const drawIndex = this.visibleGLNodes.indexOf(gloctreenode);\r\n            if (drawIndex >= 0)\r\n              this.visibleGLNodes.splice(drawIndex, 1);\r\n          });\r\n        }\r\n        const gloctreenode = this.gloctreenodes[this.map.get(node)];\r\n        this.visibleGLNodes.push(gloctreenode);\r\n\r\n        // At every visiblity change, the offset in the texture changes.\r\n        gloctreenode.vnStart = offsets.get(node);\r\n\r\n        lru.touch(gloctreenode);\r\n      };\r\n\r\n      this.updated.emit();\r\n    }\r\n  }\r\n\r\n  getGeomItem(){\r\n    return this.potreeAsset;\r\n  }\r\n\r\n  __drawNodes(renderstate){\r\n    const gl = this.gl;\r\n    const { unifs } = renderstate;\r\n    const { modelMatrix, offset, uOctreeSize, uOctreeSpacing, uVNStart, uLevel } = unifs\r\n    gl.uniformMatrix4fv(modelMatrix.location, false, this.modelMatrixArray)\r\n    \r\n    if (uOctreeSize)\r\n      gl.uniform1f(uOctreeSize.location, this.octreeSize)\r\n\r\n    if (uOctreeSpacing)\r\n      gl.uniform1f(uOctreeSpacing.location, this.spacing)\r\n\r\n    this.visibleGLNodes.forEach(glpoints => {\r\n      const node = glpoints.node\r\n\r\n      gl.uniform3fv(offset.location, node.offset.asArray())\r\n      \r\n      if (uVNStart)\r\n        gl.uniform1i(uVNStart.location, glpoints.vnStart)\r\n      if (uLevel)\r\n        gl.uniform1f(uLevel.location, node.level)\r\n\r\n      glpoints.bind(renderstate)\r\n      renderstate.bindViewports(unifs, () => {\r\n        glpoints.draw(renderstate)\r\n      })\r\n    });\r\n  }\r\n\r\n  draw(renderstate) {\r\n    if (this.visibleGLNodes.length == 0) return;\r\n    this.__drawNodes(renderstate)\r\n  }\r\n\r\n  drawHighlightedGeoms(renderstate) {\r\n    const gl = this.gl;\r\n    const { highlightColor } = renderstate.unifs;\r\n    if (highlightColor) {\r\n        gl.uniform4fv(highlightColor.location, this.potreeAsset.getHighlight().asArray());\r\n    }\r\n    this.__drawNodes(renderstate)\r\n  }\r\n\r\n  drawGeomData(renderstate) {\r\n    if (this.visibleGLNodes.length == 0) return;\r\n    this.__drawNodes(renderstate)\r\n  }\r\n\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9aZWFQb3RyZWUvLi9zcmMvemVhL0dMUG90cmVlQXNzZXQuanM/ZjhjYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQXVCOzs7QUFHdkI7QUFDQTs7OztBQUlBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esc0NBQXNDLE1BQU07QUFDNUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxxRUFBcUU7QUFDaEY7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxpQkFBaUI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL3NyYy96ZWEvR0xQb3RyZWVBc3NldC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5sZXQgZ2xvYmFsQ291bnRlciA9IDA7XHJcblxyXG5jbGFzcyBHTE9jdFRyZWVOb2RlIGV4dGVuZHMgWmVhRW5naW5lLkdMUG9pbnRzIHtcclxuICBjb25zdHJ1Y3RvcihnbCwgbm9kZSwgKSB7XHJcbiAgICBzdXBlcihnbCwgbm9kZS5wb2ludHMpXHJcbiAgICB0aGlzLm5vZGUgPSBub2RlO1xyXG5cclxuICAgIC8vIHRoaXMub2Zmc2V0ID0gbm9kZS5vZmZzZXQ7XHJcbiAgICB0aGlzLmlkID0gKytnbG9iYWxDb3VudGVyO1xyXG4gICAgdGhpcy5sb2FkZWQgPSB0cnVlOyAvLyBvbmx5IGZvciBMUlUuIFNhZmVseSByZW1vdmUgYWZ0ZXIgcmVmYWN0b3JpbmcuXHJcbiAgICBcclxuXHJcbiAgICB0aGlzLmNoaWxkcmVuID0gW11cclxuICB9XHJcblxyXG5cclxuXHJcbiAgLy8gYmluZChyZW5kZXJzdGF0ZSl7XHJcbiAgLy8gICBzdXBlci5iaW5kKHJlbmRlcnN0YXRlKTtcclxuXHJcbiAgLy8gfVxyXG5cclxuICBnZXQgbnVtUG9pbnRzKCl7XHJcbiAgICByZXR1cm4gdGhpcy5ub2RlLm51bVBvaW50cztcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmRlc3Ryb3koKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEdMUG90cmVlQXNzZXQgZXh0ZW5kcyBaZWFFbmdpbmUuR0xQYXNzIHtcclxuICBjb25zdHJ1Y3RvcihnbCwgcG90cmVlQXNzZXQsIGdsc2hhZGVyKXtcclxuXHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIHRoaXMuZ2wgPSBnbDtcclxuICAgIHRoaXMucG90cmVlQXNzZXQgPSBwb3RyZWVBc3NldDtcclxuXHJcbiAgICBjb25zdCB4Zm9QYXJhbSA9ICBwb3RyZWVBc3NldC5nZXRQYXJhbWV0ZXIoJ0dsb2JhbFhmbycpXHJcbiAgICBjb25zdCB1cGRhdGVYZm8gPSAoKT0+e1xyXG4gICAgICBjb25zdCB4Zm8gPSBwb3RyZWVBc3NldC5nZXRHbG9iYWxYZm8oKTtcclxuICAgICAgdGhpcy5zcGFjaW5nID0gcG90cmVlQXNzZXQucGNvR2VvbWV0cnkuc3BhY2luZyAqIE1hdGgubWF4KHhmby5zYy54LCB4Zm8uc2MueSwgeGZvLnNjLnopO1xyXG4gICAgICB0aGlzLm1vZGVsTWF0cml4QXJyYXkgPSAgeGZvLnRvTWF0NCgpLmFzQXJyYXkoKVxyXG4gICAgfVxyXG4gICAgeGZvUGFyYW0udmFsdWVDaGFuZ2VkLmNvbm5lY3QodXBkYXRlWGZvKVxyXG4gICAgdXBkYXRlWGZvKCk7XHJcbiAgICBcclxuICAgIHRoaXMub2N0cmVlU2l6ZSA9IHBvdHJlZUFzc2V0LnBjb0dlb21ldHJ5LmJvdW5kaW5nQm94LnNpemUoKS54O1xyXG5cclxuICAgIHRoaXMudmlzaWJsZU5vZGVzID0gW107XHJcbiAgICB0aGlzLnZpc2libGVHTE5vZGVzID0gW107XHJcbiAgICB0aGlzLmdsb2N0cmVlbm9kZXMgPSBbXTtcclxuICAgIHRoaXMubWFwID0gbmV3IE1hcCgpO1xyXG4gICAgdGhpcy5mcmVlTGlzdCA9IFtdO1xyXG5cclxuICAgIHRoaXMudXBkYXRlZCA9IG5ldyBaZWFFbmdpbmUuU2lnbmFsKCk7XHJcbiAgfVxyXG5cclxuICBzZXRWaXNpYmxlTm9kZXModmlzaWJsZU5vZGVzLCBscnUsIG9mZnNldHMpe1xyXG4gICAgbGV0IHZpc0NoYW5nZWQgPSB0aGlzLnZpc2libGVOb2Rlcy5sZW5ndGggIT0gdmlzaWJsZU5vZGVzLmxlbmd0aFxyXG4gICAgaWYoIXZpc0NoYW5nZWQpIHtcclxuICAgICAgdmlzQ2hhbmdlZCA9IHZpc2libGVOb2Rlcy5zb21lKChub2RlLCBpbmRleCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZpc2libGVOb2Rlc1tpbmRleF0gIT0gbm9kZTtcclxuICAgICAgfSlcclxuICAgIH1cclxuICAgIGlmKHZpc0NoYW5nZWQpIHtcclxuICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xyXG5cclxuICAgICAgdGhpcy52aXNpYmxlR0xOb2RlcyA9IFtdXHJcbiAgICAgIC8vIEl0ZXJhdGUgYmFja3dhcmRzIHRvIGxydSB0b3VjaGVzIHRoZSBjbG9zZXN0cyBub2RlIGxhc3QuXHJcbiAgICAgIGZvcihsZXQgaT12aXNpYmxlTm9kZXMubGVuZ3RoLTE7IGk+PTA7IGktLSkge1xyXG4gICAgICAgIGNvbnN0IG5vZGUgPSB2aXNpYmxlTm9kZXNbaV07XHJcbiAgICAgICAgaWYgKCF0aGlzLm1hcC5oYXMobm9kZSkpIHtcclxuXHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkdMUG9pbnRzOlwiLCBub2RlLm5hbWUsIG5vZGUub2Zmc2V0KTtcclxuICAgICAgICAgIGNvbnN0IGdsb2N0cmVlbm9kZSA9IG5ldyBHTE9jdFRyZWVOb2RlKGdsLCBub2RlKTtcclxuICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5mcmVlTGlzdC5sZW5ndGggPiAwID8gdGhpcy5mcmVlTGlzdC5wb3AoKSA6IHRoaXMuZ2xvY3RyZWVub2Rlcy5sZW5ndGg7XHJcbiAgICAgICAgICB0aGlzLmdsb2N0cmVlbm9kZXNbaW5kZXhdID0gZ2xvY3RyZWVub2RlO1xyXG4gICAgICAgICAgdGhpcy5tYXAuc2V0KG5vZGUsIGluZGV4KTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8gQnVpbGQgdGhlIHRyZWUgb2YgZ2wgbm9kZXMgc28gd2UgY2FuIGNsZWFuIHRoZW0gdXAgbGF0ZXIuXHJcbiAgICAgICAgICAvLyBpZiAobm9kZS5uYW1lLmxlbmd0aCA+IDEpe1xyXG4gICAgICAgICAgLy8gICBjb25zdCBwYXJlbnROYW1lID0gbm9kZS5uYW1lLnNsaWNlKDAsIC0xKTtcclxuICAgICAgICAgIC8vICAgbGV0IHBhcmVudCA9IHRoaXMubWFwLmdldChwYXJlbnROYW1lKTtcclxuICAgICAgICAgIC8vICAgcGFyZW50LmNoaWxkcmVuLnB1c2goZ2xvY3RyZWVub2RlKTtcclxuICAgICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgICBnbG9jdHJlZW5vZGUuZGVzdHJ1Y3RpbmcuY29ubmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubWFwLmRlbGV0ZShub2RlKTtcclxuICAgICAgICAgICAgdGhpcy5mcmVlTGlzdC5wdXNoKGluZGV4KTtcclxuICAgICAgICAgICAgdGhpcy5nbG9jdHJlZW5vZGVzW2luZGV4XSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkcmF3SW5kZXggPSB0aGlzLnZpc2libGVHTE5vZGVzLmluZGV4T2YoZ2xvY3RyZWVub2RlKTtcclxuICAgICAgICAgICAgaWYgKGRyYXdJbmRleCA+PSAwKVxyXG4gICAgICAgICAgICAgIHRoaXMudmlzaWJsZUdMTm9kZXMuc3BsaWNlKGRyYXdJbmRleCwgMSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZ2xvY3RyZWVub2RlID0gdGhpcy5nbG9jdHJlZW5vZGVzW3RoaXMubWFwLmdldChub2RlKV07XHJcbiAgICAgICAgdGhpcy52aXNpYmxlR0xOb2Rlcy5wdXNoKGdsb2N0cmVlbm9kZSk7XHJcblxyXG4gICAgICAgIC8vIEF0IGV2ZXJ5IHZpc2libGl0eSBjaGFuZ2UsIHRoZSBvZmZzZXQgaW4gdGhlIHRleHR1cmUgY2hhbmdlcy5cclxuICAgICAgICBnbG9jdHJlZW5vZGUudm5TdGFydCA9IG9mZnNldHMuZ2V0KG5vZGUpO1xyXG5cclxuICAgICAgICBscnUudG91Y2goZ2xvY3RyZWVub2RlKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMudXBkYXRlZC5lbWl0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRHZW9tSXRlbSgpe1xyXG4gICAgcmV0dXJuIHRoaXMucG90cmVlQXNzZXQ7XHJcbiAgfVxyXG5cclxuICBfX2RyYXdOb2RlcyhyZW5kZXJzdGF0ZSl7XHJcbiAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XHJcbiAgICBjb25zdCB7IHVuaWZzIH0gPSByZW5kZXJzdGF0ZTtcclxuICAgIGNvbnN0IHsgbW9kZWxNYXRyaXgsIG9mZnNldCwgdU9jdHJlZVNpemUsIHVPY3RyZWVTcGFjaW5nLCB1Vk5TdGFydCwgdUxldmVsIH0gPSB1bmlmc1xyXG4gICAgZ2wudW5pZm9ybU1hdHJpeDRmdihtb2RlbE1hdHJpeC5sb2NhdGlvbiwgZmFsc2UsIHRoaXMubW9kZWxNYXRyaXhBcnJheSlcclxuICAgIFxyXG4gICAgaWYgKHVPY3RyZWVTaXplKVxyXG4gICAgICBnbC51bmlmb3JtMWYodU9jdHJlZVNpemUubG9jYXRpb24sIHRoaXMub2N0cmVlU2l6ZSlcclxuXHJcbiAgICBpZiAodU9jdHJlZVNwYWNpbmcpXHJcbiAgICAgIGdsLnVuaWZvcm0xZih1T2N0cmVlU3BhY2luZy5sb2NhdGlvbiwgdGhpcy5zcGFjaW5nKVxyXG5cclxuICAgIHRoaXMudmlzaWJsZUdMTm9kZXMuZm9yRWFjaChnbHBvaW50cyA9PiB7XHJcbiAgICAgIGNvbnN0IG5vZGUgPSBnbHBvaW50cy5ub2RlXHJcblxyXG4gICAgICBnbC51bmlmb3JtM2Z2KG9mZnNldC5sb2NhdGlvbiwgbm9kZS5vZmZzZXQuYXNBcnJheSgpKVxyXG4gICAgICBcclxuICAgICAgaWYgKHVWTlN0YXJ0KVxyXG4gICAgICAgIGdsLnVuaWZvcm0xaSh1Vk5TdGFydC5sb2NhdGlvbiwgZ2xwb2ludHMudm5TdGFydClcclxuICAgICAgaWYgKHVMZXZlbClcclxuICAgICAgICBnbC51bmlmb3JtMWYodUxldmVsLmxvY2F0aW9uLCBub2RlLmxldmVsKVxyXG5cclxuICAgICAgZ2xwb2ludHMuYmluZChyZW5kZXJzdGF0ZSlcclxuICAgICAgcmVuZGVyc3RhdGUuYmluZFZpZXdwb3J0cyh1bmlmcywgKCkgPT4ge1xyXG4gICAgICAgIGdscG9pbnRzLmRyYXcocmVuZGVyc3RhdGUpXHJcbiAgICAgIH0pXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGRyYXcocmVuZGVyc3RhdGUpIHtcclxuICAgIGlmICh0aGlzLnZpc2libGVHTE5vZGVzLmxlbmd0aCA9PSAwKSByZXR1cm47XHJcbiAgICB0aGlzLl9fZHJhd05vZGVzKHJlbmRlcnN0YXRlKVxyXG4gIH1cclxuXHJcbiAgZHJhd0hpZ2hsaWdodGVkR2VvbXMocmVuZGVyc3RhdGUpIHtcclxuICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcclxuICAgIGNvbnN0IHsgaGlnaGxpZ2h0Q29sb3IgfSA9IHJlbmRlcnN0YXRlLnVuaWZzO1xyXG4gICAgaWYgKGhpZ2hsaWdodENvbG9yKSB7XHJcbiAgICAgICAgZ2wudW5pZm9ybTRmdihoaWdobGlnaHRDb2xvci5sb2NhdGlvbiwgdGhpcy5wb3RyZWVBc3NldC5nZXRIaWdobGlnaHQoKS5hc0FycmF5KCkpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5fX2RyYXdOb2RlcyhyZW5kZXJzdGF0ZSlcclxuICB9XHJcblxyXG4gIGRyYXdHZW9tRGF0YShyZW5kZXJzdGF0ZSkge1xyXG4gICAgaWYgKHRoaXMudmlzaWJsZUdMTm9kZXMubGVuZ3RoID09IDApIHJldHVybjtcclxuICAgIHRoaXMuX19kcmF3Tm9kZXMocmVuZGVyc3RhdGUpXHJcbiAgfVxyXG5cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/zea/GLPotreeAsset.js\n");

/***/ }),

/***/ "./src/zea/GLPotreePass.js":
/*!*********************************!*\
  !*** ./src/zea/GLPotreePass.js ***!
  \*********************************/
/*! exports provided: GLPotreePass */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GLPotreePass\", function() { return GLPotreePass; });\n/* harmony import */ var _PotreeAsset_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PotreeAsset.js */ \"./src/zea/PotreeAsset.js\");\n/* harmony import */ var _GLPotreeAsset_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GLPotreeAsset.js */ \"./src/zea/GLPotreeAsset.js\");\n/* harmony import */ var _libs_other_BinaryHeap_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../libs/other/BinaryHeap.js */ \"./libs/other/BinaryHeap.js\");\n/* harmony import */ var _PotreePointsShader_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./PotreePointsShader.js */ \"./src/zea/PotreePointsShader.js\");\n/* harmony import */ var _LRU_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../LRU.js */ \"./src/LRU.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass GLPotreePass extends ZeaEngine.GLPass {\r\n  constructor(){\r\n    super();\r\n    \r\n    this.visiblePointsTarget = 2 * 1000 * 1000;\r\n    this.lru = new _LRU_js__WEBPACK_IMPORTED_MODULE_4__[\"LRU\"]();\r\n    this.minimumNodeVSize = 0.2; \r\n    this.glpotreeAssets = [];\r\n    this.hilghlightedAssets = [];\r\n\r\n    this.visibleNodesNeedUpdating = false;\r\n\r\n    // Size, not in pixels, but a fraction of scnreen V height.\r\n    const minimumNodeVSizeParam = this.addParameter(new ZeaEngine.NumberParameter('minimumNodeVSize',0.0))\r\n    minimumNodeVSizeParam.valueChanged.connect(mode => {\r\n        this.minimumNodeVSize = minimumNodeVSizeParam.getValue();\r\n    });\r\n\r\n    const visiblePointsTargetParam = this.addParameter(new ZeaEngine.NumberParameter('visiblePointsTarget', 0))\r\n    visiblePointsTargetParam.valueChanged.connect(() => {\r\n      this.pointBudget = visiblePointsTargetParam.getValue()\r\n        this.lru.pointLoadLimit = this.pointBudget * 2\r\n    });\r\n\r\n    const pointSizeParam = this.addParameter(new ZeaEngine.NumberParameter('Points Size', 0))\r\n    pointSizeParam.valueChanged.connect(() => {\r\n      this.pointSize = pointSizeParam.getValue()\r\n    });\r\n\r\n    minimumNodeVSizeParam.setValue(0.2)\r\n    visiblePointsTargetParam.setValue(2 * 1000 * 1000)\r\n    pointSizeParam.setValue(1.7)\r\n  }\r\n  /**\r\n   * The init method.\r\n   * @param {any} renderer - The renderer param.\r\n   * @param {any} passIndex - The passIndex param.\r\n   */\r\n  init(renderer, passIndex) {\r\n    super.init(renderer, passIndex)\r\n    const gl = renderer.gl;\r\n    this.glshader = new _PotreePointsShader_js__WEBPACK_IMPORTED_MODULE_3__[\"PotreePointsShader\"](gl);\r\n    this.glgeomdataShader = new _PotreePointsShader_js__WEBPACK_IMPORTED_MODULE_3__[\"PotreePointsGeomDataShader\"](gl);\r\n    this.glhighlightShader = new _PotreePointsShader_js__WEBPACK_IMPORTED_MODULE_3__[\"PotreePointsHilighlightShader\"](gl);\r\n\r\n    const size = 2048;\r\n    const data = new Uint8Array(size * 4);\r\n    for (let i = 0; i < size * 4; i++) data[i] = 255;\r\n\r\n    this.visibleNodesTexture = new ZeaEngine.GLTexture2D(gl, {\r\n      format: 'RGBA',\r\n      type: 'UNSIGNED_BYTE',\r\n      width: size,\r\n      height: 1,\r\n      filter: 'NEAREST',\r\n      wrap: 'CLAMP_TO_EDGE',\r\n      mipMapped: false,\r\n      data\r\n    })\r\n\r\n    this.__renderer.registerPass(\r\n      treeItem => {\r\n        if (treeItem instanceof _PotreeAsset_js__WEBPACK_IMPORTED_MODULE_0__[\"PotreeAsset\"]) {\r\n          this.addPotreeasset(treeItem)\r\n          return true\r\n        }\r\n        return false\r\n      },\r\n      treeItem => {\r\n        if (treeItem instanceof _PotreeAsset_js__WEBPACK_IMPORTED_MODULE_0__[\"PotreeAsset\"]) {\r\n          this.removePotreeasset(treeItem)\r\n          return true\r\n        }\r\n        return false\r\n      }\r\n    )\r\n  }\r\n\r\n  addPotreeasset(potreeAsset){\r\n    const __bindAsset = potreeAsset => {\r\n      const glpotreeAsset = new _GLPotreeAsset_js__WEBPACK_IMPORTED_MODULE_1__[\"GLPotreeAsset\"](this.__gl, potreeAsset, this.glshader);\r\n      glpotreeAsset.updated.connect(() => this.updated.emit());\r\n      potreeAsset.highlightChanged.connect(() => {\r\n        if (potreeAsset.isHighlighted()) {\r\n          if (this.hilghlightedAssets.indexOf(glpotreeAsset) == -1)\r\n            this.hilghlightedAssets.push(glpotreeAsset);\r\n        } else {\r\n          if (this.hilghlightedAssets.indexOf(glpotreeAsset) != -1)\r\n            this.hilghlightedAssets.splice(this.hilghlightedAssets.indexOf(glpotreeAsset), 1);\r\n        }\r\n      });\r\n\r\n      this.glpotreeAssets.push(glpotreeAsset);\r\n    }\r\n    if (potreeAsset.isLoaded())\r\n      __bindAsset(potreeAsset);\r\n    else {\r\n      potreeAsset.loaded.connect(() => __bindAsset(potreeAsset));\r\n    }\r\n  }\r\n\r\n  removePotreeasset(potreeAsset){\r\n\r\n\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n  // Visiblity\r\n\r\n  setViewport(viewport){\r\n    this.viewport = viewport;\r\n    this.viewport.viewChanged.connect(()=>{\r\n      this.visibleNodesNeedUpdating = true;\r\n    })\r\n    this.viewport.resized.connect(()=>{\r\n      this.visibleNodesNeedUpdating = true;\r\n    })\r\n    this.visibleNodesNeedUpdating = true;\r\n  }\r\n  \r\n  updateVisibilityStructures(priorityQueue) {\r\n    \r\n    const camera = this.viewport.getCamera();\r\n    const view = camera.getGlobalXfo().toMat4();\r\n    const viewI = this.viewport.getViewMatrix();\r\n    const proj = this.viewport.getProjectionMatrix();\r\n    const viewProj = proj.multiply(viewI)\r\n    const result = []\r\n    this.glpotreeAssets.forEach((glpotreeAsset, index)=> {\r\n        const potreeAsset = glpotreeAsset.getGeomItem()\r\n        const model = potreeAsset.getGlobalMat4()\r\n        const modelViewProj = viewProj.multiply(model);\r\n        const frustum = new ZeaEngine.Frustum();\r\n        frustum.setFromMatrix(modelViewProj);\r\n\r\n        // camera  position in object space\r\n        const modelInv = model.inverse();\r\n        const camMatrixObject = modelInv.multiply(view);\r\n        const camObjPos = camMatrixObject.translation\r\n\r\n        if (potreeAsset.getVisible() && potreeAsset.pcoGeometry !== null) {\r\n            priorityQueue.push({ index, node: potreeAsset.pcoGeometry.root, weight: Number.MAX_VALUE});\r\n        }\r\n\r\n        result.push({\r\n            glpotreeAsset,\r\n            frustum,\r\n            camObjPos,\r\n        });\r\n    });\r\n\r\n    return result\r\n  };\r\n\r\n\r\n  updateVisibility() {\r\n    const priorityQueue = new _libs_other_BinaryHeap_js__WEBPACK_IMPORTED_MODULE_2__[\"BinaryHeap\"](function (x) { return 1 / x.weight; });\r\n    const camera = this.viewport.getCamera();\r\n\r\n    this.numVisiblePoints = 0;\r\n    let numVisiblePoints = 0;\r\n    const visibleNodesByAsset = [];\r\n    let visibleNodes = []\r\n    const unloadedGeometry = [];\r\n\r\n    // calculate object space frustum and cam pos and setup priority queue\r\n    const result = this.updateVisibilityStructures(priorityQueue);\r\n\r\n    while (priorityQueue.size() > 0) {\r\n      const element = priorityQueue.pop();\r\n      const index = element.index;\r\n      const node = element.node;\r\n\r\n      if (numVisiblePoints + node.numPoints > this.pointBudget) {\r\n        break;\r\n      }\r\n\r\n      const frustum = result[index].frustum;\r\n      const insideFrustum = frustum.intersectsBox(node.boundingBox);\r\n      if (!insideFrustum) {\r\n        continue;\r\n      }\r\n      numVisiblePoints += node.numPoints;\r\n      this.numVisiblePoints += node.numPoints;\r\n\r\n      const parent = element.parent;\r\n      if (!parent || parent.isLoaded()) {\r\n        if (node.isLoaded()) {\r\n        if (!visibleNodesByAsset[index])\r\n            visibleNodesByAsset[index] = [];\r\n          visibleNodesByAsset[index].push(node);\r\n\r\n          visibleNodes.push(node);\r\n        } else {\r\n          unloadedGeometry.push(node);\r\n        }\r\n      }\r\n\r\n      // add child nodes to priorityQueue\r\n      const camObjPos = result[index].camObjPos;\r\n      const children = node.getChildren();\r\n      for (let i = 0; i < children.length; i++) {\r\n        const child = children[i];\r\n\r\n        let weight = 0; \r\n        if(true){\r\n          const sphere = child.getBoundingSphere();\r\n          const distance = sphere.pos.distanceTo(camObjPos);\r\n          const radius = sphere.radius;\r\n          if(distance - radius < 0){\r\n            weight = Number.MAX_VALUE;\r\n          } else {\r\n            const fov = camera.getFov();\r\n            const slope = Math.tan(fov / 2);\r\n\r\n            const projFactor = 0.5 / (slope * distance);\r\n            const screenVRadius = radius * projFactor;\r\n            \r\n            if(screenVRadius < this.minimumNodeVSize){\r\n              continue;\r\n            }\r\n            weight = screenVRadius;\r\n          }\r\n\r\n        } else {}\r\n\r\n        priorityQueue.push({ index, node: child, parent: node, weight: weight});\r\n      }\r\n    }// end priority queue loop\r\n    \r\n    const visibleNodeTextureOffsets = this.computeVisibilityTextureData(visibleNodes);\r\n\r\n    visibleNodesByAsset.forEach((assetVisibleNodes, index) => {\r\n      this.glpotreeAssets[index].setVisibleNodes(\r\n        assetVisibleNodes, \r\n        this.lru,\r\n        visibleNodeTextureOffsets\r\n      );\r\n    });\r\n\r\n    if (unloadedGeometry.length > 0) {\r\n      // Disabled temporarily\r\n      // for (let i = 0; i < Math.min(Potree.maxNodesLoading, unloadedGeometry.length); i++) {\r\n      const promises = []\r\n      for (let i = 0; i < unloadedGeometry.length; i++) {\r\n          // console.log(\"load:\", unloadedGeometry[i].name);\r\n          promises.push(unloadedGeometry[i].load());\r\n      }\r\n      if (promises.length > 0) {\r\n        // After all the loads have finished. \r\n        // update again so we can recompute and visiblity.\r\n        Promise.all(promises).then(()=>{\r\n          // for (let i = 0; i < unloadedGeometry.length; i++) {\r\n          //   console.log(\"loaded:\", unloadedGeometry[i].name);\r\n          // }\r\n          this.visibleNodesNeedUpdating = true;\r\n          this.updated.emit();\r\n        });\r\n      }\r\n    }\r\n\r\n    // Causes unused nodes to be flushed.\r\n    this.lru.freeMemory();\r\n\r\n    // this.updated.emit();\r\n  }\r\n\r\n  computeVisibilityTextureData(nodes){\r\n\r\n    const data = new Uint8Array(nodes.length * 4);\r\n    const visibleNodeTextureOffsets = new Map();\r\n\r\n    // copy array\r\n    nodes = nodes.slice();\r\n\r\n    // sort by level and index, e.g. r, r0, r3, r4, r01, r07, r30, ...\r\n    const sort = function (a, b) {\r\n      const na = a.name;\r\n      const nb = b.name;\r\n      if (na.length !== nb.length) return na.length - nb.length;\r\n      if (na < nb) return -1;\r\n      if (na > nb) return 1;\r\n      return 0;\r\n    };\r\n    nodes.sort(sort);\r\n\r\n    // const nodeMap = new Map();\r\n    const offsetsToChild = new Array(nodes.length).fill(Infinity);\r\n\r\n    for(let i = 0; i < nodes.length; i++){\r\n      const node = nodes[i];\r\n      // nodeMap.set(node.name, node);\r\n      visibleNodeTextureOffsets.set(node, i);\r\n\r\n      if(i > 0){\r\n        const index = node.index;//parseInt(node.name.slice(-1));\r\n        // console.log(node.name, node.index, node.name.slice(-1))\r\n        // const parentName = node.name.slice(0, -1);\r\n        const parent = node.parent;//nodeMap.get(parentName);\r\n        // console.log(node.parent.name, parent.name, node.parent === parent)\r\n        \r\n        const parentIndex = visibleNodeTextureOffsets.get(parent);\r\n\r\n        const parentOffsetToChild = (i - parentIndex);\r\n\r\n        const childOffset = Math.min(offsetsToChild[parentIndex], parentOffsetToChild);\r\n        \r\n        // Add this bit to the parent's chils bit mask.\r\n        data[parentIndex * 4 + 0] = data[parentIndex * 4 + 0] | (1 << index);\r\n        data[parentIndex * 4 + 1] = (childOffset >> 8);\r\n        data[parentIndex * 4 + 2] = (childOffset % 256);\r\n        offsetsToChild[parentIndex] = childOffset;\r\n      }\r\n\r\n      data[i * 4 + 3] = node.name.length - 1;\r\n    }\r\n\r\n    this.visibleNodesTexture.populate(data, nodes.length, 1);\r\n    return visibleNodeTextureOffsets;\r\n  }\r\n\r\n  // ///////////////////////////////////\r\n  // Rendering\r\n\r\n  /**\r\n   * The draw method.\r\n   * @param {any} renderstate - The renderstate param.\r\n   */\r\n  draw(renderstate) {\r\n    if (this.glpotreeAssets.length == 0) return;\r\n\r\n    if (this.visibleNodesNeedUpdating){\r\n      this.updateVisibility();\r\n      this.visibleNodesNeedUpdating = false;\r\n    }\r\n\r\n    const gl = this.__gl;\r\n  \r\n    gl.disable(gl.BLEND);\r\n    gl.depthMask(true);\r\n    gl.enable(gl.DEPTH_TEST);\r\n\r\n    this.glshader.bind(renderstate);\r\n\r\n    const { visibleNodes, PointSize } = renderstate.unifs;\r\n    if (visibleNodes)\r\n      this.visibleNodesTexture.bindToUniform(renderstate, visibleNodes)\r\n\r\n    gl.uniform1f(PointSize.location, this.pointSize);\r\n    \r\n    // RENDER\r\n    this.glpotreeAssets.forEach( a => a.draw(renderstate))\r\n\r\n  }\r\n\r\n  /**\r\n   * The drawHighlightedGeoms method.\r\n   * @param {any} renderstate - The renderstate param.\r\n   */\r\n  drawHighlightedGeoms(renderstate) {\r\n    if (this.hilghlightedAssets.length == 0) return;\r\n    const gl = this.__gl;\r\n  \r\n    gl.disable(gl.BLEND);\r\n    gl.depthMask(true);\r\n    gl.enable(gl.DEPTH_TEST);\r\n\r\n    this.glhighlightShader.bind(renderstate);\r\n    \r\n    const { visibleNodes, PointSize } = renderstate.unifs;\r\n    if (visibleNodes)\r\n      this.visibleNodesTexture.bindToUniform(renderstate, visibleNodes)\r\n\r\n    gl.uniform1f(PointSize.location, this.pointSize);\r\n\r\n    this.hilghlightedAssets.forEach( a => a.drawHighlightedGeoms(renderstate))\r\n  }\r\n\r\n  /**\r\n   * The drawGeomData method.\r\n   * @param {any} renderstate - The renderstate param.\r\n   */\r\n  drawGeomData(renderstate) {\r\n    if (this.glpotreeAssets.length == 0) return;\r\n    const gl = this.__gl;\r\n  \r\n    gl.disable(gl.BLEND);\r\n    gl.depthMask(true);\r\n    gl.enable(gl.DEPTH_TEST);\r\n\r\n    this.glgeomdataShader.bind(renderstate);\r\n    \r\n    const { visibleNodes, PointSize } = renderstate.unifs;\r\n    if (visibleNodes)\r\n      this.visibleNodesTexture.bindToUniform(renderstate, visibleNodes)\r\n\r\n    gl.uniform1f(PointSize.location, this.pointSize);\r\n\r\n    // RENDER\r\n    this.glpotreeAssets.forEach((a, index)=> {\r\n      const { passId, assetId } = renderstate.unifs;\r\n      if (passId) {\r\n        gl.uniform1i(passId.location, this.__passIndex);\r\n      }\r\n      if (assetId) {\r\n        gl.uniform1i(assetId.location, index);\r\n      }\r\n      a.drawGeomData(renderstate)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * The getGeomItemAndDist method.\r\n   * @param {any} geomData - The geomData param.\r\n   */\r\n  getGeomItemAndDist(geomData) {\r\n    const itemId = Math.round(geomData[1])\r\n    const dist = geomData[3]\r\n    const glpotreeAsset = this.glpotreeAssets[itemId]\r\n    if (glpotreeAsset) {\r\n      return {\r\n        geomItem: glpotreeAsset.getGeomItem(),\r\n        dist,\r\n      }\r\n    }\r\n  }\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/zea/GLPotreePass.js\n");

/***/ }),

/***/ "./src/zea/PotreeAsset.js":
/*!********************************!*\
  !*** ./src/zea/PotreeAsset.js ***!
  \********************************/
/*! exports provided: PotreeAsset */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PotreeAsset\", function() { return PotreeAsset; });\n/* harmony import */ var _loader_POCLoader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../loader/POCLoader */ \"./src/loader/POCLoader.js\");\n\r\n\r\n// Note: replaces PointCloudOctree.\r\n// \r\nclass PotreeAsset extends ZeaEngine.AssetItem {\r\n\r\n  constructor(){\r\n    super();\r\n    \r\n    this.loaded.setToggled(false)\r\n\r\n    this.pointBudget = 5 * 1000 * 1000;\r\n    this.minimumNodeVSize = 0.2; // Size, not in pixels, but a fraction of scnreen V height.\r\n    this.level = 0;\r\n    this.visibleNodes = [];\r\n\r\n    this.__loaded = false;\r\n\r\n    // this.fileParam = this.addParameter(new ZeaEngine.FilePathParameter('File'))\r\n    // this.fileParam.valueChanged.connect(mode => {\r\n    //   this.loaded.untoggle()\r\n  \t//   this.loadPointCloud(path, name)\r\n    // })\r\n    this.addParameter(new ZeaEngine.NumberParameter('Version', 0))\r\n    this.addParameter(new ZeaEngine.NumberParameter('Num Points', 0))\r\n  }\r\n\r\n  getGlobalMat4() {\r\n    return this.getGlobalXfo().toMat4();\r\n  }\r\n  \r\n  _cleanBoundingBox(bbox) {\r\n    bbox = super._cleanBoundingBox(bbox)\r\n    const mat4 = this.getGlobalMat4();\r\n    const geomBox = new ZeaEngine.Box3();\r\n    const { min, max } = this.pcoGeometry.tightBoundingBox\r\n    geomBox.min.set(min.x, min.y, min.z);\r\n    geomBox.max.set(max.x, max.y, max.z);\r\n    bbox.addBox3(geomBox, mat4)\r\n    return bbox;\r\n  }\r\n\r\n  setGeometry(pcoGeometry) {\r\n\r\n    this.pcoGeometry = pcoGeometry;\r\n\tconst mode = ZeaEngine.ValueSetMode.DATA_LOAD;\r\n\r\n    // const xfo = this.getGlobalXfo();\r\n    // xfo.tr = this.pcoGeometry.offset;\r\n    // this.setGlobalXfo(xfo, mode);\r\n\r\n\tthis.getParameter('Version').setValue(parseFloat(pcoGeometry.version), mode);\r\n\tif (pcoGeometry.numPoints)\r\n\t\tthis.getParameter('Num Points').setValue(pcoGeometry.numPoints, mode);\r\n    \r\n    // this._setBoundingBoxDirty()\r\n\r\n    this.loaded.emit();\r\n\r\n    // if (this.viewport)\r\n    //   this.updateVisibility();\r\n  }\r\n\r\n  getGeometry() {\r\n      return this.pcoGeometry;\r\n  };\r\n  \r\n  // // Load and add point cloud to scene\r\n  loadPointCloud(path, name) {\r\n    return new Promise((resolve, reject) => {\r\n      _loader_POCLoader__WEBPACK_IMPORTED_MODULE_0__[\"POCLoader\"].load(path, geometry => {\r\n        if (!geometry) {\r\n          reject(`failed to load point cloud from URL: ${path}`);\r\n        } else {\r\n          this.setGeometry(geometry)\r\n          resolve(geometry);\r\n        }\r\n      });\r\n    });\r\n  }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9aZWFQb3RyZWUvLi9zcmMvemVhL1BvdHJlZUFzc2V0LmpzP2JkNTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQThDOztBQUU5QztBQUNBO0FBQ087O0FBRVA7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFdBQVc7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLDJEQUFTO0FBQ2Y7QUFDQSx5REFBeUQsS0FBSztBQUM5RCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBIiwiZmlsZSI6Ii4vc3JjL3plYS9Qb3RyZWVBc3NldC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UE9DTG9hZGVyfSBmcm9tIFwiLi4vbG9hZGVyL1BPQ0xvYWRlclwiO1xyXG5cclxuLy8gTm90ZTogcmVwbGFjZXMgUG9pbnRDbG91ZE9jdHJlZS5cclxuLy8gXHJcbmV4cG9ydCBjbGFzcyBQb3RyZWVBc3NldCBleHRlbmRzIFplYUVuZ2luZS5Bc3NldEl0ZW0ge1xyXG5cclxuICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgc3VwZXIoKTtcclxuICAgIFxyXG4gICAgdGhpcy5sb2FkZWQuc2V0VG9nZ2xlZChmYWxzZSlcclxuXHJcbiAgICB0aGlzLnBvaW50QnVkZ2V0ID0gNSAqIDEwMDAgKiAxMDAwO1xyXG4gICAgdGhpcy5taW5pbXVtTm9kZVZTaXplID0gMC4yOyAvLyBTaXplLCBub3QgaW4gcGl4ZWxzLCBidXQgYSBmcmFjdGlvbiBvZiBzY25yZWVuIFYgaGVpZ2h0LlxyXG4gICAgdGhpcy5sZXZlbCA9IDA7XHJcbiAgICB0aGlzLnZpc2libGVOb2RlcyA9IFtdO1xyXG5cclxuICAgIHRoaXMuX19sb2FkZWQgPSBmYWxzZTtcclxuXHJcbiAgICAvLyB0aGlzLmZpbGVQYXJhbSA9IHRoaXMuYWRkUGFyYW1ldGVyKG5ldyBaZWFFbmdpbmUuRmlsZVBhdGhQYXJhbWV0ZXIoJ0ZpbGUnKSlcclxuICAgIC8vIHRoaXMuZmlsZVBhcmFtLnZhbHVlQ2hhbmdlZC5jb25uZWN0KG1vZGUgPT4ge1xyXG4gICAgLy8gICB0aGlzLmxvYWRlZC51bnRvZ2dsZSgpXHJcbiAgXHQvLyAgIHRoaXMubG9hZFBvaW50Q2xvdWQocGF0aCwgbmFtZSlcclxuICAgIC8vIH0pXHJcbiAgICB0aGlzLmFkZFBhcmFtZXRlcihuZXcgWmVhRW5naW5lLk51bWJlclBhcmFtZXRlcignVmVyc2lvbicsIDApKVxyXG4gICAgdGhpcy5hZGRQYXJhbWV0ZXIobmV3IFplYUVuZ2luZS5OdW1iZXJQYXJhbWV0ZXIoJ051bSBQb2ludHMnLCAwKSlcclxuICB9XHJcblxyXG4gIGdldEdsb2JhbE1hdDQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRHbG9iYWxYZm8oKS50b01hdDQoKTtcclxuICB9XHJcbiAgXHJcbiAgX2NsZWFuQm91bmRpbmdCb3goYmJveCkge1xyXG4gICAgYmJveCA9IHN1cGVyLl9jbGVhbkJvdW5kaW5nQm94KGJib3gpXHJcbiAgICBjb25zdCBtYXQ0ID0gdGhpcy5nZXRHbG9iYWxNYXQ0KCk7XHJcbiAgICBjb25zdCBnZW9tQm94ID0gbmV3IFplYUVuZ2luZS5Cb3gzKCk7XHJcbiAgICBjb25zdCB7IG1pbiwgbWF4IH0gPSB0aGlzLnBjb0dlb21ldHJ5LnRpZ2h0Qm91bmRpbmdCb3hcclxuICAgIGdlb21Cb3gubWluLnNldChtaW4ueCwgbWluLnksIG1pbi56KTtcclxuICAgIGdlb21Cb3gubWF4LnNldChtYXgueCwgbWF4LnksIG1heC56KTtcclxuICAgIGJib3guYWRkQm94MyhnZW9tQm94LCBtYXQ0KVxyXG4gICAgcmV0dXJuIGJib3g7XHJcbiAgfVxyXG5cclxuICBzZXRHZW9tZXRyeShwY29HZW9tZXRyeSkge1xyXG5cclxuICAgIHRoaXMucGNvR2VvbWV0cnkgPSBwY29HZW9tZXRyeTtcclxuXHRjb25zdCBtb2RlID0gWmVhRW5naW5lLlZhbHVlU2V0TW9kZS5EQVRBX0xPQUQ7XHJcblxyXG4gICAgLy8gY29uc3QgeGZvID0gdGhpcy5nZXRHbG9iYWxYZm8oKTtcclxuICAgIC8vIHhmby50ciA9IHRoaXMucGNvR2VvbWV0cnkub2Zmc2V0O1xyXG4gICAgLy8gdGhpcy5zZXRHbG9iYWxYZm8oeGZvLCBtb2RlKTtcclxuXHJcblx0dGhpcy5nZXRQYXJhbWV0ZXIoJ1ZlcnNpb24nKS5zZXRWYWx1ZShwYXJzZUZsb2F0KHBjb0dlb21ldHJ5LnZlcnNpb24pLCBtb2RlKTtcclxuXHRpZiAocGNvR2VvbWV0cnkubnVtUG9pbnRzKVxyXG5cdFx0dGhpcy5nZXRQYXJhbWV0ZXIoJ051bSBQb2ludHMnKS5zZXRWYWx1ZShwY29HZW9tZXRyeS5udW1Qb2ludHMsIG1vZGUpO1xyXG4gICAgXHJcbiAgICAvLyB0aGlzLl9zZXRCb3VuZGluZ0JveERpcnR5KClcclxuXHJcbiAgICB0aGlzLmxvYWRlZC5lbWl0KCk7XHJcblxyXG4gICAgLy8gaWYgKHRoaXMudmlld3BvcnQpXHJcbiAgICAvLyAgIHRoaXMudXBkYXRlVmlzaWJpbGl0eSgpO1xyXG4gIH1cclxuXHJcbiAgZ2V0R2VvbWV0cnkoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnBjb0dlb21ldHJ5O1xyXG4gIH07XHJcbiAgXHJcbiAgLy8gLy8gTG9hZCBhbmQgYWRkIHBvaW50IGNsb3VkIHRvIHNjZW5lXHJcbiAgbG9hZFBvaW50Q2xvdWQocGF0aCwgbmFtZSkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgUE9DTG9hZGVyLmxvYWQocGF0aCwgZ2VvbWV0cnkgPT4ge1xyXG4gICAgICAgIGlmICghZ2VvbWV0cnkpIHtcclxuICAgICAgICAgIHJlamVjdChgZmFpbGVkIHRvIGxvYWQgcG9pbnQgY2xvdWQgZnJvbSBVUkw6ICR7cGF0aH1gKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5zZXRHZW9tZXRyeShnZW9tZXRyeSlcclxuICAgICAgICAgIHJlc29sdmUoZ2VvbWV0cnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/zea/PotreeAsset.js\n");

/***/ }),

/***/ "./src/zea/PotreePointsShader.js":
/*!***************************************!*\
  !*** ./src/zea/PotreePointsShader.js ***!
  \***************************************/
/*! exports provided: PotreePointsShader, PotreePointsGeomDataShader, PotreePointsHilighlightShader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PotreePointsShader\", function() { return PotreePointsShader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PotreePointsGeomDataShader\", function() { return PotreePointsGeomDataShader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PotreePointsHilighlightShader\", function() { return PotreePointsHilighlightShader; });\n\r\n\r\nclass PotreePointsShader extends ZeaEngine.GLShader {\r\n  constructor(gl) {\r\n    super(gl)\r\n    this.__shaderStages['VERTEX_SHADER'] = ZeaEngine.shaderLibrary.parseShader(\r\n      'PointsShader.vertexShader',\r\n      `\r\nprecision highp float;\r\n\r\ninstancedattribute vec3 positions;\r\ninstancedattribute vec4 colors;\r\n\r\nuniform vec3 offset;\r\nuniform float uOctreeSize;\r\nuniform int uVNStart;\r\nuniform float uLevel;\r\nuniform float uOctreeSpacing;\r\nuniform sampler2D visibleNodes;\r\n\r\n\r\nuniform mat4 modelMatrix;\r\nuniform mat4 viewMatrix;\r\nuniform mat4 projectionMatrix;\r\nuniform float PointSize;\r\n\r\n<%include file=\"utils/quadVertexFromID.glsl\"/>\r\n\r\n/* VS Outputs */\r\nvarying vec4 v_color;\r\nvarying vec2 v_texCoord;\r\nvarying vec3 v_viewPos;\r\n\r\n// ---------------------\r\n// OCTREE\r\n// ---------------------\r\n\r\n/**\r\n * number of 1-bits up to inclusive index position\r\n * number is treated as if it were an integer in the range 0-255\r\n *\r\n */\r\nint numberOfOnes(int number, int index){\r\n    int numOnes = 0;\r\n    int tmp = 128;\r\n    for(int i = 7; i >= 0; i--){\r\n        \r\n        if(number >= tmp){\r\n            number = number - tmp;\r\n\r\n            if(i <= index){\r\n                numOnes++;\r\n            }\r\n        }\r\n        \r\n        tmp = tmp / 2;\r\n    }\r\n\r\n    return numOnes;\r\n}\r\n\r\n\r\n/**\r\n * checks whether the bit at index is 1\r\n * number is treated as if it were an integer in the range 0-255\r\n *\r\n */\r\nbool isBitSet(int number, int index){\r\n\r\n    // weird multi else if due to lack of proper array, int and bitwise support in WebGL 1.0\r\n    int powi = 1;\r\n    if(index == 0){\r\n        powi = 1;\r\n    }else if(index == 1){\r\n        powi = 2;\r\n    }else if(index == 2){\r\n        powi = 4;\r\n    }else if(index == 3){\r\n        powi = 8;\r\n    }else if(index == 4){\r\n        powi = 16;\r\n    }else if(index == 5){\r\n        powi = 32;\r\n    }else if(index == 6){\r\n        powi = 64;\r\n    }else if(index == 7){\r\n        powi = 128;\r\n    }else{\r\n        return false;\r\n    }\r\n\r\n    int ndp = number / powi;\r\n\r\n    return mod(float(ndp), 2.0) != 0.0;\r\n}\r\n\r\n\r\n/**\r\n * find the LOD at the point position\r\n */\r\nfloat getLOD(vec3 position){\r\n    \r\n    vec3 offset = vec3(0.0, 0.0, 0.0);\r\n    int iOffset = uVNStart;\r\n    float depth = uLevel;\r\n    for(float i = 0.0; i <= 30.0; i++){\r\n        float nodeSizeAtLevel = uOctreeSize / pow(2.0, i + uLevel + 0.0);\r\n        \r\n        vec3 index3d = (position-offset) / nodeSizeAtLevel;\r\n        index3d = floor(index3d + 0.5);\r\n        int index = int(round(4.0 * index3d.x + 2.0 * index3d.y + index3d.z));\r\n        \r\n        vec4 value = texture2D(visibleNodes, vec2(float(iOffset) / 2048.0, 0.0));\r\n        int mask = int(round(value.r * 255.0));\r\n\r\n        if(isBitSet(mask, index)){\r\n            // there are more visible child nodes at this position\r\n            int advanceG = int(round(value.g * 255.0)) * 256;\r\n            int advanceB = int(round(value.b * 255.0));\r\n            int advanceChild = numberOfOnes(mask, index - 1);\r\n            int advance = advanceG + advanceB + advanceChild;\r\n\r\n            iOffset = iOffset + advance;\r\n            \r\n            depth++;\r\n        }else{\r\n            // no more visible child nodes at this position\r\n            return value.a * 255.0;\r\n            //return depth;\r\n        }\r\n        \r\n        offset = offset + (nodeSizeAtLevel * 0.5) * index3d;\r\n    }\r\n    \r\n        \r\n    return depth;\r\n}\r\n\r\nfloat getPointSizeAttenuation(vec3 position){\r\n  float lod = getLOD(position);\r\n  // v_color = vec4(0.0, 0.0, 0.0, 1.0);\r\n  // v_color.r = lod / 5.0;\r\n  return pow(2.0, lod);\r\n}\r\n\r\n\r\nfloat getPointSize(vec3 position){\r\n\t\r\n\tfloat r = uOctreeSpacing * PointSize;\r\n  \r\n  float pointSize = r / getPointSizeAttenuation(position);\r\n\r\n\t// pointSize = clamp(pointSize, minSize, maxSize);\r\n\t\r\n\treturn pointSize;\r\n}\r\n\r\n\r\nvoid main(void) {\r\n  v_color = colors / 255.0; // Unsigned byte attributes need to be scaled down from 0-255 > 0..1\r\n  \r\n  vec2 quadPointPos = getQuadVertexPositionFromID();\r\n  v_texCoord = quadPointPos + 0.5;\r\n\r\n  vec4 pos = vec4(positions + offset, 1.);\r\n  mat4 modelViewMatrix = viewMatrix * modelMatrix;\r\n  vec4 viewPos = modelViewMatrix * pos;\r\n\r\n\tfloat pointSize = getPointSize(positions);\r\n\r\n  viewPos += vec4(vec3(quadPointPos, 0.0) * pointSize, 0.);\r\n  v_viewPos = -viewPos.xyz;\r\n\r\n  gl_Position = projectionMatrix * viewPos;\r\n\r\n//   gl_PointSize = PointSize;\r\n\r\n}\r\n`\r\n    )\r\n\r\n    this.__shaderStages['FRAGMENT_SHADER'] = ZeaEngine.shaderLibrary.parseShader(\r\n      'PointsShader.fragmentShader',\r\n      `\r\nprecision highp float;\r\n\r\nuniform color BaseColor;\r\n\r\n/* VS Outputs */\r\nvarying vec4 v_color;\r\nvarying vec2 v_texCoord;\r\n\r\n#ifdef ENABLE_ES3\r\nout vec4 fragColor;\r\n#endif\r\n\r\nvoid main(void) {\r\n\r\n#ifndef ENABLE_ES3\r\n  vec4 fragColor;\r\n#endif\r\n\r\n  if(length(v_texCoord - 0.5) > 0.5)\r\n    discard;\r\n\r\n  fragColor = v_color;\r\n  fragColor.a = 1.0;\r\n\r\n#ifndef ENABLE_ES3\r\n  gl_FragColor = fragColor;\r\n#endif\r\n}\r\n`\r\n    )\r\n  }\r\n\r\n  static getGeomDataShaderName() {\r\n    return 'PotreePointsGeomDataShader'\r\n  }\r\n\r\n  static getSelectedShaderName() {\r\n    return 'PotreePointsHilighlightShader'\r\n  }\r\n}\r\n\r\nZeaEngine.sgFactory.registerClass('PotreePointsShader', PotreePointsShader)\r\n\r\n\r\n\r\nclass PotreePointsGeomDataShader extends PotreePointsShader {\r\n  constructor(gl) {\r\n    super(gl)\r\n\r\n    this.__shaderStages['FRAGMENT_SHADER'] = ZeaEngine.shaderLibrary.parseShader(\r\n      'PointsShader.fragmentShader',\r\n      `\r\nprecision highp float;\r\n\r\nuniform int passId;\r\nuniform int assetId;\r\n\r\n/* VS Outputs */\r\nvarying vec4 v_color;\r\nvarying vec2 v_texCoord;\r\nvarying vec3 v_viewPos;\r\n\r\n#ifdef ENABLE_ES3\r\nout vec4 fragColor;\r\n#endif\r\n\r\nvoid main(void) {\r\n\r\n#ifndef ENABLE_ES3\r\n  vec4 fragColor;\r\n#endif\r\n\r\n  if(length(v_texCoord - 0.5) > 0.5)\r\n    discard;\r\n\r\n  float dist = length(v_viewPos);\r\n\r\n  fragColor.r = float(passId); \r\n  fragColor.g = float(assetId);\r\n  fragColor.b = 0.0;// TODO: store poly-id or something.\r\n  fragColor.a = dist;\r\n\r\n#ifndef ENABLE_ES3\r\n  gl_FragColor = fragColor;\r\n#endif\r\n}\r\n`\r\n    )\r\n  }\r\n}\r\n\r\nZeaEngine.sgFactory.registerClass('PotreePointsGeomDataShader', PotreePointsGeomDataShader)\r\n\r\nclass PotreePointsHilighlightShader extends PotreePointsShader {\r\n  constructor(gl) {\r\n    super(gl)\r\n\r\n    this.__shaderStages['FRAGMENT_SHADER'] = ZeaEngine.shaderLibrary.parseShader(\r\n      'PointsShader.fragmentShader',\r\n      `\r\nprecision highp float;\r\n\r\nuniform color highlightColor;\r\n\r\n/* VS Outputs */\r\nvarying vec4 v_color;\r\nvarying vec2 v_texCoord;\r\nvarying vec3 v_viewPos;\r\n\r\n#ifdef ENABLE_ES3\r\nout vec4 fragColor;\r\n#endif\r\n\r\nvoid main(void) {\r\n\r\n#ifndef ENABLE_ES3\r\n  vec4 fragColor;\r\n#endif\r\n\r\n  if(length(v_texCoord - 0.5) > 0.5)\r\n    discard;\r\n\r\n  fragColor = highlightColor;\r\n\r\n#ifndef ENABLE_ES3\r\n  gl_FragColor = fragColor;\r\n#endif\r\n}\r\n`\r\n    )\r\n  }\r\n}\r\n\r\nZeaEngine.sgFactory.registerClass('PotreePointsHilighlightShader', PotreePointsHilighlightShader)\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/zea/PotreePointsShader.js\n");

/***/ }),

/***/ "./src/zea/index.js":
/*!**************************!*\
  !*** ./src/zea/index.js ***!
  \**************************/
/*! exports provided: version, GLPotreePass, PotreeAsset */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"version\", function() { return version; });\n/* harmony import */ var _GLPotreePass_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GLPotreePass.js */ \"./src/zea/GLPotreePass.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"GLPotreePass\", function() { return _GLPotreePass_js__WEBPACK_IMPORTED_MODULE_0__[\"GLPotreePass\"]; });\n\n/* harmony import */ var _PotreeAsset_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PotreeAsset.js */ \"./src/zea/PotreeAsset.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PotreeAsset\", function() { return _PotreeAsset_js__WEBPACK_IMPORTED_MODULE_1__[\"PotreeAsset\"]; });\n\n\r\n\r\nconst version = {\r\n\tmajor: 1,\r\n\tminor: 6,\r\n\tsuffix: ''\r\n};\r\n\r\nconsole.log('ZeaPotree ' + version.major + '.' + version.minor + version.suffix);\r\n\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9aZWFQb3RyZWUvLi9zcmMvemVhL2luZGV4LmpzP2Y3MzgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRWtDO0FBQ0QiLCJmaWxlIjoiLi9zcmMvemVhL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5leHBvcnQgY29uc3QgdmVyc2lvbiA9IHtcclxuXHRtYWpvcjogMSxcclxuXHRtaW5vcjogNixcclxuXHRzdWZmaXg6ICcnXHJcbn07XHJcblxyXG5jb25zb2xlLmxvZygnWmVhUG90cmVlICcgKyB2ZXJzaW9uLm1ham9yICsgJy4nICsgdmVyc2lvbi5taW5vciArIHZlcnNpb24uc3VmZml4KTtcclxuXHJcbmV4cG9ydCAqIGZyb20gXCIuL0dMUG90cmVlUGFzcy5qc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9Qb3RyZWVBc3NldC5qc1wiO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/zea/index.js\n");

/***/ })

/******/ });
});